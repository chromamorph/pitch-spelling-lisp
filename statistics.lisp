;; Functions for performing statistical operations.(defun summarise (list-of-numbers)  (format t 	  "~%MIN = ~f~%MAX = ~f~%MEDIAN = ~f~%MEAN = ~f~%MODE = ~a~%SD = ~f~%Number of observations = ~d~%Number of distinct observations = ~d"	  (apply #'min list-of-numbers)	  (apply #'max list-of-numbers)	  (median list-of-numbers)	  (mean list-of-numbers)	  (mode list-of-numbers)	  (sd list-of-numbers)	  (list-length list-of-numbers)	  (list-length (remove-duplicates list-of-numbers))))(defun mode (list-of-numbers)  (let* ((set-of-distinct-numbers (remove-duplicates list-of-numbers))	 (set-of-frequencies (mapcar #'(lambda (n) (count n list-of-numbers))				     set-of-distinct-numbers))	 (max-frequency (apply #'max set-of-frequencies))	 (list-of-modes (remove-if #'null (mapcar #'(lambda (n f)						      (if (= f max-frequency)							  n))						  set-of-distinct-numbers						  set-of-frequencies))))    (list (mapcar #'(lambda (x) (* 1.0 x))		  list-of-modes)	  max-frequency)))(defun median (list-of-numbers)  (let* ((sorted-list-of-numbers (sort list-of-numbers #'<)))    (* 1.0 (if (oddp (list-length list-of-numbers))	       (elt sorted-list-of-numbers (/ (- (list-length list-of-numbers) 1) 2))	       (/ (+ (elt sorted-list-of-numbers (/ (- (list-length list-of-numbers) 2) 2))		     (elt sorted-list-of-numbers (/ (list-length list-of-numbers) 2)))		  2)))))(defun mean (list-of-numbers)  (* 1.0 (/ (apply #'+ list-of-numbers) (list-length list-of-numbers))))(defun sd (list-of-numbers)  (let* ((x-bar (mean list-of-numbers)))    (* 1.0 (sqrt (/ (apply #'+ (mapcar #'(lambda (x) 					   (expt (- x x-bar) 2)) 				       list-of-numbers))		    (- (list-length list-of-numbers) 1))))))(defun standard-deviation (list-of-numbers)  (sd list-of-numbers))(defun variance (list-of-values)  (let* ((mean (mean list-of-values))         (list-of-square-deviations (mapcar #'(lambda (val)                                                (expt (- val mean) 2))                                            list-of-values))         (sum-of-square-deviations (apply #'+ list-of-square-deviations))         (n (list-length list-of-values)))    (* 1.0 (/ sum-of-square-deviations	      (- n 1)))))