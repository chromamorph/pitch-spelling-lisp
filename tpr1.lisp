;; Port of tpr1 code from MCL with some additions.(load "hd:2007-04-23:pitch.lisp")(load "hd:2007-04-23:sort-opnd.lisp")(load "hd:2007-04-23:print-results.lisp")(load "hd:2007-04-23:open-read-close.lisp")(load "hd:2007-04-23:results-for-one-algorithm.lisp")(defun batch-tpr1c-m-opnd-file (input-directory				output-directory)  (batch-tpr1-opnd-file input-directory			output-directory			'sharp			'exponential			34			-24			:window-size 1000			:meredith-tpr-1 t))(defun batch-tpr1c-opnd-file (input-directory			      output-directory)  (batch-tpr1-opnd-file input-directory			output-directory			'sharp			'exponential			34			-24			:window-size 1000))(defun batch-tpr1-opnd-file (input-directory			     output-directory			     cog2note-eq-six-option			     recency-decay-function			     max-tpc			     min-tpc			     &key			     (window-size nil)			     (for-temperley nil)			     (meredith-tpr-1 nil))  (let* ((list-of-input-files (directory (concatenate 'string input-directory "*.opnd-m"))))    (mapcar #'(lambda (input-file-name)		(format t "~%~a..." (pathname-name input-file-name))		(tpr1-opnd-file input-file-name				output-directory				cog2note-eq-six-option				recency-decay-function				max-tpc				min-tpc				:window-size window-size				:for-temperley for-temperley				:meredith-tpr-1 meredith-tpr-1)		(format t "DONE") (force-output))	    list-of-input-files)))(defun tpr1-opnd-file (input-opnd-file		       output-directory		       cog2note-eq-six-option		       recency-decay-function		       max-tpc		       min-tpc		       &key		       (window-size nil)		       (for-temperley nil)		       (meredith-tpr-1 nil))  (let* ((opnd-dataset (sort-by-onset (open-read-close input-opnd-file)))	 (sorted-omd-list (opndv2omdlist opnd-dataset))	 (output-omdtlist (tpr1 sorted-omd-list				cog2note-eq-six-option				recency-decay-function				max-tpc				min-tpc				:window-size window-size				:for-temperley for-temperley				:meredith-tpr-1 meredith-tpr-1))	 (output-opndv-dataset (omdtlist2opndv sorted-omd-list					       output-omdtlist					       opnd-dataset))	 (output-opndv-file-name (concatenate 'string 					      output-directory					      (pathname-name input-opnd-file)					      ".tpr1")))    (with-open-file (output-stream		     output-opndv-file-name		     :direction :output		     :if-exists :rename-and-delete)      (pprint output-opndv-dataset output-stream))))(defun tpr1 (sorted-omd-list              cog2note-eq-six-option             recency-decay-function             max-tpc             min-tpc             &key             (window-size nil)             (for-temperley nil)             (meredith-tpr-1 nil))  (let (chord-list         number-of-chords        omdt-list-for-this-chord        output-omdt-list)    (setf chord-list (omd-list-to-chord-list sorted-omd-list))    (setf number-of-chords (list-length chord-list))    (setf output-omdt-list nil)    (dotimes (i number-of-chords)      (setf omdt-list-for-this-chord (spell-chord (elt chord-list i)                                                  output-omdt-list                                                  cog2note-eq-six-option                                                  recency-decay-function                                                  max-tpc                                                  min-tpc                                                  window-size                                                  for-temperley                                                  meredith-tpr-1))      (setf output-omdt-list            (append output-omdt-list                    omdt-list-for-this-chord)))    output-omdt-list))(defun spell-chord (chord                     omdt-list                    cog2note-eq-six-option                    recency-decay-function                    max-tpc                    min-tpc                    window-size                    for-temperley                    meredith-tpr-1)  (let (cog         tpc        omdt-for-this-omd        omdt-list-for-this-chord)    (setf cog (compute-cog chord                            omdt-list                           recency-decay-function                           window-size))    (if meredith-tpr-1       (setf cog (- cog 2)))    (setf omdt-list-for-this-chord nil)    (dotimes (i (list-length chord))      (setf tpc (compute-tpc (second (elt chord i))                             cog                             cog2note-eq-six-option                             max-tpc                             min-tpc))      (setf omdt-for-this-omd (append (elt chord i)                                      (if for-temperley (list cog))                                      (list tpc)))      (setf omdt-list-for-this-chord            (append omdt-list-for-this-chord                    (list omdt-for-this-omd))))    omdt-list-for-this-chord))(defun compute-tpc (midi-note-number                     cog                    cog2note-eq-six-option                    max-tpc                    min-tpc)  (let (tpc-class        cog-tpc-class        cog2note-lof-displacement        tpc)    (setf tpc-class (midi2tpc-class midi-note-number))    (setf cog-tpc-class (mod cog 12))    (setf cog2note-lof-displacement (- tpc-class cog-tpc-class))    (if (> cog2note-lof-displacement 6)      (setf tpc (round (- (+ cog cog2note-lof-displacement) 12)))      (if (< -6 cog2note-lof-displacement 6)        (setf tpc (round (+ cog cog2note-lof-displacement)))        (if (< cog2note-lof-displacement -6)          (setf tpc (round (+ (+ cog cog2note-lof-displacement) 12)))          (setf tpc (compute-tpc-for-cog2note-lof-disp-eq-six cog cog2note-eq-six-option)))))    (do ()        ((>= tpc min-tpc))      (setf tpc (+ 12 tpc)))    (do ()        ((<= tpc max-tpc))      (setf tpc (- tpc 12)))    tpc))(defun compute-tpc-for-cog2note-lof-disp-eq-six (cog cog2note-eq-six-option)  (if (eq cog2note-eq-six-option 'sharp)    (round (+ cog 6))    (if (eq cog2note-eq-six-option 'flat)      (round (- cog 6)))))(defun midi2tpc-class (midi)  (npc2tpc-class (mod midi 12)))(defun npc2tpc-class (npc)  (mod (+ 2 (* 7 npc)) 12))(defun compute-cog (chord                     omdt-list                    recency-decay-function                    window-size		    )  (let (cog        this-onset        recency-weights        duration-weights        n ;w        tpcs        window        win-start)    (if (null omdt-list)      (setf cog 4)      (if (eq recency-decay-function              'exponential)        (progn          (setf n (list-length omdt-list))          (setf this-onset (first (first chord)))          (if window-size            (setf win-start (max 0 (- n window-size))                  window (subseq omdt-list win-start))            (setf window omdt-list))          ;(setf w (list-length window))          (setf recency-weights (mapcar #'(lambda (omdt)                                            (/ 1 (- this-onset (first omdt))))                                        window))          (setf duration-weights (mapcar #'third window))          (setf tpcs (mapcar #'fourth window))          ;cog is weighted average of preceding tpcs (see http:/rkb.home.cern.ch/rkb/AN16pp/node296.html)          (setf cog (/ (apply #'+ (mapcar #'* tpcs duration-weights recency-weights))                       (apply #'+ (mapcar #'* duration-weights recency-weights))))          )))    (format t "~a ~f~%" (first (first chord)) cog)    cog))(defun omd-list-to-chord-list (omd-list)  (let (number-of-omds        chord-list)    (setf number-of-omds (list-length omd-list))    (setf chord-list nil)    (do* ((i 1 (1+ i))          (current-chord (list (first omd-list))))         ((= i number-of-omds)          (setf chord-list                (append chord-list                        (list current-chord))))      (if (= (first (first current-chord))             (first (elt omd-list i)))        (setf current-chord              (append current-chord                      (list (elt omd-list i))))        (progn           (setf chord-list                 (append chord-list                        (list current-chord)))          (setf current-chord                (list (elt omd-list i))))))    chord-list))(defun tpr1a (sorted-omd-list)  (tpr1 sorted-omd-list        'sharp        'exponential        34        -24))(defun tpr1a-m (sorted-omd-list)  (tpr1  sorted-omd-list        'sharp        'exponential        34        -24        :meredith-tpr-1 t))(defun tpr1b (sorted-omd-list)  (tpr1 sorted-omd-list        'sharp        'exponential        34        -24        :window-size 100))(defun tpr1c (sorted-omd-list)  (tpr1 sorted-omd-list        'sharp        'exponential        34        -24        :window-size 1000))(defun tpr1c-m (sorted-omd-list)  (tpr1 sorted-omd-list        'sharp        'exponential        34        -24        :window-size 1000        :meredith-tpr-1 t))(defun tpr1d (sorted-omd-list)  (tpr1 sorted-omd-list        'flat        'exponential        '34        '-24))(defun opndv2omdlist (sorted-opndv)  (mapcar #'(lambda (opndv-datapoint)              (list (first opndv-datapoint)                    (+ 21 (elt (pn2p (elt opndv-datapoint 1)) 0))                    (third opndv-datapoint)))          sorted-opndv))(defun omdtlist2opndv (sorted-omd-list                       output-omdt-list                       sorted-input-opndv-dataset)  (let* ((output-pitch-names-p1 (mapcar #'tpcmidi2pn                                         (mapcar #'fourth output-omdt-list)                                        (mapcar #'second sorted-omd-list)))         (output-pitch-names-rd2 (mapcar #'(lambda (pitch-name)                                             (pn-tran pitch-name "rd2"))                                         output-pitch-names-p1))         (output-pitch-names-fd2 (mapcar #'(lambda (pitch-name)                                             (pn-tran pitch-name "fd2"))                                         output-pitch-names-p1))         (input-pitch-names (mapcar #'second sorted-input-opndv-dataset))         (error-number-list (list                              ;number of errors for p1                             (count nil (mapcar #'pn= input-pitch-names output-pitch-names-p1))                             ;number of errors for rd2                             (count nil (mapcar #'pn= input-pitch-names output-pitch-names-rd2))                             ;number of errors for fd2                             (count nil (mapcar #'pn= input-pitch-names output-pitch-names-fd2))                             ))         (pitch-names (elt                        (list output-pitch-names-p1                             output-pitch-names-rd2                             output-pitch-names-fd2)                       (position (apply #'min error-number-list)                                 error-number-list))))    (mapcar #'(lambda (opndv-datapoint pitch-name)                (append (list (first opndv-datapoint))                        (list pitch-name)                        (cddr opndv-datapoint)))            sorted-input-opndv-dataset            pitch-names)))#|Check following words first:(run-algorithm 'tpr1c	       'sort-by-onset	       'opndv2omdlist	       'omdtlist2opndv	       "opnd-m"	       "tpr1c"	       "hd:2007-04-23:opnd-m:"               "hd:2007-04-23:tpr1c:")ALGORITHM: TPR1COPNDV SORTER: SORT-BY-ONSETOPNDV-TO-INPUT CONVERTER: OPNDV2OMDLISTOUTPUT-TO-OPNDV CONVERTER: OMDTLIST2OPNDVINPUT FILE SUFFIX: opnd-mOUTPUT FILE SUFFIX: tpr1cINPUT DIRECTORY: hd:2007-04-23:opnd-m:OUTPUT DIRECTORY: hd:2007-04-23:tpr1c:hd:2007-04-23:opnd-m:haydndoversyms-10004m.opnd-m...(FUNCALL ALGORITHM ALGORITHM-INPUT) took 172,687 milliseconds (172.687 seconds) to run.Of that, 2,776 milliseconds (2.776 seconds) were spent in The Cooperative Multitasking Experience.11,976 milliseconds (11.976 seconds) was spent in GC. 1,047,158,752 bytes of memory allocated.(MAPCAR #'(LAMBDA (INPUT-OPNDV-FILE-NAME) (FORMAT T "~%~a..." INPUT-OPNDV-FILE-NAME) (FORCE-OUTPUT) (LET* ((INPUT-OPNDV-DATASET (WITH-OPEN-FILE (INPUT-OPNDV-FILE-STREAM INPUT-OPNDV-FILE-NAME :DIRECTION :INPUT) (READ INPUT-OPNDV-FILE-STREAM))) (SORTED-INPUT-OPNDV-DATASET (FUNCALL OPNDV-SORTER INPUT-OPNDV-DATASET)) (ALGORITHM-INPUT (FUNCALL OPNDV-TO-INPUT-CONVERTER SORTED-INPUT-OPNDV-DATASET)) (ALGORITHM-OUTPUT (TIME (FUNCALL ALGORITHM ALGORITHM-INPUT))) (OUTPUT-OPNDV-DATASET (FUNCALL OUTPUT-TO-OPNDV-CONVERTER ALGORITHM-INPUT ALGORITHM-OUTPUT SORTED-INPUT-OPNDV-DATASET)) (OUTPUT-OPNDV-FILE-NAME (CONCATENATE 'STRING OUTPUT-DIRECTORY (PATHNAME-NAME INPUT-OPNDV-FILE-NAME) "." OUTPUT-FILE-SUFFIX))) (WITH-OPEN-FILE (OUTPUT-OPNDV-FILE-STREAM OUTPUT-OPNDV-FILE-NAME :DIRECTION :OUTPUT :IF-EXISTS :RENAME-AND-DELETE) (PPRINT OUTPUT-OPNDV-DATASET OUTPUT-OPNDV-FILE-STREAM)))) INPUT-OPNDV-FILE-NAME-LIST) took 196,604 milliseconds (196.604 seconds) to run.Of that, 3,589 milliseconds (3.589 seconds) were spent in The Cooperative Multitasking Experience.11,976 milliseconds (11.976 seconds) was spent in GC. 1,063,617,184 bytes of memory allocated.(NIL)(run-algorithm 'tpr1a	       'sort-by-onset	       'opndv2omdlist	       'omdtlist2opndv	       "opnd-m"	       "tpr1a"	       "hd:2007-04-23:opnd-m:"               "hd:2007-04-23:tpr1a:")? ALGORITHM: TPR1AOPNDV SORTER: SORT-BY-ONSETOPNDV-TO-INPUT CONVERTER: OPNDV2OMDLISTOUTPUT-TO-OPNDV CONVERTER: OMDTLIST2OPNDVINPUT FILE SUFFIX: opnd-mOUTPUT FILE SUFFIX: tpr1aINPUT DIRECTORY: hd:2007-04-23:opnd-m:OUTPUT DIRECTORY: hd:2007-04-23:tpr1a:hd:2007-04-23:opnd-m:haydndoversyms-10004m.opnd-m...(FUNCALL ALGORITHM ALGORITHM-INPUT) took 1,699,396 milliseconds (1699.396 seconds) to run.Of that, 28,061 milliseconds (28.061 seconds) were spent in The Cooperative Multitasking Experience.140,648 milliseconds (140.648 seconds) was spent in GC. 11,140,017,560 bytes of memory allocated.(MAPCAR #'(LAMBDA (INPUT-OPNDV-FILE-NAME) (FORMAT T "~%~a..." INPUT-OPNDV-FILE-NAME) (FORCE-OUTPUT) (LET* ((INPUT-OPNDV-DATASET (WITH-OPEN-FILE (INPUT-OPNDV-FILE-STREAM INPUT-OPNDV-FILE-NAME :DIRECTION :INPUT) (READ INPUT-OPNDV-FILE-STREAM))) (SORTED-INPUT-OPNDV-DATASET (FUNCALL OPNDV-SORTER INPUT-OPNDV-DATASET)) (ALGORITHM-INPUT (FUNCALL OPNDV-TO-INPUT-CONVERTER SORTED-INPUT-OPNDV-DATASET)) (ALGORITHM-OUTPUT (TIME (FUNCALL ALGORITHM ALGORITHM-INPUT))) (OUTPUT-OPNDV-DATASET (FUNCALL OUTPUT-TO-OPNDV-CONVERTER ALGORITHM-INPUT ALGORITHM-OUTPUT SORTED-INPUT-OPNDV-DATASET)) (OUTPUT-OPNDV-FILE-NAME (CONCATENATE 'STRING OUTPUT-DIRECTORY (PATHNAME-NAME INPUT-OPNDV-FILE-NAME) "." OUTPUT-FILE-SUFFIX))) (WITH-OPEN-FILE (OUTPUT-OPNDV-FILE-STREAM OUTPUT-OPNDV-FILE-NAME :DIRECTION :OUTPUT :IF-EXISTS :RENAME-AND-DELETE) (PPRINT OUTPUT-OPNDV-DATASET OUTPUT-OPNDV-FILE-STREAM)))) INPUT-OPNDV-FILE-NAME-LIST) took 1,722,582 milliseconds (1722.582 seconds) to run.Of that, 28,412 milliseconds (28.412 seconds) were spent in The Cooperative Multitasking Experience.140,975 milliseconds (140.975 seconds) was spent in GC. 11,156,405,256 bytes of memory allocated.(NIL)? (equalp (open-read-close "hd:2007-04-23:tpr1a:haydndoversyms-10004m.tpr1a")        (open-read-close "hd:2007-04-23:haydndoversyms-10004m.tpr1a"))T(equalp (open-read-close "hd:2007-04-23:tpr1c:haydndoversyms-10004m.tpr1c")        (open-read-close "hd:2007-04-23:haydndoversyms-10004m.tpr1c"))T(elt (open-read-close "hd:2007-04-23:opnd-m:haydndoversyms-10004m.opnd-m")     1000)(position 2072 (open-read-close "hd:2007-04-23:opnd-m:haydndoversyms-10004m.opnd-m")          :key #'first)(subseq (open-read-close "hd:2007-04-23:opnd-m:haydndoversyms-10004m.opnd-m") 2995 3015)((2042 "En4" 12 15)  (2048 "Ds4" 4 16) (2054 "En4" 4 16) (2054 "Cs5" 24 15) (2060 "Fs4" 4 16) (2066 "Bn1" 24 19) (2066 "Bn2" 24 18) (2066 "An3" 12 17) (2066 "Ds4" 4 16) (2072 "En4" 4 16) (2078 "Ds3" 6 17) (2078 "Fs4" 4 16) (2078 "Bn4" 6 15) (2084 "Fs3" 6 17) (2084 "Ds4" 4 16) (2084 "An4" 6 15) (2090 "En2" 4 19) (2090 "En3" 4 18) (2090 "En4" 48 5) (2090 "Gs4" 6 3))(subseq (open-read-close "hd:2007-04-23:opnd-m:haydndoversyms-10004m.opnd-m") 0 20)((0 "Dn4" 2 15)  (2 "Gn2" 4 18) (2 "Bn3" 4 17) (2 "Dn4" 4 16) (4 "Gn4" 2 15) (6 "Bn4" 2 15) (8 "Dn5" 2 15) (10 "Dn5" 2 15) (12 "Dn5" 2 15) (14 "Dn3" 4 18) (14 "An3" 4 17) (14 "Cn4" 4 16) (14 "Fs4" 4 16) (14 "Dn5" 2 15) (16 "Cn5" 2 15) (18 "Bn4" 2 15) (20 "An4" 2 15) (24 "Fs3" 2 18) (24 "An3" 2 16) (24 "Dn4" 2 17))? (position 1994 (open-read-close "hd:2007-04-23:haydndoversyms-10004m.tpr1c") :key #'first)2984(subseq (open-read-close "hd:2007-04-23:haydndoversyms-10004m.tpr1c") 2984 3010)? |#