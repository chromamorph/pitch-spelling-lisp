;ps-dphil-cambouropoulos.lisp#|Implements algorithms described in cambouropoulos.tex which forms one chapter of ps-dphil.tex.|#(defun cam-03 (midi-list win-size)  (let (win-end win-pnc-list win-midi-list last-window first-window win-start        midi-list-size pnc-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start win-size) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (if first-window        (setf win-pnc-list nil              win-midi-list (subseq midi-list win-start win-end))        (setf win-pnc-list (subseq pnc-list win-start (+ win-start (/ win-size 3)))              win-midi-list (subseq midi-list (+ win-start (/ win-size 3)) win-end)))      (setf pnc-list (append pnc-list (spell-win-03 win-pnc-list win-midi-list                                                    first-window last-window)))      (setf first-window nil)      (setf win-start (+ win-start (/ win-size 3))))    pnc-list))(defun spell-win-03 (win-pnc-list win-midi-list first-window last-window)  (let (bit-vec spelling spelling-penalty best-penalty max-bit-vec-int        win-midi-list-size best-spelling bs-end)    (setf win-midi-list-size (list-length win-midi-list))    (setf max-bit-vec-int (1- (expt 2 win-midi-list-size)))    (setf best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i win-midi-list-size)            spelling (compute-spelling win-midi-list bit-vec 'flatside)            spelling-penalty (compute-spell-pen-03 (append win-pnc-list spelling)))      (if (or (null best-spelling) (< spelling-penalty best-penalty))        (setf best-spelling spelling              best-penalty spelling-penalty))      (setf spelling (compute-spelling win-midi-list bit-vec 'sharpside)            spelling-penalty (compute-spell-pen-03 (append win-pnc-list spelling)))      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty)))    ;Now return appropriate part of best-spelling.    (setf bs-end (/ win-midi-list-size 2))    (if first-window      (setf bs-end (* 2/3 win-midi-list-size)))    (if last-window      (setf bs-end win-midi-list-size))    (subseq best-spelling 0 bs-end)))(defun compute-spelling (win-midi-list bit-vec sharp-or-flat-side)  (let* ((pncs (if (eq sharp-or-flat-side 'sharpside)                 '(("Bs" "Cn") ("Cs" "Df") ("Css" "Dn") ("Ds" "Ef")                   ("Dss" "En") ("Es" "Fn") ("Fs" "Gf") ("Fss" "Gn")                   ("Gs" "Af") ("Gss" "An") ("As" "Bf") ("Ass" "Bn"))                 '(("Cn" "Dff") ("Cs" "Df") ("Dn" "Eff") ("Ds" "Ef")                   ("En" "Ff") ("Fn" "Gff") ("Fs" "Gf") ("Gn" "Aff")                   ("Gs" "Af") ("An" "Bff") ("As" "Bf") ("Bn" "Cf"))))         (spelling nil))    (dotimes (i (list-length win-midi-list) spelling)      (let* ((pitch-class (mod (elt win-midi-list i) 12)))        (setf spelling              (append spelling                      (list (elt (elt pncs pitch-class)                                 (elt bit-vec i)))))))))(defun compute-spell-pen-03 (spelling)  (let* ((n (list-length spelling))         (spelling-penalty 0))    (dotimes (i (1- n) spelling-penalty)      (do* ((j (1+ i) (1+ j))            pinc)           ((= j n))        (if (is-enharmonic-spelling (elt spelling i))          (setf spelling-penalty                (+ 2 spelling-penalty)))        (if (is-enharmonic-spelling (elt spelling j))          (setf spelling-penalty                (+ 2 spelling-penalty)))        (setf pinc (pnc2pinc (elt spelling i)                             (elt spelling j)))        (if (not (is-class-a-or-b-pinc pinc))          (if (is-class-c-pinc pinc)            (setf spelling-penalty                  (1+ spelling-penalty))            (setf spelling-penalty                  (+ 2 spelling-penalty))))))))(defun is-enharmonic-spelling (pnc)  (member pnc          '("Bs" "Dff" "Css" "Eff" "Dss" "Ff" "Es"            "Gff" "Fss" "Aff" "Gss" "Bff" "Ass" "Cf")          :test #'string=))(defun is-class-a-or-b-pinc (pinc)  (member pinc          '("p1" "rp4" "rp5" "rmi2" "rma7" "rma2"            "rmi7" "rmi3" "rma6" "rma3" "rmi6")          :test #'string=))(defun is-class-c-pinc (pinc)  (member pinc          '("ra2" "rd7" "rd3" "ra6" "rd4" "ra5" "ra4" "rd5")          :test #'string=))(defun cam-01 (midi-list win-size)  (let* (midi-list-size         ret-seg-start         pnc-list         win-start         pre-midi-set         win-end         win-midi-set         ret-seg-end         post-midi-set         pre-pnc-list         new-win-midi-set         ret-seg)    (setf midi-list-size (list-length midi-list)          ret-seg-start 0          pnc-list nil)    ;For debugging only:    ;(format t "~%MIDI list: ~a~%Window size: ~d~%" midi-list win-size)    (do ()        ((= (list-length pnc-list) midi-list-size))            ;Find win-start and pre-midi-set.      (setf win-start ret-seg-start            pre-midi-set nil)      (do ()          ((not (and (> win-start 0)                      (< (list-length pre-midi-set) (/ win-size 3)))))        (setf win-start (1- win-start))        (if (not (member (elt midi-list win-start)                         pre-midi-set))          (setf pre-midi-set                (cons (elt midi-list win-start)                      pre-midi-set))))            ;Now find win-end and win-midi-set.      (setf win-end ret-seg-start            win-midi-set pre-midi-set)      (do ()          ((not (and (< win-end midi-list-size)                     (<= (list-length win-midi-set)                         win-size))))        (if (not (member (elt midi-list win-end)                         win-midi-set))          (setf win-midi-set (append win-midi-set                                     (list (elt midi-list win-end)))))        (setf win-end (1+ win-end)))      (if (> (list-length win-midi-set) win-size)        (setf win-end (1- win-end)              win-midi-set (subseq win-midi-set 0 win-size)))            ;If win-midi-set is too small, extend pre-midi-set and win-start      ;backwards, remembering to update both pre-midi-set and win-midi-set.      (do ()          ((not (and (< (list-length win-midi-set) win-size)                     (> win-start 0))))        (setf win-start (1- win-start))        (if (not (member (elt midi-list win-start) pre-midi-set))          (setf pre-midi-set (cons (elt midi-list win-start)                                   pre-midi-set)))        (if (not (member (elt midi-list win-start) win-midi-set))          (setf win-midi-set (cons (elt midi-list win-start)                                   win-midi-set))))            ;Now find ret-seg-end and post-midi-set.      (setf ret-seg-end win-end            post-midi-set nil)      (if (/= win-end midi-list-size)        (do ()            ((not (and (> ret-seg-end 0)                       (< (list-length post-midi-set) (/ win-size 3)))))          (setf ret-seg-end (1- ret-seg-end))          (if (not (member (elt midi-list ret-seg-end)                           post-midi-set))            (setf post-midi-set (cons (elt midi-list ret-seg-end)                                      post-midi-set)))))            ;Now find pre-pnc-list.      (setf pre-pnc-list nil)      (do* ((pms nil)            (i (1- ret-seg-start) (1- i)))           ((= (list-length pre-pnc-list)               (list-length pre-midi-set)))        (if (not (member (elt midi-list i)                         pms))          (setf pre-pnc-list (cons (elt pnc-list i)                                  pre-pnc-list)                pms (cons (elt midi-list i)                          pms))))            ;Now remove pre-midi-set from win-midi-set to get new-win-midi-set      (setf new-win-midi-set nil)      (dotimes (i (list-length win-midi-set))        (if (not (member (elt win-midi-set i)                         pre-midi-set))          (setf new-win-midi-set                (append new-win-midi-set                        (list (elt win-midi-set i))))))            ;Now append best spelling for this retained segment to pnc-list      (setf ret-seg (subseq midi-list ret-seg-start ret-seg-end))      (setf pnc-list (append pnc-list                             (spell-win-01 pre-pnc-list                                           pre-midi-set                                           new-win-midi-set                                           ret-seg)))            ;For debugging only:      #|(format t "~%Window start: ~dWindow end: ~dRetained segment start: ~dRetained segment end: ~dPrefix MIDI set: ~aPrefix PNC set: ~aWindow MIDI set: ~aPNC List so far: ~aSuffix MIDI set: ~aNew window MIDI set: ~aRetained segment: ~a~%"              win-start              win-end              ret-seg-start              ret-seg-end              pre-midi-set              pre-pnc-list              win-midi-set              pnc-list              post-midi-set              new-win-midi-set              ret-seg              )|#      ;Finally, set ret-seg-start to equal start position of next retained      ;segment.      (setf ret-seg-start ret-seg-end)      )    pnc-list))(defun spell-win-01 (pre-pnc-list                     pre-midi-set                     new-win-midi-set                     ret-seg)  (let (new-win-midi-set-size        max-bit-vec-int        bit-vec        best-spelling        best-penalty        spelling        spelling-penalty        spelt-ret-seg        pnc)    (setf new-win-midi-set-size (list-length new-win-midi-set)          max-bit-vec-int (1- (expt 2 new-win-midi-set-size))          best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i new-win-midi-set-size)            spelling (compute-spelling new-win-midi-set bit-vec 'flatside)            spelling-penalty (compute-spell-pen-01 (append pre-pnc-list spelling)))      (if (or (null best-spelling) (< spelling-penalty best-penalty))        (setf best-spelling spelling              best-penalty spelling-penalty))      (setf spelling (compute-spelling new-win-midi-set bit-vec 'sharpside)            spelling-penalty (compute-spell-pen-01 (append pre-pnc-list spelling)))      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty)))    ;Now spell pitches in retained segment and return it.    (setf spelt-ret-seg nil)    (dotimes (i (list-length ret-seg))      (setf pnc (elt (append pre-pnc-list best-spelling)                     (position (elt ret-seg i)                               (append pre-midi-set                                       new-win-midi-set)))            spelt-ret-seg (append spelt-ret-seg (list pnc))))    spelt-ret-seg))(defun compute-spell-pen-01 (spelling)  (let (n spelling-penalty pinc)    (setf n (list-length spelling))    (setf spelling-penalty 0)    (dotimes (i (1- n))      (do ((j (1+ i) (1+ j)))          ((= j n))        (if (is-enharmonic-spelling (elt spelling i))          (setf spelling-penalty (+ spelling-penalty 4)))        (if (is-enharmonic-spelling (elt spelling j))          (setf spelling-penalty (+ spelling-penalty 4)))        (setf pinc (pnc2pinc (elt spelling i)                             (elt spelling j)))        (if (not (is-class-a-or-b-pinc pinc))          (if (is-class-c-pinc pinc)            (setf spelling-penalty (1+ spelling-penalty))            (setf spelling-penalty (+ spelling-penalty 3))))))    spelling-penalty))(defun cam-9698 (midi-list win-size)  (let (pnc-list midi-list-size win-start         first-window blended-mod-table        last-window win-midi-list win-end        harm-min-scale asc-mel-min-scale        desc-mel-min-scale nat-min-scale        major-scale)    (setf midi-list-size (list-length midi-list))        ;;;;;;;    ;(FORMAT T "~%MIDI-LIST-SIZE = ~D" MIDI-LIST-SIZE)    ;;;;;;;        (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (setf major-scale (list 2 2 1 2 2 2 1))    (setf nat-min-scale (list 2 1 2 2 1 2 2))    (setf desc-mel-min-scale (list 2 1 2 2 1 2 2))    (setf asc-mel-min-scale (list 2 1 2 2 2 2 1))    (setf harm-min-scale (list 2 1 2 2 1 3 1))    (setf blended-mod-table (compute-blended-mod-table .25                                                       (list (list major-scale 4)		;major                                                             (list nat-min-scale 1)		;natural minor                                                             (list desc-mel-min-scale 1)	;descending melodic minor                                                             (list asc-mel-min-scale 1)		;ascending melodic minor                                                             (list harm-min-scale 2)		;harmonic minor                                                             )))        ;;;;;;;    ;(FORMAT T "~%COMPUTED BLENDED MOD TABLE.")    ;;;;;;;        (do ()        ((= (list-length pnc-list) midi-list-size))            ;;;;;;;      ;(FORMAT T "~%|PNC-LIST| = ~D" (LIST-LENGTH PNC-LIST))      ;;;;;;;            (setf win-end (min (+ win-start win-size) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (setf win-midi-list (subseq midi-list win-start win-end))      (setf pnc-list (append pnc-list (spell-win-9698 win-midi-list first-window                                                      last-window blended-mod-table win-size)))      (setf first-window nil)      (setf win-start (+ win-start (/ win-size 3))))    pnc-list))(defun compute-mod-table (scale)  (let (pci ints-for-this-nci n-cam within-scale-ints m-cam f mod-table-element        mod-table-row modality-table)    (setf m-cam (list-length scale))    (setf n-cam (apply #'+ scale))    (setf within-scale-ints nil)    (dotimes (nci m-cam)      (setf ints-for-this-nci nil)      (dotimes (i m-cam)        (setf pci 0)        (do* ((j i (1+ j)))             ((= j (+ i nci)))          (setf pci (+ pci (elt scale (mod j m-cam)))))        (setf ints-for-this-nci (append ints-for-this-nci (list (list nci pci)))))      (setf within-scale-ints (append within-scale-ints ints-for-this-nci)))    (setf modality-table nil)    (dotimes (nci m-cam)      (setf mod-table-row nil)      (dotimes (pci n-cam)        (setf f (/ (count (list nci pci)                          within-scale-ints                          :test #'equalp)                   m-cam))        (setf mod-table-element (list nci f pci))        (setf mod-table-row (append mod-table-row (list mod-table-element))))      (setf modality-table (append modality-table (list mod-table-row))))    modality-table))(defun compute-blended-mod-table (x scale-wt-pair-list)  (let (n m-cam n-cam mod-table-list sum-of-weights f mod-class blended-mod-table)    (setf m-cam (list-length (elt (elt scale-wt-pair-list 0) 0)))    (setf n-cam (apply #'+ (elt (elt scale-wt-pair-list 0) 0)))    (setf n (list-length scale-wt-pair-list))    (setf sum-of-weights (apply #'+ (mapcar #'second scale-wt-pair-list)))    (setf mod-table-list (mapcar #'compute-mod-table                                 (mapcar #'first scale-wt-pair-list)))    (dotimes (i n)      (dotimes (nci m-cam)        (dotimes (pci n-cam)          (setf (elt (elt (elt (elt mod-table-list i) nci) pci) 1)                (* (elt (elt scale-wt-pair-list i) 1)                   (elt (elt (elt (elt mod-table-list i) nci) pci) 1))))))    (setf blended-mod-table (elt mod-table-list 0))    (dotimes (nci m-cam)      (dotimes (pci n-cam)        (setf (elt (elt (elt blended-mod-table nci) pci) 1)              (/ (apply #'+ (mapcar #'(lambda (mod-table)                                        (elt (elt (elt mod-table nci) pci) 1))                                    mod-table-list))                 sum-of-weights))        (setf f (elt (elt (elt blended-mod-table nci) pci) 1))        (if (>= f (- 1 x))          (setf mod-class 'a)          (if (> f x)            (setf mod-class 'b)            (if (> f 0)              (setf mod-class 'c)              (setf mod-class 'd))))        (setf (elt (elt blended-mod-table nci) pci)              (append (elt (elt blended-mod-table nci) pci)                      (list mod-class)))))    blended-mod-table))(defun spell-win-9698 (win-midi-list first-window last-window blended-mod-table win-size)  (DECLARE (OPTIMIZE SPEED))  (let (pncs        n        pc-list        pnc-index-list        best-spelling        spelling        best-penalty        number-of-spellings        i        spelling-penalty        bs-start        bs-end        )    (setf pncs '(("Bs" "Cn" "Dff") ("Cs" "Df") ("Css" "Dn" "Eff") ("Ds" "Ef")                 ("Dss" "En" "Ff") ("Es" "Fn" "Gff") ("Fs" "Gf") ("Fss" "Gn" "Aff")                 ("Gs" "Af") ("Gss" "An" "Bff") ("As" "Bf") ("Ass" "Bn" "Cf")))    (setf n (list-length win-midi-list))    (setf pc-list (mapcar #'(lambda (midi-note-number)                              (mod midi-note-number 12))                          win-midi-list))    (setf pnc-index-list (mapcar #'(lambda (x) x 0) win-midi-list))    (setf best-spelling (mapcar #'(lambda (pitch-class)                                    (elt (elt pncs pitch-class) 0))                                pc-list))    (setf best-penalty (compute-spell-pen-9698 best-spelling blended-mod-table))    (setf number-of-spellings  (apply #'* (mapcar #'(lambda (pc)                                                      (list-length (elt pncs pc)))                                                  pc-list)))        ;;;;;;;    ;(FORMAT T "~%NUMBER OF SPELLINGS = ~D~%" NUMBER-OF-SPELLINGS)    ;;;;;;;        (do ((s 1 (1+ s)))        ((= s number-of-spellings)                  ;;;;;;;         ;(FORMAT T "~%~D" S)         ;;;;;;;                  )            ;;;;;;;      ;(IF (ZEROP (MOD S 100)) (FORMAT T "~%~D" S))      ;;;;;;;            ;Increment pnc-index-list.      (setf i 0)      (setf (elt pnc-index-list i)            (mod (1+ (elt pnc-index-list i))                 (list-length (elt pncs (elt pc-list i)))))      (do ()          ((not (and (= 0 (elt pnc-index-list i))                     (< i (1- n)))))        (setf i (1+ i))        (setf (elt pnc-index-list i)              (mod (1+ (elt pnc-index-list i))                   (list-length (elt pncs (elt pc-list i))))))            ;Find new spelling and spelling-penalty.      (setf spelling (mapcar #'(lambda (pc pnc-index)                                 (elt (elt pncs pc) pnc-index))                             pc-list                             pnc-index-list))      (setf spelling-penalty (compute-spell-pen-9698 spelling blended-mod-table))            ;Decide whether best-spelling should become equal to spelling.      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty)        (if (and (= spelling-penalty best-penalty)                 (tie-breaker spelling best-spelling blended-mod-table))          (setf best-spelling spelling                best-penalty spelling-penalty))))        ;Now return appropriate part of best-spelling.    (setf bs-start (/ win-size 3))    (setf bs-end (* 2 bs-start))    (if first-window      (setf bs-start 0))    (if last-window      (setf bs-end n))    (subseq best-spelling bs-start bs-end)))(defun compute-spell-pen-9698 (spelling blended-mod-table)  (let (enh1        enh2        pinc        mod-class        spelling-penalty)    (setf spelling-penalty 0)    (dotimes (i (1- (list-length spelling)))      (setf enh1 (is-enharmonic-spelling (elt spelling i)))      (setf enh2 (is-enharmonic-spelling (elt spelling (1+ i))))      (if (or (and enh1 (not enh2))              (and (not enh1) enh2))        (setf spelling-penalty (+ spelling-penalty 2)))      (if (and enh1 enh2)        (setf spelling-penalty (+ 6 spelling-penalty)))      (setf pinc (pnc2pinc (elt spelling i) (elt spelling (1+ i))))      (setf mod-class (compute-mod-class pinc blended-mod-table))      (if (eq mod-class 'c)        (setf spelling-penalty (1+ spelling-penalty)))      (if (eq mod-class 'd)        (setf spelling-penalty (+ 4 spelling-penalty))))    spelling-penalty))(defun compute-mod-class (pinc blended-mod-table )  (let (ncipci nci pci)    (setf ncipci (pinc2ncipci pinc))    (setf nci (elt ncipci 0))    (setf pci (elt ncipci 1))    (elt (elt (elt blended-mod-table nci) pci) 3)))(defun pinc2ncipci (pinc)  (let (pitch-int)    (setf pitch-int (pin2pi pinc))    (list (mod (elt pitch-int 1) 7)          (mod (elt pitch-int 0) 12))))(defun tie-breaker (s1 s2 blended-mod-table)  (let (n m1 m2 p1 p2 h1 h2)    (setf n (list-length s1))    (setf m1 nil)    (dotimes (i (1- n))      (setf m1 (append m1                       (list (compute-mod-class (pnc2pinc (elt s1 i)                                                          (elt s1 (1+ i)))                                                blended-mod-table)))))    (setf m2 nil)    (dotimes (i (1- n))      (setf m2 (append m2                       (list (compute-mod-class (pnc2pinc (elt s2 i)                                                          (elt s2 (1+ i)))                                                blended-mod-table)))))    (setf h1 nil)    (setf h2 nil)    (dotimes (i (- n 2))      (if (and (not (eq (elt m1 i) (elt m1 (1+ i))))               (member (elt m1 i) '(a b c))               (member (elt m1 (1+ i))  '(c d)))        (setf h1 (append h1 (list i))))      (if (and (not (eq (elt m2 i) (elt m2 (1+ i))))               (member (elt m2 i) '(a b c))               (member (elt m2 (1+ i)) '(c d)))        (setf h2 (append h2 (list i)))))    (cond ((< (list-length h1) (list-length h2))           t)          ((> (list-length h1) (list-length h2))           nil)          (t (setf p1 (apply #'+ h1))             (setf p2 (apply #'+ h2))             (< p1 p2)))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;VERSIONS OF THE ALGORITHM TESTED(defun cam-03-a (midi-list)  (cam-03 midi-list 9))(defun cam-03-d (midi-list)  (cam-03 midi-list 12))(defun cam-01-d (midi-list)  (let* (midi-list-size         ret-seg-start         pnc-list         win-start         pre-midi-set         win-end         win-midi-set         ret-seg-end         post-midi-set         pre-pnc-list         new-win-midi-set         ret-seg)    (setf midi-list-size (list-length midi-list)          ret-seg-start 0          pnc-list nil)        ;;;;;    ;(format t "~%midi-list =")    ;(pprint midi-list)    ;(format t "~%midi-list-size = ~d~%" midi-list-size)    ;;;;;        (do ()        ((= (list-length pnc-list) midi-list-size))            ;Find win-start and pre-midi-set.      (setf win-start ret-seg-start            pre-midi-set nil)      (do ()          ((not (and (> win-start 0)                      (< (list-length pre-midi-set) 3))))        (setf win-start (1- win-start))        (if (not (member (elt midi-list win-start)                         pre-midi-set))          (setf pre-midi-set                (cons (elt midi-list win-start)                      pre-midi-set))))            ;;;;;      ;(format t "~%STARTING WINDOW~%")      ;(format t "win-start = ~d~%pre-midi-set = ~a~%" win-start pre-midi-set)      ;;;;;      ;Now find win-end and win-midi-set.      (setf win-end ret-seg-start            win-midi-set pre-midi-set)      (do ()          ((not (and (< win-end midi-list-size)                     (<= (list-length win-midi-set)                         9))))        (if (not (member (elt midi-list win-end)                         win-midi-set))          (setf win-midi-set (append win-midi-set                                     (list (elt midi-list win-end)))))        (setf win-end (1+ win-end)))      (if (> (list-length win-midi-set) 9)        (setf win-end (1- win-end)              win-midi-set (subseq win-midi-set 0 9)))            ;;;;;      ;(format t "win-end = ~d~%win-midi-set = ~a~%" win-end win-midi-set)      ;;;;;      ;If win-midi-set is too small, extend pre-midi-set and win-start      ;backwards, remembering to update both pre-midi-set and win-midi-set.      (do ()          ((not (and (< (list-length win-midi-set) 9)                     (> win-start 0))))        (setf win-start (1- win-start))        (if (not (member (elt midi-list win-start) pre-midi-set))          (setf pre-midi-set (cons (elt midi-list win-start)                                   pre-midi-set)))        (if (not (member (elt midi-list win-start) win-midi-set))          (setf win-midi-set (cons (elt midi-list win-start)                                   win-midi-set))))            ;;;;;      ;(format t "After extending win-start backwards:~%win-start = ~d~%pre-midi-set = ~a~%win-midi-set = ~a~%"      ;        win-start pre-midi-set win-midi-set)      ;;;;;      ;Now find ret-seg-end and post-midi-set.      (setf ret-seg-end win-end            post-midi-set nil)      (if (/= win-end midi-list-size)        (do ()            ((not (and (> ret-seg-end 0)                       (< (list-length post-midi-set) 3))))          (setf ret-seg-end (1- ret-seg-end))          (if (not (member (elt midi-list ret-seg-end)                           post-midi-set))            (setf post-midi-set (cons (elt midi-list ret-seg-end)                                      post-midi-set)))))            ;;;;;      ;(format t "ret-seg-end = ~d~%post-midi-set = ~a~%"      ;        ret-seg-end post-midi-set)      ;;;;;      ;Now find pre-pnc-list.      (setf pre-pnc-list nil)      (do* ((pms nil)            (i (1- ret-seg-start) (1- i)))           ((= (list-length pre-pnc-list)               (list-length pre-midi-set)))        (if (not (member (elt midi-list i)                         pms))          (setf pre-pnc-list (cons (elt pnc-list i)                                  pre-pnc-list)                pms (cons (elt midi-list i)                          pms))))            ;;;;;      ;(format t "pre-pnc-list = ~a~%"      ;        pre-pnc-list)      ;;;;;      ;Now remove pre-midi-set from win-midi-set to get new-win-midi-set      (setf new-win-midi-set nil)      (dotimes (i (list-length win-midi-set))        (if (not (member (elt win-midi-set i)                         pre-midi-set))          (setf new-win-midi-set                (append new-win-midi-set                        (list (elt win-midi-set i))))))            ;;;;;      ;(format t "new-win-midi-set = ~a" new-win-midi-set)      ;;;;;      ;Now append best spelling for this retained segment to pnc-list      (setf ret-seg (subseq midi-list ret-seg-start ret-seg-end))      ;;;;;      ;(format t "~%ret-seg = ~a~%" ret-seg)      ;(format t "Now calling spell-win-01-d...~%")      ;;;;;      (setf pnc-list (append pnc-list                             (spell-win-01-d pre-pnc-list                                             pre-midi-set                                             new-win-midi-set                                             ret-seg)))            ;;;;;      ;(format t "...spell-win-01-d completed.~%")      ;(format t "pnc-list =~%")      ;(pprint pnc-list)      ;;;;;      ;Finally, set ret-seg-start to equal start position of next retained      ;segment.      (setf ret-seg-start ret-seg-end)      ;;;;;      ;(format t "~%ret-seg-start = ~d~%ret-seg-end = ~d~%~%" ret-seg-start ret-seg-end)      ;(format t "~%FINISHED WINDOW~%")      ;;;;;      )        ;;;;;    ;(format t "Final pnc-list = ~%")    ;(pprint pnc-list)    ;(format t "----------------------------~%~%")    ;;;;;    pnc-list))(defun spell-win-01-d (pre-pnc-list                       pre-midi-set                       new-win-midi-set                       ret-seg)  (let (new-win-midi-set-size        max-bit-vec-int        bit-vec        best-spelling        best-penalty        spelling        spelling-penalty        spelt-ret-seg        pnc)    (setf new-win-midi-set-size (list-length new-win-midi-set)          max-bit-vec-int (1- (expt 2 new-win-midi-set-size))          best-spelling nil)        ;;;;;    ;(format t "~%STARTING spell-win-01-d~%")    ;(format t "new-win-midi-set-size = ~d~%max-bit-vec-int = ~d~%"    ;        new-win-midi-set-size max-bit-vec-int)    ;;;;;        (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i new-win-midi-set-size)            spelling (compute-spelling new-win-midi-set bit-vec 'flatside)            spelling-penalty (compute-spell-pen-03 (append pre-pnc-list spelling)))            ;;;;;      ;(format t "~%i = ~d~%bit-vec = ~a~% flat-side spelling = ~a~% spelling-penalty = ~d~%"      ;        i bit-vec spelling spelling-penalty)      ;;;;;            (if (or (null best-spelling) (< spelling-penalty best-penalty))        (setf best-spelling spelling              best-penalty spelling-penalty))            ;;;;;      ;(format t "~%best-spelling = ~a~%best-penalty = ~d~%"      ;        best-spelling best-penalty)      ;;;;;      (setf spelling (compute-spelling new-win-midi-set bit-vec 'sharpside)            spelling-penalty (compute-spell-pen-03 (append pre-pnc-list spelling)))      ;;;;;      ;(format t "~%sharp-side spelling = ~a~%spelling-penalty = ~d~%"      ;        spelling spelling-penalty)      ;;;;;      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty))            ;;;;;      ;(format t "~%best-spelling = ~a~%best-penalty = ~d~%"      ;        best-spelling best-penalty)      ;;;;;      )        ;Now spell pitches in retained segment and return it.    (setf spelt-ret-seg nil)    (dotimes (i (list-length ret-seg))      (setf pnc (elt (append pre-pnc-list best-spelling)                     (position (elt ret-seg i)                               (append pre-midi-set                                       new-win-midi-set)))            spelt-ret-seg (append spelt-ret-seg (list pnc))))        ;;;;;    ;(format t "~%spelt-ret-seg = ~a~%" spelt-ret-seg)    ;;;;;        spelt-ret-seg))(defun cam-03-e (midi-list)  (cam-03-a midi-list))(defun cam-03-b (midi-list)  (let (win-end win-pnc-list win-midi-list last-window first-window win-start                midi-list-size pnc-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start 9) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (if first-window        (setf win-pnc-list nil              win-midi-list (subseq midi-list win-start win-end))        (setf win-pnc-list (subseq pnc-list win-start (+ win-start 3))              win-midi-list (subseq midi-list (+ win-start 3) win-end)))      (setf pnc-list (append pnc-list (spell-win-03-b win-pnc-list win-midi-list                                                      first-window last-window)))      (setf first-window nil)      (setf win-start (+ win-start 3)))    pnc-list))(defun spell-win-03-b (win-pnc-list win-midi-list first-window last-window)  (let (bit-vec spelling spelling-penalty best-penalty max-bit-vec-int        win-midi-list-size best-spelling bs-end)    (setf win-midi-list-size (list-length win-midi-list))    (setf max-bit-vec-int (1- (expt 2 win-midi-list-size)))    (setf best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i win-midi-list-size)            spelling (compute-spelling win-midi-list bit-vec 'flatside)            spelling-penalty (compute-spell-pen-03-b (append win-pnc-list spelling)))      (if (or (null best-spelling) (< spelling-penalty best-penalty))        (setf best-spelling spelling              best-penalty spelling-penalty))      (setf spelling (compute-spelling win-midi-list bit-vec 'sharpside)            spelling-penalty (compute-spell-pen-03-b (append win-pnc-list spelling)))      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty)))    ;Now return appropriate part of best-spelling.    (setf bs-end (/ win-midi-list-size 2))    (if first-window      (setf bs-end (* 2/3 win-midi-list-size)))    (if last-window      (setf bs-end win-midi-list-size))    (subseq best-spelling 0 bs-end)))(defun compute-spell-pen-03-b (spelling)  (let (pinc pincs lof-penalties p iop n spelling-penalty)    (setf pincs '("p1" "rp5" "rp4" "rma2" "rmi7"                  "rma6" "rmi3" "rma3" "rmi6" "rma7"                  "rmi2" "ra4" "rd5" "a1" "d1"                  "ra5" "rd4" "ra2" "rd7" "ra6"                  "rd3" "ra3" "rd6" "ra7" "rd2"))    (setf lof-penalties '(0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12))    (setf n (list-length spelling))    (setf spelling-penalty 0)    (dotimes (i (1- n))      (do ((j (1+ i) (1+ j)))          ((= j n))        (if (is-enharmonic-spelling (elt spelling i))          (setf spelling-penalty (+ spelling-penalty 13)))        (if (is-enharmonic-spelling (elt spelling j))          (setf spelling-penalty (+ spelling-penalty 13)))        (setf pinc (pnc2pinc (elt spelling i) (elt spelling j)))        (setf p (position pinc pincs                          :test #'string=))        (if p          (setf iop (elt lof-penalties p))          (setf iop 13))        (setf spelling-penalty (+ spelling-penalty iop))))    spelling-penalty))(defun cam-03-f (midi-list)  (let (major-scale nat-min-scale desc-mel-min-scale asc-mel-min-scale harm-min-scale        win-end win-pnc-list win-midi-list last-window blended-mod-table first-window        win-start midi-list-size pnc-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (setf major-scale (list 2 2 1 2 2 2 1))    (setf nat-min-scale (list 2 1 2 2 1 2 2))    (setf desc-mel-min-scale (list 2 1 2 2 1 2 2))    (setf asc-mel-min-scale (list 2 1 2 2 2 2 1))    (setf harm-min-scale (list 2 1 2 2 1 3 1))    (setf blended-mod-table (compute-blended-mod-table .25                                                       (list (list major-scale 4)		;major                                                             (list nat-min-scale 1)		;natural minor                                                             (list desc-mel-min-scale 1)	;descending melodic minor                                                             (list asc-mel-min-scale 1)		;ascending melodic minor                                                             (list harm-min-scale 2)		;harmonic minor                                                             )))    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start 9) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (if first-window        (setf win-pnc-list nil              win-midi-list (subseq midi-list win-start win-end))        (setf win-pnc-list (subseq pnc-list win-start (+ win-start 3))              win-midi-list (subseq midi-list (+ win-start 3) win-end)))      (setf pnc-list (append pnc-list (spell-win-03-f win-pnc-list win-midi-list                                                      first-window last-window                                                      blended-mod-table)))      (setf first-window nil)      (setf win-start (+ win-start 3)))    pnc-list))(defun spell-win-03-f (win-pnc-list win-midi-list first-window last-window blended-mod-table)  (let (bit-vec spelling spelling-penalty best-penalty max-bit-vec-int        win-midi-list-size best-spelling bs-end)    (setf win-midi-list-size (list-length win-midi-list))    (setf max-bit-vec-int (1- (expt 2 win-midi-list-size)))    (setf best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i win-midi-list-size)            spelling (compute-spelling win-midi-list bit-vec 'flatside)            spelling-penalty (compute-spell-pen-03-f (append win-pnc-list spelling)                                                      blended-mod-table))      (if (or (null best-spelling) (< spelling-penalty best-penalty))        (setf best-spelling spelling              best-penalty spelling-penalty))      (setf spelling (compute-spelling win-midi-list bit-vec 'sharpside)            spelling-penalty (compute-spell-pen-03-f (append win-pnc-list spelling)                                                     blended-mod-table))      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty)))    ;Now return appropriate part of best-spelling.    (setf bs-end (/ win-midi-list-size 2))    (if first-window      (setf bs-end (* 2/3 win-midi-list-size)))    (if last-window      (setf bs-end win-midi-list-size))    (subseq best-spelling 0 bs-end)))(defun compute-spell-pen-03-f (spelling blended-mod-table)  (let (pinc mod-class n spelling-penalty)    (setf n (list-length spelling))    (setf spelling-penalty 0)    (dotimes (i (1- n))      (do ((j (1+ i) (1+ j)))          ((= j n))        (if (is-enharmonic-spelling (elt spelling i))          (setf spelling-penalty (+ spelling-penalty 2)))        (if (is-enharmonic-spelling (elt spelling j))          (setf spelling-penalty (+ spelling-penalty 2)))        (setf pinc (pnc2pinc (elt spelling i) (elt spelling j)))        (setf mod-class (compute-mod-class pinc blended-mod-table))        (if (eq mod-class 'c)          (setf spelling-penalty (+ spelling-penalty 1)))        (if (eq mod-class 'd)          (setf spelling-penalty (+ spelling-penalty 2)))))    spelling-penalty))(defun cam-03-g (midi-list)  (let (win-end win-pnc-list win-midi-list last-window first-window win-start        midi-list-size pnc-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start 9) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (if first-window        (setf win-pnc-list nil              win-midi-list (subseq midi-list win-start win-end))        (setf win-pnc-list (subseq pnc-list win-start (+ win-start 3))              win-midi-list (subseq midi-list (+ win-start 3) win-end)))      (setf pnc-list (append pnc-list (spell-win-03-g win-pnc-list win-midi-list                                                      first-window last-window)))      (setf first-window nil)      (setf win-start (+ win-start 3)))    pnc-list))(defun spell-win-03-g (win-pnc-list win-midi-list first-window last-window)  (let (bit-vec spelling spelling-penalty best-penalty max-bit-vec-int                win-midi-list-size best-spelling bs-end)    (setf win-midi-list-size (list-length win-midi-list))    (setf max-bit-vec-int (1- (expt 2 win-midi-list-size)))    (setf best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i win-midi-list-size)            spelling (compute-spelling win-midi-list bit-vec 'flatside)            spelling-penalty (compute-spell-pen-03-g (append win-pnc-list spelling)))      (if (or (null best-spelling) (< spelling-penalty best-penalty))        (setf best-spelling spelling              best-penalty spelling-penalty))      (setf spelling (compute-spelling win-midi-list bit-vec 'sharpside)            spelling-penalty (compute-spell-pen-03-g (append win-pnc-list spelling)))      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty)))    ;Now return appropriate part of best-spelling.    (setf bs-end (/ win-midi-list-size 2))    (if first-window      (setf bs-end (* 2/3 win-midi-list-size)))    (if last-window      (setf bs-end win-midi-list-size))    (subseq best-spelling 0 bs-end)))(defun compute-spell-pen-03-g (spelling)  (let* ((n (list-length spelling))         (spelling-penalty 0))    (dotimes (i (1- n) spelling-penalty)      (do* ((j (1+ i) (1+ j))            pinc)           ((= j n))        (if (is-enharmonic-spelling (elt spelling i))          (setf spelling-penalty                (+ 2 spelling-penalty)))        (if (is-enharmonic-spelling (elt spelling j))          (setf spelling-penalty                (+ 2 spelling-penalty)))        (setf pinc (pnc2pinc (elt spelling i)                             (elt spelling j)))        (if (not (is-class-a-or-b-pinc pinc))          (if (is-class-c-pinc pinc)            (setf spelling-penalty                  (1+ spelling-penalty))            (setf spelling-penalty                  (+ 4 spelling-penalty))))))))(defun cam-03-c (midi-list)  (let (win-end win-pnc-list win-midi-list last-window first-window win-start        midi-list-size pnc-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start 9) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (if first-window        (setf win-pnc-list nil              win-midi-list (subseq midi-list win-start win-end))        (setf win-pnc-list (subseq pnc-list win-start (+ win-start 3))              win-midi-list (subseq midi-list (+ win-start 3) win-end)))      (setf pnc-list (append pnc-list (spell-win-03-c win-pnc-list win-midi-list                                                    first-window last-window)))      (setf first-window nil)      (setf win-start (+ win-start 3)))    pnc-list))(defun spell-win-03-c (win-pnc-list win-midi-list first-window last-window)  (let (bit-vec spelling spelling-penalty best-penalty max-bit-vec-int        win-midi-list-size best-spelling bs-end)    (setf win-midi-list-size (list-length win-midi-list))    (setf max-bit-vec-int (1- (expt 2 win-midi-list-size)))    (setf best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i win-midi-list-size)            spelling (compute-spelling win-midi-list bit-vec 'flatside)            spelling-penalty (compute-spell-pen-03-c (append win-pnc-list spelling)))      (if (or (null best-spelling) (< spelling-penalty best-penalty))        (setf best-spelling spelling              best-penalty spelling-penalty))      (setf spelling (compute-spelling win-midi-list bit-vec 'sharpside)            spelling-penalty (compute-spell-pen-03-c (append win-pnc-list spelling)))      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty)))    ;Now return appropriate part of best-spelling.    (setf bs-end (/ win-midi-list-size 2))    (if first-window      (setf bs-end (* 2/3 win-midi-list-size)))    (if last-window      (setf bs-end win-midi-list-size))    (subseq best-spelling 0 bs-end)))(defun compute-spell-pen-03-c (spelling)  (let (pinc pincs lof-penalties p iop n spelling-penalty)    (setf pincs '("p1" "rp5" "rp4" "rma2" "rmi7"                  "rma6" "rmi3" "rma3" "rmi6" "rma7"                  "rmi2" "ra4" "rd5"                   "ra5" "rd4" "ra2" "rd7" "ra6"                  "rd3" "ra3" "rd6" "ra7" "rd2"                  "a1" "d1"))    (setf lof-penalties '(0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12))    (setf n (list-length spelling))    (setf spelling-penalty 0)    (dotimes (i (1- n))      (do ((j (1+ i) (1+ j)))          ((= j n))        (if (is-enharmonic-spelling (elt spelling i))          (setf spelling-penalty (+ spelling-penalty 13)))        (if (is-enharmonic-spelling (elt spelling j))          (setf spelling-penalty (+ spelling-penalty 13)))        (setf pinc (pnc2pinc (elt spelling i) (elt spelling j)))        (setf p (position pinc pincs                          :test #'string=))        (if p          (setf iop (elt lof-penalties p))          (setf iop 13))        (setf spelling-penalty (+ spelling-penalty iop))))    spelling-penalty))(defun cam-03-h (midi-list)  (let (win-end win-pnc-list win-midi-list last-window first-window win-start        midi-list-size pnc-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start 9) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (if first-window        (setf win-pnc-list nil              win-midi-list (subseq midi-list win-start win-end))        (setf win-pnc-list (subseq pnc-list win-start (+ win-start 3))              win-midi-list (subseq midi-list (+ win-start 3) win-end)))      (setf pnc-list (append pnc-list (spell-win-03-h win-pnc-list win-midi-list                                                    first-window last-window)))      (setf first-window nil)      (setf win-start (+ win-start 3)))    pnc-list))(defun spell-win-03-h (win-pnc-list win-midi-list first-window last-window)  (let (bit-vec spelling spelling-penalty best-penalty max-bit-vec-int        win-midi-list-size best-spelling bs-end)    (setf win-midi-list-size (list-length win-midi-list))    (setf max-bit-vec-int (1- (expt 2 win-midi-list-size)))    (setf best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i win-midi-list-size)            spelling (compute-spelling win-midi-list bit-vec 'flatside)            spelling-penalty (compute-spell-pen-03-h (append win-pnc-list spelling)))      (if (or (null best-spelling) (< spelling-penalty best-penalty))        (setf best-spelling spelling              best-penalty spelling-penalty))      (setf spelling (compute-spelling win-midi-list bit-vec 'sharpside)            spelling-penalty (compute-spell-pen-03-h (append win-pnc-list spelling)))      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty)))    ;Now return appropriate part of best-spelling.    (setf bs-end (/ win-midi-list-size 2))    (if first-window      (setf bs-end (* 2/3 win-midi-list-size)))    (if last-window      (setf bs-end win-midi-list-size))    (subseq best-spelling 0 bs-end)))(defun compute-spell-pen-03-h (spelling)  (let* ((n (list-length spelling))         (spelling-penalty 0))    (dotimes (i (1- n) spelling-penalty)      (do* ((j (1+ i) (1+ j))            pinc)           ((= j n))        (if (is-enharmonic-spelling (elt spelling i))          (setf spelling-penalty                (+ 4 spelling-penalty)))        (if (is-enharmonic-spelling (elt spelling j))          (setf spelling-penalty                (+ 4 spelling-penalty)))        (setf pinc (pnc2pinc (elt spelling i)                             (elt spelling j)))        (if (not (is-class-a-or-b-pinc pinc))          (if (is-class-c-pinc pinc)            (setf spelling-penalty                  (1+ spelling-penalty))            (setf spelling-penalty                  (+ 2 spelling-penalty))))))))(defun cam-03-i (midi-list)  (let (win-end win-pnc-list win-midi-list last-window first-window win-start        midi-list-size pnc-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start 9) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (if first-window        (setf win-pnc-list nil              win-midi-list (subseq midi-list win-start win-end))        (setf win-pnc-list (subseq pnc-list win-start (+ win-start 3))              win-midi-list (subseq midi-list (+ win-start 3) win-end)))      (setf pnc-list (append pnc-list (spell-win-03-i win-pnc-list win-midi-list                                                    first-window last-window)))      (setf first-window nil)      (setf win-start (+ win-start 3)))    pnc-list))(defun spell-win-03-i (win-pnc-list win-midi-list first-window last-window)  (let (pncs        n        pc-list        pnc-index-list        best-spelling        spelling        best-penalty        number-of-spellings        i        spelling-penalty        bs-end        )    (setf pncs '(("Bs" "Cn" "Dff") ("Cs" "Df") ("Css" "Dn" "Eff") ("Ds" "Ef")                 ("Dss" "En" "Ff") ("Es" "Fn" "Gff") ("Fs" "Gf") ("Fss" "Gn" "Aff")                 ("Gs" "Af") ("Gss" "An" "Bff") ("As" "Bf") ("Ass" "Bn" "Cf")))    (setf n (list-length win-midi-list))    (setf pc-list (mapcar #'(lambda (midi-note-number)                              (mod midi-note-number 12))                          win-midi-list))    (setf pnc-index-list (mapcar #'(lambda (x) x 0) win-midi-list))    (setf best-spelling (mapcar #'(lambda (pitch-class)                                    (elt (elt pncs pitch-class) 0))                                pc-list))    (setf best-penalty (compute-spell-pen-03 (append win-pnc-list best-spelling)))    (setf number-of-spellings  (apply #'* (mapcar #'(lambda (pc)                                                      (list-length (elt pncs pc)))                                                  pc-list)))    (do ((s 1 (1+ s)))        ((= s number-of-spellings))            ;Increment pnc-index-list.      (setf i 0)      (setf (elt pnc-index-list i)            (mod (1+ (elt pnc-index-list i))                 (list-length (elt pncs (elt pc-list i)))))      (do ()          ((not (and (= 0 (elt pnc-index-list i))                     (< i (1- n)))))        (setf i (1+ i))        (setf (elt pnc-index-list i)              (mod (1+ (elt pnc-index-list i))                   (list-length (elt pncs (elt pc-list i))))))            ;Find new spelling and spelling-penalty.      (setf spelling (mapcar #'(lambda (pc pnc-index)                                 (elt (elt pncs pc) pnc-index))                             pc-list                             pnc-index-list))      (setf spelling-penalty (compute-spell-pen-03 (append win-pnc-list spelling)))      ;Decide whether best-spelling should become equal to spelling.      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty)))        ;Now return appropriate part of best-spelling.    (setf bs-end (/ n 2))    (if first-window      (setf bs-end (* 2/3 n)))    (if last-window      (setf bs-end n))    (subseq best-spelling 0 bs-end)))(defun cam-03-j (midi-list)  (let (win-end win-midi-list last-window first-window win-start                midi-list-size pnc-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start 9) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (setf win-midi-list (subseq midi-list win-start win-end))      (setf pnc-list (append pnc-list (spell-win-03-j win-midi-list first-window                                                      last-window)))      (setf first-window nil)      (setf win-start (+ win-start 3)))    pnc-list))(defun spell-win-03-j (win-midi-list first-window last-window)  (let (bit-vec spelling spelling-penalty best-penalty max-bit-vec-int        win-midi-list-size best-spelling bs-end bs-start)    (setf win-midi-list-size (list-length win-midi-list))    (setf max-bit-vec-int (1- (expt 2 win-midi-list-size)))    (setf best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i win-midi-list-size)            spelling (compute-spelling win-midi-list bit-vec 'flatside)            spelling-penalty (compute-spell-pen-03 spelling))      (if (or (null best-spelling) (< spelling-penalty best-penalty))        (setf best-spelling spelling              best-penalty spelling-penalty))      (setf spelling (compute-spelling win-midi-list bit-vec 'sharpside)            spelling-penalty (compute-spell-pen-03 spelling))      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty)))    ;Now return appropriate part of best-spelling.    (setf bs-start 3)    (setf bs-end (* 2 bs-start))    (if first-window      (setf bs-start 0))    (if last-window      (setf bs-end win-midi-list-size))    (subseq best-spelling bs-start bs-end)))(defun cam-03-k (midi-list)  (let (win-end win-pnc-list win-midi-list last-window first-window win-start        midi-list-size pnc-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start 9) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (if first-window        (setf win-pnc-list nil              win-midi-list (subseq midi-list win-start win-end))        (setf win-pnc-list (subseq pnc-list win-start (+ win-start 3))              win-midi-list (subseq midi-list (+ win-start 3) win-end)))      (setf pnc-list (append pnc-list (spell-win-03-k win-pnc-list win-midi-list                                                    first-window last-window)))      (setf first-window nil)      (setf win-start (+ win-start 3)))    pnc-list))(defun spell-win-03-k (win-pnc-list win-midi-list first-window last-window)  (let (bit-vec spelling spelling-penalty best-penalty max-bit-vec-int        win-midi-list-size best-spelling bs-end)    (setf win-midi-list-size (list-length win-midi-list))    (setf max-bit-vec-int (1- (expt 2 win-midi-list-size)))    (setf best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i win-midi-list-size)            spelling (compute-spelling win-midi-list bit-vec 'flatside)            spelling-penalty (compute-spell-pen-03-k (append win-pnc-list spelling)))      (if (or (null best-spelling) (< spelling-penalty best-penalty))        (setf best-spelling spelling              best-penalty spelling-penalty))      (setf spelling (compute-spelling win-midi-list bit-vec 'sharpside)            spelling-penalty (compute-spell-pen-03-k (append win-pnc-list spelling)))      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty)))    ;Now return appropriate part of best-spelling.    (setf bs-end (/ win-midi-list-size 2))    (if first-window      (setf bs-end (* 2/3 win-midi-list-size)))    (if last-window      (setf bs-end win-midi-list-size))    (subseq best-spelling 0 bs-end)))(defun compute-spell-pen-03-k (spelling)  (let* ((n (list-length spelling))         (spelling-penalty 0)         pinc)    (dotimes (i (1- n) spelling-penalty)      (if (is-enharmonic-spelling (elt spelling i))        (setf spelling-penalty              (+ 2 spelling-penalty)))      (if (is-enharmonic-spelling (elt spelling (1+ i)))        (setf spelling-penalty              (+ 2 spelling-penalty)))      (setf pinc (pnc2pinc (elt spelling i)                           (elt spelling (1+ i))))      (if (not (is-class-a-or-b-pinc pinc))        (if (is-class-c-pinc pinc)          (setf spelling-penalty                (1+ spelling-penalty))          (setf spelling-penalty                (+ 2 spelling-penalty)))))))(defun cam-03-l (midi-list)  (cam-03-k midi-list))(defun cam-03-m (midi-list)  (let (win-end win-pnc-list win-midi-list last-window first-window win-start        midi-list-size pnc-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start 9) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (if first-window        (setf win-pnc-list nil              win-midi-list (subseq midi-list win-start win-end))        (setf win-pnc-list (subseq pnc-list win-start (+ win-start 3))              win-midi-list (subseq midi-list (+ win-start 3) win-end)))      (setf pnc-list (append pnc-list (spell-win-03-m win-pnc-list win-midi-list                                                    first-window last-window)))      (setf first-window nil)      (setf win-start (+ win-start 3)))    pnc-list))(defun spell-win-03-m (win-pnc-list win-midi-list first-window last-window)  (let (bit-vec spelling spelling-penalty best-penalty max-bit-vec-int        win-midi-list-size best-spelling bs-end)    (setf win-midi-list-size (list-length win-midi-list))    (setf max-bit-vec-int (1- (expt 2 win-midi-list-size)))    (setf best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i win-midi-list-size)            spelling (compute-spelling win-midi-list bit-vec 'flatside)            spelling-penalty (compute-spell-pen-03 (append win-pnc-list spelling)))      (if (or (null best-spelling) (< spelling-penalty best-penalty))        (setf best-spelling spelling              best-penalty spelling-penalty)        (if (and (= spelling-penalty best-penalty)                 (tie-breaker-m spelling best-spelling))          (setf best-spelling spelling                best-penalty spelling-penalty)))      (setf spelling (compute-spelling win-midi-list bit-vec 'sharpside)            spelling-penalty (compute-spell-pen-03 (append win-pnc-list spelling)))      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty)        (if (and (= spelling-penalty best-penalty)                 (tie-breaker-m spelling best-spelling))          (setf best-spelling spelling                best-penalty spelling-penalty))))    ;Now return appropriate part of best-spelling.    (setf bs-end (/ win-midi-list-size 2))    (if first-window      (setf bs-end (* 2/3 win-midi-list-size)))    (if last-window      (setf bs-end win-midi-list-size))    (subseq best-spelling 0 bs-end)))(defun tie-breaker-m (s1 s2)  (let (n m1 m2 p1 p2 h1 h2)    (setf n (list-length s1))    (setf m1 nil)    (dotimes (i (1- n))      (setf m1 (append m1                       (list (look-up-mod-class (pnc2pinc (elt s1 i)                                                          (elt s1 (1+ i)))                                                )))))    (setf m2 nil)    (dotimes (i (1- n))      (setf m2 (append m2                       (list (look-up-mod-class (pnc2pinc (elt s2 i)                                                          (elt s2 (1+ i)))                                                )))))    (setf h1 nil)    (setf h2 nil)    (dotimes (i (- n 2))      (if (and (not (eq (elt m1 i) (elt m1 (1+ i))))               (member (elt m1 i) '(a b c))               (member (elt m1 (1+ i))  '(c d)))        (setf h1 (append h1 (list i))))      (if (and (not (eq (elt m2 i) (elt m2 (1+ i))))               (member (elt m2 i) '(a b c))               (member (elt m2 (1+ i)) '(c d)))        (setf h2 (append h2 (list i)))))    (cond ((< (list-length h1) (list-length h2))           t)          ((> (list-length h1) (list-length h2))           nil)          (t (setf p1 (apply #'+ h1))             (setf p2 (apply #'+ h2))             (< p1 p2)))))(defun look-up-mod-class (pinc)  (let (pincs mod-classes p)    (setf pincs '("p1" "rp4" "rp5" "rmi2" "rma7" "rma2" "rmi7"                  "rmi3" "rma6" "rma3" "rmi6" "ra2" "rd7"                  "rd3" "ra6" "rd4" "ra5" "ra4" "rd5"))    (setf mod-classes '(a a a b b b b b b b b c c c c c c c c))    (setf p (position pinc pincs :test #'string=))    (if p      (elt mod-classes p)      'd)))(defun cam-03-n (midi-list)  (let (win-end win-pnc-list win-midi-list last-window first-window win-start        midi-list-size pnc-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start 9) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (if first-window        (setf win-pnc-list nil              win-midi-list (subseq midi-list win-start win-end))        (setf win-pnc-list (subseq pnc-list win-start (+ win-start 3))              win-midi-list (subseq midi-list (+ win-start 3) win-end)))      (setf pnc-list (append pnc-list (spell-win-03-n win-pnc-list win-midi-list                                                    first-window last-window)))      (setf first-window nil)      (setf win-start (+ win-start 3)))    pnc-list))(defun spell-win-03-n (win-pnc-list win-midi-list first-window last-window)  (let (bit-vec spelling spelling-penalty best-penalty max-bit-vec-int        win-midi-list-size best-spelling bs-end)    (setf win-midi-list-size (list-length win-midi-list))    (setf max-bit-vec-int (1- (expt 2 win-midi-list-size)))    (setf best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i win-midi-list-size)            spelling (compute-spelling win-midi-list bit-vec 'flatside)            spelling-penalty (compute-spell-pen-03-k (append win-pnc-list spelling)))      (if (or (null best-spelling) (< spelling-penalty best-penalty))        (setf best-spelling spelling              best-penalty spelling-penalty)        (if (and (= spelling-penalty best-penalty)                 (tie-breaker-m spelling best-spelling))          (setf best-spelling spelling                best-penalty spelling-penalty)))      (setf spelling (compute-spelling win-midi-list bit-vec 'sharpside)            spelling-penalty (compute-spell-pen-03-k (append win-pnc-list spelling)))      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty)        (if (and (= spelling-penalty best-penalty)                 (tie-breaker-m spelling best-spelling))          (setf best-spelling spelling                best-penalty spelling-penalty))))    ;Now return appropriate part of best-spelling.    (setf bs-end (/ win-midi-list-size 2))    (if first-window      (setf bs-end (* 2/3 win-midi-list-size)))    (if last-window      (setf bs-end win-midi-list-size))    (subseq best-spelling 0 bs-end)))(defun cam-03-o (midi-list)  (let (major-scale asc-mel-min-scale harm-min-scale        win-end win-pnc-list win-midi-list last-window blended-mod-table first-window        win-start midi-list-size pnc-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (setf major-scale (list 2 2 1 2 2 2 1))    (setf asc-mel-min-scale (list 2 1 2 2 2 2 1))    (setf harm-min-scale (list 2 1 2 2 1 3 1))    (setf blended-mod-table (compute-blended-mod-table .25                                                       (list (list major-scale 2)		;major                                                             (list asc-mel-min-scale 1)		;ascending melodic minor                                                             (list harm-min-scale 1)		;harmonic minor                                                             )                                                       ))    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start 9) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (if first-window        (setf win-pnc-list nil              win-midi-list (subseq midi-list win-start win-end))        (setf win-pnc-list (subseq pnc-list win-start (+ win-start 3))              win-midi-list (subseq midi-list (+ win-start 3) win-end)))      (setf pnc-list (append pnc-list (spell-win-03-f win-pnc-list win-midi-list                                                      first-window last-window                                                      blended-mod-table)))      (setf first-window nil)      (setf win-start (+ win-start 3)))    pnc-list))(defun cam-03-p (midi-list)  (let (major-scale nat-min-scale desc-mel-min-scale asc-mel-min-scale harm-min-scale        win-end win-pnc-list win-midi-list last-window blended-mod-table first-window        win-start midi-list-size pnc-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (setf major-scale (list 2 2 1 2 2 2 1))    (setf nat-min-scale (list 2 1 2 2 1 2 2))    (setf desc-mel-min-scale (list 2 1 2 2 1 2 2))    (setf asc-mel-min-scale (list 2 1 2 2 2 2 1))    (setf harm-min-scale (list 2 1 2 2 1 3 1))    (setf blended-mod-table (compute-blended-mod-table .4                                                       (list (list major-scale 4)		;major                                                             (list nat-min-scale 1)		;natural minor                                                             (list desc-mel-min-scale 1)	;descending melodic minor                                                             (list asc-mel-min-scale 1)		;ascending melodic minor                                                             (list harm-min-scale 2)		;harmonic minor                                                             )))    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start 9) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (if first-window        (setf win-pnc-list nil              win-midi-list (subseq midi-list win-start win-end))        (setf win-pnc-list (subseq pnc-list win-start (+ win-start 3))              win-midi-list (subseq midi-list (+ win-start 3) win-end)))      (setf pnc-list (append pnc-list (spell-win-03-f win-pnc-list win-midi-list                                                      first-window last-window                                                      blended-mod-table)))      (setf first-window nil)      (setf win-start (+ win-start 3)))    pnc-list))(defun cam-01-e (midi-list)  (let* (midi-list-size         ret-seg-start         pnc-list         win-start         pre-pc-set         win-end         win-pc-set         ret-seg-end         post-pc-set         pre-pnc-list         new-win-pc-set         ret-seg         pc-list)    (setf midi-list-size (list-length midi-list)          pc-list (mapcar #'(lambda (midi) (mod midi 12)) midi-list)          ret-seg-start 0          pnc-list nil)        (do ()        ((= (list-length pnc-list) midi-list-size))            ;Find win-start and pre-pc-set.      (setf win-start ret-seg-start            pre-pc-set nil)      (do ()          ((not (and (> win-start 0)                      (< (list-length pre-pc-set) 3))))        (setf win-start (1- win-start))        (if (not (member (elt pc-list win-start)                         pre-pc-set))          (setf pre-pc-set                (cons (elt pc-list win-start)                      pre-pc-set))))            ;Now find win-end and win-pc-set.      (setf win-end ret-seg-start            win-pc-set pre-pc-set)      (do ()          ((not (and (< win-end midi-list-size)                     (<= (list-length win-pc-set)                         9))))        (if (not (member (elt pc-list win-end)                         win-pc-set))          (setf win-pc-set (append win-pc-set                                   (list (elt pc-list win-end)))))        (setf win-end (1+ win-end)))      (if (> (list-length win-pc-set) 9)        (setf win-end (1- win-end)              win-pc-set (subseq win-pc-set 0 9)))            ;If win-pc-set is too small, extend pre-pc-set and win-start      ;backwards, remembering to update both pre-pc-set and win-pc-set.      (do ()          ((not (and (< (list-length win-pc-set) 9)                     (> win-start 0))))        (setf win-start (1- win-start))        (if (not (member (elt pc-list win-start) pre-pc-set))          (setf pre-pc-set (cons (elt pc-list win-start)                                 pre-pc-set)))        (if (not (member (elt pc-list win-start) win-pc-set))          (setf win-pc-set (cons (elt pc-list win-start)                                 win-pc-set))))            ;Now find ret-seg-end and post-pc-set.      (setf ret-seg-end win-end            post-pc-set nil)      (if (/= win-end midi-list-size)        (do ()            ((not (and (> ret-seg-end 0)                       (< (list-length post-pc-set) 3))))          (setf ret-seg-end (1- ret-seg-end))          (if (not (member (elt pc-list ret-seg-end)                           post-pc-set))            (setf post-pc-set (cons (elt pc-list ret-seg-end)                                      post-pc-set)))))            ;Now find pre-pnc-list.      (setf pre-pnc-list nil)      (do* ((pps nil)            (i (1- ret-seg-start) (1- i)))           ((= (list-length pre-pnc-list)               (list-length pre-pc-set)))        (if (not (member (elt pc-list i)                         pps))          (setf pre-pnc-list (cons (elt pnc-list i)                                   pre-pnc-list)                pps (cons (elt pc-list i)                          pps))))            ;Now remove pre-pc-set from win-pc-set to get new-win-pc-set      (setf new-win-pc-set nil)      (dotimes (i (list-length win-pc-set))        (if (not (member (elt win-pc-set i)                         pre-pc-set))          (setf new-win-pc-set                (append new-win-pc-set                        (list (elt win-pc-set i))))))            ;Now append best spelling for this retained segment to pnc-list      (setf ret-seg (subseq pc-list ret-seg-start ret-seg-end))      (setf pnc-list (append pnc-list                             (spell-win-01-e pre-pnc-list                                             pre-pc-set                                             new-win-pc-set                                             ret-seg)))            ;Finally, set ret-seg-start to equal start position of next retained      ;segment.      (setf ret-seg-start ret-seg-end)      )    pnc-list))(defun spell-win-01-e (pre-pnc-list                       pre-pc-set                       new-win-pc-set                       ret-seg)  (let (new-win-pc-set-size        max-bit-vec-int        bit-vec        best-spelling        best-penalty        spelling        spelling-penalty        spelt-ret-seg        pnc)    (setf new-win-pc-set-size (list-length new-win-pc-set)          max-bit-vec-int (1- (expt 2 new-win-pc-set-size))          best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i new-win-pc-set-size)            spelling (compute-spelling new-win-pc-set bit-vec 'flatside)            spelling-penalty (compute-spell-pen-03 (append pre-pnc-list spelling)))      (if (or (null best-spelling) (< spelling-penalty best-penalty))        (setf best-spelling spelling              best-penalty spelling-penalty))      (setf spelling (compute-spelling new-win-pc-set bit-vec 'sharpside)            spelling-penalty (compute-spell-pen-03 (append pre-pnc-list spelling)))      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty)))    ;Now spell pitches in retained segment and return it.    (setf spelt-ret-seg nil)    (dotimes (i (list-length ret-seg))      (setf pnc (elt (append pre-pnc-list best-spelling)                     (position (elt ret-seg i)                               (append pre-pc-set                                       new-win-pc-set)))            spelt-ret-seg (append spelt-ret-seg (list pnc))))    spelt-ret-seg))(defun cam-03-r (midi-list)  (let (win-end win-pnc-list win-midi-list last-window first-window win-start        midi-list-size pnc-list pre-midi-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start 9) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (if first-window        (setf win-pnc-list nil              win-midi-list (subseq midi-list win-start win-end)              pre-midi-list nil)        (setf win-pnc-list (subseq pnc-list win-start (+ win-start 3))              win-midi-list (subseq midi-list (+ win-start 3)  win-end)              pre-midi-list (subseq midi-list win-start (+ win-start 3))))      (setf pnc-list (append pnc-list (spell-win-03-r win-pnc-list pre-midi-list win-midi-list                                                    first-window last-window)))      (setf first-window nil)      (setf win-start (+ win-start 3)))    pnc-list))(defun spell-win-03-r (win-pnc-list pre-midi-list win-midi-list first-window last-window)  (let (bit-vec spelling spelling-penalty best-penalty max-bit-vec-int        win-midi-list-size best-spelling bs-end        pre-midi-set win-midi-set midi-set win-pnc-set spelling-set)    (setf win-midi-list-size (list-length win-midi-list))    (setf win-pnc-set (remove-duplicates win-pnc-list :test #'string=))    (setf pre-midi-set (remove-duplicates pre-midi-list :test #'=))    (setf win-midi-set (remove-duplicates win-midi-list :test #'=))    (setf midi-set (remove-duplicates (append pre-midi-set win-midi-set) :test #'=))    (setf max-bit-vec-int (1- (expt 2 win-midi-list-size)))    (setf best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i win-midi-list-size)            spelling (compute-spelling win-midi-list bit-vec 'flatside)            spelling-set (remove-duplicates spelling :test #'string=))      (if (>= (list-length midi-set)               (list-length (remove-duplicates (append win-pnc-set spelling-set)                                              :test #'string=)))        (progn          (setf spelling-penalty (compute-spell-pen-03 (append win-pnc-list spelling)))          (if (or (null best-spelling) (< spelling-penalty best-penalty))            (setf best-spelling spelling                  best-penalty spelling-penalty))))      (setf spelling (compute-spelling win-midi-list bit-vec 'sharpside)            spelling-set (remove-duplicates spelling :test #'string=)            )      (if (>= (list-length midi-set)               (list-length (remove-duplicates (append win-pnc-set spelling-set)                                              :test #'string=)))        (progn          (setf spelling-penalty (compute-spell-pen-03 (append win-pnc-list spelling)))          (if (or (null best-spelling) (< spelling-penalty best-penalty))            (setf best-spelling spelling                  best-penalty spelling-penalty)))))    ;Now return appropriate part of best-spelling.    (setf bs-end (/ win-midi-list-size 2))    (if first-window      (setf bs-end (* 2/3 win-midi-list-size)))    (if last-window      (setf bs-end win-midi-list-size))    #|(format t "~%~20a   ~20a   ~20a   ~25a   ~3d   ~3d   ~5a   ~5a"            win-pnc-list pre-midi-list win-midi-list            best-spelling            bs-end            win-midi-list-size            first-window            last-window)|#    (subseq best-spelling 0 bs-end)))(defun cam-03-s (midi-list)  (let (win-end win-pnc-list win-midi-list last-window first-window win-start        midi-list-size pnc-list pre-midi-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start 9) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (if first-window        (setf win-pnc-list nil              win-midi-list (subseq midi-list win-start win-end)              pre-midi-list nil)        (setf win-pnc-list (subseq pnc-list win-start (+ win-start 3))              win-midi-list (subseq midi-list (+ win-start 3)  win-end)              pre-midi-list (subseq midi-list win-start (+ win-start 3))))      (setf pnc-list (append pnc-list (spell-win-03-s win-pnc-list pre-midi-list win-midi-list                                                    first-window last-window)))      (setf first-window nil)      (setf win-start (+ win-start 3)))    pnc-list))(defun spell-win-03-s (win-pnc-list pre-midi-list win-midi-list first-window last-window)  (let (bit-vec spelling spelling-penalty best-penalty max-bit-vec-int        win-midi-list-size best-spelling bs-end        pre-pc-set win-pc-set pc-set win-pnc-set spelling-set)    (setf win-midi-list-size (list-length win-midi-list))    (setf win-pnc-set (remove-duplicates win-pnc-list :test #'string=))    (setf pre-pc-set (remove-duplicates (mapcar #'(lambda (midi) (mod midi 12)) pre-midi-list) :test #'=))    (setf win-pc-set (remove-duplicates (mapcar #'(lambda (midi) (mod midi 12)) win-midi-list) :test #'=))    (setf pc-set (remove-duplicates (append pre-pc-set win-pc-set) :test #'=))    (setf max-bit-vec-int (1- (expt 2 win-midi-list-size)))    (setf best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i win-midi-list-size)            spelling (compute-spelling win-midi-list bit-vec 'flatside)            spelling-set (remove-duplicates spelling :test #'string=))      (if (= (list-length pc-set)              (list-length (remove-duplicates (append win-pnc-set spelling-set)                                             :test #'string=)))        (progn          (setf spelling-penalty (compute-spell-pen-03 (append win-pnc-list spelling)))          (if (or (null best-spelling) (< spelling-penalty best-penalty))            (setf best-spelling spelling                  best-penalty spelling-penalty))))      (setf spelling (compute-spelling win-midi-list bit-vec 'sharpside)            spelling-set (remove-duplicates spelling :test #'string=)            )      (if (= (list-length pc-set)              (list-length (remove-duplicates (append win-pnc-set spelling-set)                                             :test #'string=)))        (progn          (setf spelling-penalty (compute-spell-pen-03 (append win-pnc-list spelling)))          (if (or (null best-spelling) (< spelling-penalty best-penalty))            (setf best-spelling spelling                  best-penalty spelling-penalty)))))    ;Now return appropriate part of best-spelling.    (setf bs-end (/ win-midi-list-size 2))    (if first-window      (setf bs-end (* 2/3 win-midi-list-size)))    (if last-window      (setf bs-end win-midi-list-size))    (subseq best-spelling 0 bs-end)))(defun cam-03-t (midi-list)  (let (win-end win-pnc-list win-midi-list last-window first-window win-start        midi-list-size pnc-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start 9) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (if first-window        (setf win-pnc-list nil              win-midi-list (subseq midi-list win-start win-end))        (setf win-pnc-list (subseq pnc-list win-start (+ win-start 3))              win-midi-list (subseq midi-list (+ win-start 3) win-end)))      (setf pnc-list (append pnc-list (spell-win-03-t win-pnc-list win-midi-list                                                    first-window last-window)))      (setf first-window nil)      (setf win-start (+ win-start 3)))    pnc-list))(defun spell-win-03-t (win-pnc-list win-midi-list first-window last-window)  (let (bit-vec spelling spelling-penalty best-penalty max-bit-vec-int                win-midi-list-size best-spelling bs-end                flat-nat-pncs sharp-nat-pncs)    (setf win-midi-list-size (list-length win-midi-list))    (setf flat-nat-pncs '("Cn" "Df" "Dn" "Ef" "En" "Fn" "Gf" "Gn" "Af" "An" "Bf" "Bn"))    (setf best-spelling (mapcar #'(lambda (midi)                                    (elt flat-nat-pncs (mod midi 12)))                                win-midi-list))    (if (/= 0 (compute-spell-pen-03 (append win-pnc-list best-spelling)))      (progn        (setf sharp-nat-pncs '("Cn" "Cs" "Dn" "Ds" "En" "Fn" "Fs" "Gn" "Gs" "An" "As" "Bn"))        (setf best-spelling (mapcar #'(lambda (midi)                                        (elt sharp-nat-pncs (mod midi 12)))                                    win-midi-list))        (if (/= 0 (compute-spell-pen-03 (append win-pnc-list best-spelling)))          (progn             (setf max-bit-vec-int (1- (expt 2 win-midi-list-size)))            (setf best-spelling nil)            (dotimes (i (1+ max-bit-vec-int))              (setf bit-vec (bit-vector i win-midi-list-size)                    spelling (compute-spelling win-midi-list bit-vec 'flatside)                    spelling-penalty (compute-spell-pen-03 (append win-pnc-list spelling)))              (if (or (null best-spelling) (< spelling-penalty best-penalty))                (setf best-spelling spelling                      best-penalty spelling-penalty))              (setf spelling (compute-spelling win-midi-list bit-vec 'sharpside)                    spelling-penalty (compute-spell-pen-03 (append win-pnc-list spelling)))              (if (< spelling-penalty best-penalty)                (setf best-spelling spelling                      best-penalty spelling-penalty)))))))        ;Now return appropriate part of best-spelling.    (setf bs-end (/ win-midi-list-size 2))    (if first-window      (setf bs-end (* 2/3 win-midi-list-size)))    (if last-window      (setf bs-end win-midi-list-size))    (subseq best-spelling 0 bs-end)))(defun cam-03-u (midi-list)  (let (win-end win-pnc-list win-midi-list last-window first-window win-start        midi-list-size pnc-list)    (setf midi-list-size (list-length midi-list))    (setf last-window nil)    (setf first-window t)    (setf win-start 0)    (setf pnc-list nil)    (do ()        ((= (list-length pnc-list) midi-list-size))      (setf win-end (min (+ win-start 9) midi-list-size))      (if (= win-end midi-list-size)        (setf last-window t))      (if first-window        (setf win-pnc-list nil              win-midi-list (subseq midi-list win-start win-end))        (setf win-pnc-list (subseq pnc-list win-start (+ win-start 3))              win-midi-list (subseq midi-list (+ win-start 3) win-end)))      (setf pnc-list (append pnc-list (spell-win-03-u win-pnc-list win-midi-list                                                    first-window last-window)))      (setf first-window nil)      (setf win-start (+ win-start 3)))    pnc-list))(defun spell-win-03-u (win-pnc-list win-midi-list first-window last-window)  (let (bit-vec spelling spelling-penalty best-penalty max-bit-vec-int        win-midi-list-size best-spelling bs-end        check-flat-side check-sharp-side)    (setf check-sharp-side 't)    (setf check-flat-side 't)    (dotimes (i (list-length win-pnc-list))      (if (member (elt win-pnc-list i) '("Dff" "Eff" "Ff" "Gff" "Aff" "Bff" "Cf")                  :test #'string=)        (setf check-sharp-side nil))      (if (member (elt win-pnc-list i) '("Bs" "Css" "Dss" "Es" "Fss" "Gss" "Ass")                  :test #'string=)        (setf check-flat-side nil)))    (setf win-midi-list-size (list-length win-midi-list))    (setf max-bit-vec-int (1- (expt 2 win-midi-list-size)))    (setf best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i win-midi-list-size))      (if check-flat-side        (progn          (setf spelling (compute-spelling win-midi-list bit-vec 'flatside))          (setf spelling-penalty (compute-spell-pen-03 (append win-pnc-list spelling)))          (if (or (null best-spelling) (< spelling-penalty best-penalty))            (setf best-spelling spelling                  best-penalty spelling-penalty))))      (if check-sharp-side        (progn           (setf spelling (compute-spelling win-midi-list bit-vec 'sharpside)                spelling-penalty (compute-spell-pen-03 (append win-pnc-list spelling)))          (if (or (null best-spelling) (< spelling-penalty best-penalty))            (setf best-spelling spelling                  best-penalty spelling-penalty))))      )    ;Now return appropriate part of best-spelling.    (setf bs-end (/ win-midi-list-size 2))    (if first-window      (setf bs-end (* 2/3 win-midi-list-size)))    (if last-window      (setf bs-end win-midi-list-size))    (subseq best-spelling 0 bs-end)))(defun cam-opt (midi-list)  (let* (midi-list-size         ret-seg-start         pnc-list         win-start         pre-midi-set         win-end         win-midi-set         ret-seg-end         post-midi-set         pre-pnc-list         new-win-midi-set         ret-seg         blended-mod-table         major-scale         nat-min-scale         desc-mel-min-scale         harm-min-scale         asc-mel-min-scale)    (setf midi-list-size (list-length midi-list)          ret-seg-start 0          pnc-list nil)    (setf major-scale (list 2 2 1 2 2 2 1))    (setf nat-min-scale (list 2 1 2 2 1 2 2))    (setf desc-mel-min-scale (list 2 1 2 2 1 2 2))    (setf asc-mel-min-scale (list 2 1 2 2 2 2 1))    (setf harm-min-scale (list 2 1 2 2 1 3 1))    (setf blended-mod-table (compute-blended-mod-table .4                                                       (list (list major-scale 4)		;major                                                             (list nat-min-scale 1)		;natural minor                                                             (list desc-mel-min-scale 1)	;descending melodic minor                                                             (list asc-mel-min-scale 1)		;ascending melodic minor                                                             (list harm-min-scale 2)		;harmonic minor                                                             )))        (do ()        ((= (list-length pnc-list) midi-list-size))            ;Find win-start and pre-midi-set.      (setf win-start ret-seg-start            pre-midi-set nil)      (do ()          ((not (and (> win-start 0)                      (< (list-length pre-midi-set) 4))))        (setf win-start (1- win-start))        (if (not (member (elt midi-list win-start)                         pre-midi-set))          (setf pre-midi-set                (cons (elt midi-list win-start)                      pre-midi-set))))            ;Now find win-end and win-midi-set.      (setf win-end ret-seg-start            win-midi-set pre-midi-set)      (do ()          ((not (and (< win-end midi-list-size)                     (<= (list-length win-midi-set)                         12))))        (if (not (member (elt midi-list win-end)                         win-midi-set))          (setf win-midi-set (append win-midi-set                                     (list (elt midi-list win-end)))))        (setf win-end (1+ win-end)))      (if (> (list-length win-midi-set) 12)        (setf win-end (1- win-end)              win-midi-set (subseq win-midi-set 0 12)))            ;If win-midi-set is too small, extend pre-midi-set and win-start      ;backwards, remembering to update both pre-midi-set and win-midi-set.      (do ()          ((not (and (< (list-length win-midi-set) 12)                     (> win-start 0))))        (setf win-start (1- win-start))        (if (not (member (elt midi-list win-start) pre-midi-set))          (setf pre-midi-set (cons (elt midi-list win-start)                                   pre-midi-set)))        (if (not (member (elt midi-list win-start) win-midi-set))          (setf win-midi-set (cons (elt midi-list win-start)                                   win-midi-set))))            ;Now find ret-seg-end and post-midi-set.      (setf ret-seg-end win-end            post-midi-set nil)      (if (/= win-end midi-list-size)        (do ()            ((not (and (> ret-seg-end 0)                       (< (list-length post-midi-set) 4))))          (setf ret-seg-end (1- ret-seg-end))          (if (not (member (elt midi-list ret-seg-end)                           post-midi-set))            (setf post-midi-set (cons (elt midi-list ret-seg-end)                                      post-midi-set)))))            ;Now find pre-pnc-list.      (setf pre-pnc-list nil)      (do* ((pms nil)            (i (1- ret-seg-start) (1- i)))           ((= (list-length pre-pnc-list)               (list-length pre-midi-set)))        (if (not (member (elt midi-list i)                         pms))          (setf pre-pnc-list (cons (elt pnc-list i)                                  pre-pnc-list)                pms (cons (elt midi-list i)                          pms))))            ;Now remove pre-midi-set from win-midi-set to get new-win-midi-set      (setf new-win-midi-set nil)      (dotimes (i (list-length win-midi-set))        (if (not (member (elt win-midi-set i)                         pre-midi-set))          (setf new-win-midi-set                (append new-win-midi-set                        (list (elt win-midi-set i))))))            ;Now append best spelling for this retained segment to pnc-list      (setf ret-seg (subseq midi-list ret-seg-start ret-seg-end))      (setf pnc-list (append pnc-list                             (spell-win-opt pre-pnc-list                                            pre-midi-set                                            new-win-midi-set                                            ret-seg                                            blended-mod-table)))            ;Finally, set ret-seg-start to equal start position of next retained      ;segment.      (setf ret-seg-start ret-seg-end)      )    pnc-list))(defun spell-win-opt (pre-pnc-list                      pre-midi-set                      new-win-midi-set                      ret-seg                      blended-mod-table)  (let (new-win-midi-set-size        max-bit-vec-int        bit-vec        best-spelling        best-penalty        spelling        spelling-penalty        spelt-ret-seg        pnc        flat-nat-pncs        sharp-nat-pncs)    (setf new-win-midi-set-size (list-length new-win-midi-set))    (setf flat-nat-pncs '("Cn" "Df" "Dn" "Ef" "En" "Fn" "Gf" "Gn" "Af" "An" "Bf" "Bn"))    (setf best-spelling (mapcar #'(lambda (midi)                                    (elt flat-nat-pncs (mod midi 12)))                                new-win-midi-set))    (if (/= 0 (compute-spell-pen-03-f (append pre-pnc-list best-spelling)                                      blended-mod-table))      (progn         (setf sharp-nat-pncs '("Cn" "Cs" "Dn" "Ds" "En" "Fn" "Fs" "Gn" "Gs" "An" "As" "Bn"))        (setf best-spelling (mapcar #'(lambda (midi)                                        (elt sharp-nat-pncs (mod midi 12)))                                    new-win-midi-set))        (if (/= 0 (compute-spell-pen-03-f (append pre-pnc-list best-spelling)                                          blended-mod-table))          (progn             (setf max-bit-vec-int (1- (expt 2 new-win-midi-set-size)))            (setf best-spelling nil)            (dotimes (i (1+ max-bit-vec-int))              (setf bit-vec (bit-vector i new-win-midi-set-size)                    spelling (compute-spelling new-win-midi-set bit-vec 'flatside)                    spelling-penalty (compute-spell-pen-03-f (append pre-pnc-list spelling)                                                             blended-mod-table))              (if (or (null best-spelling) (< spelling-penalty best-penalty))                (setf best-spelling spelling                      best-penalty spelling-penalty))              (setf spelling (compute-spelling new-win-midi-set bit-vec 'sharpside)                    spelling-penalty (compute-spell-pen-03-f (append pre-pnc-list spelling)                                                             blended-mod-table))              (if (< spelling-penalty best-penalty)                (setf best-spelling spelling                      best-penalty spelling-penalty)))))))        ;Now spell pitches in retained segment and return it.    (setf spelt-ret-seg nil)    (dotimes (i (list-length ret-seg))      (setf pnc (elt (append pre-pnc-list best-spelling)                     (position (elt ret-seg i)                               (append pre-midi-set                                       new-win-midi-set)))            spelt-ret-seg (append spelt-ret-seg (list pnc))))    spelt-ret-seg))(defun cam-01-a (midi-list)  (cam-01 midi-list 9))(defun cam-9698-a (midi-list)  (cam-9698 midi-list 12))(defun cam-9698-b (midi-list)  (cam-9698 midi-list 9))(defun cam-01-b (midi-list)  (let* (midi-list-size         ret-seg-start         pnc-list         win-start         pre-midi-set         win-end         win-midi-set         ret-seg-end         post-midi-set         pre-pnc-list         new-win-midi-set         ret-seg)    (setf midi-list-size (list-length midi-list)          ret-seg-start 0          pnc-list nil)    ;For debugging only:    ;(format t "~%MIDI list: ~a~%Window size: ~d~%" midi-list 9)    (do ()        ((= (list-length pnc-list) midi-list-size))            ;Find win-start and pre-midi-set.      (setf win-start ret-seg-start            pre-midi-set nil)      (do ()          ((not (and (> win-start 0)                      (< (list-length pre-midi-set) (/ 9 3)))))        (setf win-start (1- win-start))        (if (not (member (elt midi-list win-start)                         pre-midi-set))          (setf pre-midi-set                (cons (elt midi-list win-start)                      pre-midi-set))))            ;Now find win-end and win-midi-set.      (setf win-end ret-seg-start            win-midi-set pre-midi-set)      (do ()          ((not (and (< win-end midi-list-size)                     (<= (list-length win-midi-set)                         9))))        (if (not (member (elt midi-list win-end)                         win-midi-set))          (setf win-midi-set (append win-midi-set                                     (list (elt midi-list win-end)))))        (setf win-end (1+ win-end)))      (if (> (list-length win-midi-set) 9)        (setf win-end (1- win-end)              win-midi-set (subseq win-midi-set 0 9)))            ;If win-midi-set is too small, extend pre-midi-set and win-start      ;backwards, remembering to update both pre-midi-set and win-midi-set.      (do ()          ((not (and (< (list-length win-midi-set) 9)                     (> win-start 0))))        (setf win-start (1- win-start))        (if (not (member (elt midi-list win-start) pre-midi-set))          (setf pre-midi-set (cons (elt midi-list win-start)                                   pre-midi-set)))        (if (not (member (elt midi-list win-start) win-midi-set))          (setf win-midi-set (cons (elt midi-list win-start)                                   win-midi-set))))            ;Now find ret-seg-end and post-midi-set.      (setf ret-seg-end win-end            post-midi-set nil)      (if (/= win-end midi-list-size)        (do ()            ((not (and (> ret-seg-end 0)                       (< (list-length post-midi-set) (/ 9 3)))))          (setf ret-seg-end (1- ret-seg-end))          (if (not (member (elt midi-list ret-seg-end)                           post-midi-set))            (setf post-midi-set (cons (elt midi-list ret-seg-end)                                      post-midi-set)))))            ;Now find pre-pnc-list.      (setf pre-pnc-list nil)      (do* ((pms nil)            (i (1- ret-seg-start) (1- i)))           ((= (list-length pre-pnc-list)               (list-length pre-midi-set)))        (if (not (member (elt midi-list i)                         pms))          (setf pre-pnc-list (cons (elt pnc-list i)                                  pre-pnc-list)                pms (cons (elt midi-list i)                          pms))))            ;Now remove pre-midi-set from win-midi-set to get new-win-midi-set      (setf new-win-midi-set nil)      (dotimes (i (list-length win-midi-set))        (if (not (member (elt win-midi-set i)                         pre-midi-set))          (setf new-win-midi-set                (append new-win-midi-set                        (list (elt win-midi-set i))))))            ;Now append best spelling for this retained segment to pnc-list      (setf ret-seg (subseq midi-list ret-seg-start ret-seg-end))      (setf pnc-list (append pnc-list                             (spell-win-01-b pre-pnc-list                                             pre-midi-set                                             new-win-midi-set                                             ret-seg)))            ;For debugging only:      #|(format t "~%Window start: ~dWindow end: ~dRetained segment start: ~dRetained segment end: ~dPrefix MIDI set: ~aPrefix PNC set: ~aWindow MIDI set: ~aPNC List so far: ~aSuffix MIDI set: ~aNew window MIDI set: ~aRetained segment: ~a~%"              win-start              win-end              ret-seg-start              ret-seg-end              pre-midi-set              pre-pnc-list              win-midi-set              pnc-list              post-midi-set              new-win-midi-set              ret-seg              )|#      ;Finally, set ret-seg-start to equal start position of next retained      ;segment.      (setf ret-seg-start ret-seg-end)      )    pnc-list))(defun spell-win-01-b (pre-pnc-list                       pre-midi-set                       new-win-midi-set                       ret-seg)  (let (new-win-midi-set-size        max-bit-vec-int        bit-vec        best-spelling        best-penalty        spelling        spelling-penalty        spelt-ret-seg        pnc)    (setf new-win-midi-set-size (list-length new-win-midi-set)          max-bit-vec-int (1- (expt 2 new-win-midi-set-size))          best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i new-win-midi-set-size)            spelling (compute-spelling new-win-midi-set bit-vec 'flatside)            spelling-penalty (compute-spell-pen-03-b (append pre-pnc-list spelling)))      (if (or (null best-spelling) (< spelling-penalty best-penalty))        (setf best-spelling spelling              best-penalty spelling-penalty))      (setf spelling (compute-spelling new-win-midi-set bit-vec 'sharpside)            spelling-penalty (compute-spell-pen-03-b (append pre-pnc-list spelling)))      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty)))    ;Now spell pitches in retained segment and return it.    (setf spelt-ret-seg nil)    (dotimes (i (list-length ret-seg))      (setf pnc (elt (append pre-pnc-list best-spelling)                     (position (elt ret-seg i)                               (append pre-midi-set                                       new-win-midi-set)))            spelt-ret-seg (append spelt-ret-seg (list pnc))))    spelt-ret-seg))(defun cam-01-c (midi-list)  (let* (midi-list-size         ret-seg-start         pnc-list         win-start         pre-midi-set         win-end         win-midi-set         ret-seg-end         post-midi-set         pre-pnc-list         new-win-midi-set         ret-seg)    (setf midi-list-size (list-length midi-list)          ret-seg-start 0          pnc-list nil)    ;For debugging only:    ;(format t "~%MIDI list: ~a~%Window size: ~d~%" midi-list 9)    (do ()        ((= (list-length pnc-list) midi-list-size))            ;Find win-start and pre-midi-set.      (setf win-start ret-seg-start            pre-midi-set nil)      (do ()          ((not (and (> win-start 0)                      (< (list-length pre-midi-set) (/ 9 3)))))        (setf win-start (1- win-start))        (if (not (member (elt midi-list win-start)                         pre-midi-set))          (setf pre-midi-set                (cons (elt midi-list win-start)                      pre-midi-set))))            ;Now find win-end and win-midi-set.      (setf win-end ret-seg-start            win-midi-set pre-midi-set)      (do ()          ((not (and (< win-end midi-list-size)                     (<= (list-length win-midi-set)                         9))))        (if (not (member (elt midi-list win-end)                         win-midi-set))          (setf win-midi-set (append win-midi-set                                     (list (elt midi-list win-end)))))        (setf win-end (1+ win-end)))      (if (> (list-length win-midi-set) 9)        (setf win-end (1- win-end)              win-midi-set (subseq win-midi-set 0 9)))            ;If win-midi-set is too small, extend pre-midi-set and win-start      ;backwards, remembering to update both pre-midi-set and win-midi-set.      (do ()          ((not (and (< (list-length win-midi-set) 9)                     (> win-start 0))))        (setf win-start (1- win-start))        (if (not (member (elt midi-list win-start) pre-midi-set))          (setf pre-midi-set (cons (elt midi-list win-start)                                   pre-midi-set)))        (if (not (member (elt midi-list win-start) win-midi-set))          (setf win-midi-set (cons (elt midi-list win-start)                                   win-midi-set))))            ;Now find ret-seg-end and post-midi-set.      (setf ret-seg-end win-end            post-midi-set nil)      (if (/= win-end midi-list-size)        (do ()            ((not (and (> ret-seg-end 0)                       (< (list-length post-midi-set) (/ 9 3)))))          (setf ret-seg-end (1- ret-seg-end))          (if (not (member (elt midi-list ret-seg-end)                           post-midi-set))            (setf post-midi-set (cons (elt midi-list ret-seg-end)                                      post-midi-set)))))            ;Now find pre-pnc-list.      (setf pre-pnc-list nil)      (do* ((pms nil)            (i (1- ret-seg-start) (1- i)))           ((= (list-length pre-pnc-list)               (list-length pre-midi-set)))        (if (not (member (elt midi-list i)                         pms))          (setf pre-pnc-list (cons (elt pnc-list i)                                  pre-pnc-list)                pms (cons (elt midi-list i)                          pms))))            ;Now remove pre-midi-set from win-midi-set to get new-win-midi-set      (setf new-win-midi-set nil)      (dotimes (i (list-length win-midi-set))        (if (not (member (elt win-midi-set i)                         pre-midi-set))          (setf new-win-midi-set                (append new-win-midi-set                        (list (elt win-midi-set i))))))            ;Now append best spelling for this retained segment to pnc-list      (setf ret-seg (subseq midi-list ret-seg-start ret-seg-end))      (setf pnc-list (append pnc-list                             (spell-win-01-c pre-pnc-list                                             pre-midi-set                                             new-win-midi-set                                             ret-seg)))            ;For debugging only:      #|(format t "~%Window start: ~dWindow end: ~dRetained segment start: ~dRetained segment end: ~dPrefix MIDI set: ~aPrefix PNC set: ~aWindow MIDI set: ~aPNC List so far: ~aSuffix MIDI set: ~aNew window MIDI set: ~aRetained segment: ~a~%"              win-start              win-end              ret-seg-start              ret-seg-end              pre-midi-set              pre-pnc-list              win-midi-set              pnc-list              post-midi-set              new-win-midi-set              ret-seg              )|#      ;Finally, set ret-seg-start to equal start position of next retained      ;segment.      (setf ret-seg-start ret-seg-end)      )    pnc-list))(defun spell-win-01-c (pre-pnc-list                       pre-midi-set                       new-win-midi-set                       ret-seg)  (let (new-win-midi-set-size        max-bit-vec-int        bit-vec        best-spelling        best-penalty        spelling        spelling-penalty        spelt-ret-seg        pnc)    (setf new-win-midi-set-size (list-length new-win-midi-set)          max-bit-vec-int (1- (expt 2 new-win-midi-set-size))          best-spelling nil)    (dotimes (i (1+ max-bit-vec-int))      (setf bit-vec (bit-vector i new-win-midi-set-size)            spelling (compute-spelling new-win-midi-set bit-vec 'flatside)            spelling-penalty (compute-spell-pen-03-c (append pre-pnc-list spelling)))      (if (or (null best-spelling) (< spelling-penalty best-penalty))        (setf best-spelling spelling              best-penalty spelling-penalty))      (setf spelling (compute-spelling new-win-midi-set bit-vec 'sharpside)            spelling-penalty (compute-spell-pen-03-c (append pre-pnc-list spelling)))      (if (< spelling-penalty best-penalty)        (setf best-spelling spelling              best-penalty spelling-penalty)))    ;Now spell pitches in retained segment and return it.    (setf spelt-ret-seg nil)    (dotimes (i (list-length ret-seg))      (setf pnc (elt (append pre-pnc-list best-spelling)                     (position (elt ret-seg i)                               (append pre-midi-set                                       new-win-midi-set)))            spelt-ret-seg (append spelt-ret-seg (list pnc))))    spelt-ret-seg))