#|lhpitchspell.lispCopyright © 2003-4 by David Meredith. All rights reserved.2004-02-05This file implements the versions of lhpitchspell described in ps-dphil.tex.|#(defstruct newnote  pitchlh  onset  offset  span  deg  index  enh  pitchname)(defun lhpitchspell1 (nlist)  (let* (tune ints x0 place j maxplace minplace)    (setf tune nil)    (dotimes (i (list-length nlist))      (setf tune (append tune (list (newnote-pitchlh (elt nlist i))))))    (setf ints (intervals tune))    (setf x0 (elt nlist 0))    (setf place (intlh (newnote-pitchlh x0)))    (setf j 0)    (dotimes (i (list-length nlist))      (setf (newnote-span (elt nlist i))            (- (newnote-pitchlh (elt nlist i))               (newnote-pitchlh x0)))      (if (zerop (mod (newnote-span (elt nlist i)) 12))        (setf (newnote-deg (elt nlist i)) 0)        (setf (newnote-deg (elt nlist i)) (elt ints j)              j (1+ j)))      (setf x0 (elt nlist i)))    (setf maxplace 17          minplace -13)    (dotimes (i (list-length nlist))      (setf place (+ place (newnote-deg (elt nlist i)))            (newnote-enh (elt nlist i)) nil)      (if (> place maxplace)        (setf (newnote-enh (elt nlist i)) t              place (- place 12)))      (if (< place minplace)        (setf (newnote-enh (elt nlist i)) t              place (+ place 12)))      (setf (newnote-index (elt nlist i)) place            (newnote-pitchname (elt nlist i)) (qp2pn (newnote-index (elt nlist i))                                                     (newnote-pitchlh (elt nlist i)))))    nlist    ))(defun lhpitchspell2 (nlist)  (let* (tune ints x0 place j maxplace minplace)    (setf tune nil)    (dotimes (i (list-length nlist))      (setf tune (append tune (list (newnote-pitchlh (elt nlist i))))))    (setf ints (intervals2 tune))    (setf x0 (elt nlist 0))    (setf place (intlh (newnote-pitchlh x0)))    (setf j 0)    (dotimes (i (list-length nlist))      (setf (newnote-span (elt nlist i))            (- (newnote-pitchlh (elt nlist i))               (newnote-pitchlh x0)))      (if (zerop (mod (newnote-span (elt nlist i)) 12))        (setf (newnote-deg (elt nlist i)) 0)        (setf (newnote-deg (elt nlist i)) (elt ints j)              j (1+ j)))      (setf x0 (elt nlist i)))    (setf maxplace 17          minplace -13)    (dotimes (i (list-length nlist))      (setf place (+ place (newnote-deg (elt nlist i)))            (newnote-enh (elt nlist i)) nil)      (if (> place maxplace)        (setf (newnote-enh (elt nlist i)) t              place (- place 12)))      (if (< place minplace)        (setf (newnote-enh (elt nlist i)) t              place (+ place 12)))      (setf (newnote-index (elt nlist i)) place            (newnote-pitchname (elt nlist i)) (qp2pn (newnote-index (elt nlist i))                                                     (newnote-pitchlh (elt nlist i)))))    nlist    ))(defun lhpitchspell3 (nlist)  (let* (tune ints x0 place j maxplace minplace)    (setf tune nil)    (dotimes (i (list-length nlist))      (setf tune (append tune (list (newnote-pitchlh (elt nlist i))))))    (setf ints (intervals3 tune))    (setf x0 (elt nlist 0))    (setf place (intlh (newnote-pitchlh x0)))    (setf j 0)    (dotimes (i (list-length nlist))      (setf (newnote-span (elt nlist i))            (- (newnote-pitchlh (elt nlist i))               (newnote-pitchlh x0)))      (if (zerop (mod (newnote-span (elt nlist i)) 12))        (setf (newnote-deg (elt nlist i)) 0)        (setf (newnote-deg (elt nlist i)) (elt ints j)              j (1+ j)))      (setf x0 (elt nlist i)))    (setf maxplace 17          minplace -13)    (dotimes (i (list-length nlist))      (setf place (+ place (newnote-deg (elt nlist i)))            (newnote-enh (elt nlist i)) nil)      (if (> place maxplace)        (setf (newnote-enh (elt nlist i)) t              place (- place 12)))      (if (< place minplace)        (setf (newnote-enh (elt nlist i)) t              place (+ place 12)))      (setf (newnote-index (elt nlist i)) place            (newnote-pitchname (elt nlist i)) (qp2pn (newnote-index (elt nlist i))                                                     (newnote-pitchlh (elt nlist i)))))    nlist    ))(defun lhpitchspell4 (nlist)  (let* (tune ints x0 place j)    (setf tune nil)    (dotimes (i (list-length nlist))      (setf tune (append tune (list (newnote-pitchlh (elt nlist i))))))    (setf ints (intervals tune))    (setf x0 (elt nlist 0))    (setf place (intlh (newnote-pitchlh x0)))    (setf j 0)    (dotimes (i (list-length nlist))      (setf (newnote-span (elt nlist i))            (- (newnote-pitchlh (elt nlist i))               (newnote-pitchlh x0)))      (if (zerop (mod (newnote-span (elt nlist i)) 12))        (setf (newnote-deg (elt nlist i)) 0)        (setf (newnote-deg (elt nlist i)) (elt ints j)              j (1+ j)))      (setf x0 (elt nlist i)))    (dotimes (i (list-length nlist))      (setf place (+ place (newnote-deg (elt nlist i)))            (newnote-enh (elt nlist i)) nil)      (setf (newnote-index (elt nlist i)) place            (newnote-pitchname (elt nlist i)) (qp2pn (newnote-index (elt nlist i))                                                     (newnote-pitchlh (elt nlist i)))))    nlist    ))(defun lhpitchspell5 (nlist)  (let* (tune ints x0 place j)    (setf tune nil)    (dotimes (i (list-length nlist))      (setf tune (append tune (list (newnote-pitchlh (elt nlist i))))))    (setf ints (intervals2 tune))    (setf x0 (elt nlist 0))    (setf place (intlh (newnote-pitchlh x0)))    (setf j 0)    (dotimes (i (list-length nlist))      (setf (newnote-span (elt nlist i))            (- (newnote-pitchlh (elt nlist i))               (newnote-pitchlh x0)))      (if (zerop (mod (newnote-span (elt nlist i)) 12))        (setf (newnote-deg (elt nlist i)) 0)        (setf (newnote-deg (elt nlist i)) (elt ints j)              j (1+ j)))      (setf x0 (elt nlist i)))    (dotimes (i (list-length nlist))      (setf place (+ place (newnote-deg (elt nlist i)))            (newnote-enh (elt nlist i)) nil)      (setf (newnote-index (elt nlist i)) place            (newnote-pitchname (elt nlist i)) (qp2pn (newnote-index (elt nlist i))                                                     (newnote-pitchlh (elt nlist i)))))    nlist    ))(defun lhpitchspell6 (nlist)  (let* (tune ints x0 place j )    (setf tune nil)    (dotimes (i (list-length nlist))      (setf tune (append tune (list (newnote-pitchlh (elt nlist i))))))    (setf ints (intervals3 tune))    (setf x0 (elt nlist 0))    (setf place (intlh (newnote-pitchlh x0)))    (setf j 0)    (dotimes (i (list-length nlist))      (setf (newnote-span (elt nlist i))            (- (newnote-pitchlh (elt nlist i))               (newnote-pitchlh x0)))      (if (zerop (mod (newnote-span (elt nlist i)) 12))        (setf (newnote-deg (elt nlist i)) 0)        (setf (newnote-deg (elt nlist i)) (elt ints j)              j (1+ j)))      (setf x0 (elt nlist i)))    (dotimes (i (list-length nlist))      (setf place (+ place (newnote-deg (elt nlist i)))            (newnote-enh (elt nlist i)) nil)      (setf (newnote-index (elt nlist i)) place            (newnote-pitchname (elt nlist i)) (qp2pn (newnote-index (elt nlist i))                                                     (newnote-pitchlh (elt nlist i)))))    nlist    ))(defun qp2pn (q p)  (let (i p-dashed o c istr j ostr lstr)    (setf i (floor (1+ q) 7)          p-dashed (- p i)          o (+ 3 (floor p-dashed 12)))    (if (> i 0)      (setf c "s")      (setf c "f"))    (setf istr ""          j 1)    (do ()        ((> j (abs i)))      (setf istr (concatenate 'string istr c)            j (1+ j)))    (setf ostr (num2str o)          lstr (elt '("C" "D" "E" "F" "G" "A" "B") (mod (* 4 q) 7)))    (concatenate 'string lstr istr ostr)))(defun num2str (n)  (format nil (if (integerp n) "~d" "~f") n))(defun intlh (x)  (- (mod (+ (* 7 x) 5) 12) 5))(defun intervals (tune)  (let (x y z j k l m n flag ints)    (setf tune (simplify tune)          flag nil          ints nil          y (elt tune 0)          j 1)    (if (< j (list-length tune))           (progn              (setf z (elt tune j)                   j (1+ j)                   k y                   m 0                   n (intlh (- z k)))             (if (or (= n 3) (and (< n 0) (/= n -3)))               (setf k (+ 5 k)                     m 1                     n (1+ n)))             (do ()                 ((>= j (list-length tune)))               (setf x y                     y z                     z (elt tune j)                     j (1+ j)                     l m                     m n                     n (intlh (- z k)))               (if (and flag (> (abs (- n l)) 6))                 (progn (if (> m 2)                          (setf k (1- y)))                        (if (< m -1)                          (setf k (+ 6 y)))                        (if (or (> m 2) (< m -1))                          (setf l (intlh (- x k))                                m (intlh (- y k))                                n (intlh (- z k))))))               (setf flag nil)               (if (> (abs (- n m)) 6)                 (if (> (abs (- m l)) 6)                   (progn (if (> m 2)                            (setf k (1- y)))                          (if (< m -1)                            (setf k (+ 6 y)))                          (if (or (> m 2) (< m -1))                            (setf l (intlh (- x k))                                  m (intlh (- y k))                                  n (intlh (- z k)))))                   (if (and (> (abs (- n l)) 6) (< l 7))                     (setf flag t)                     (if (and (= (- n m) 7) (< n 6))                       (setf m (+ m 12))))))               (setf ints (append ints (list (- m l)))))             (append ints (list (- n m)))))))(defun intervals2 (tune)  (let (x y z j k l m n flag ints)    (setf tune (simplify tune)          flag nil          ints nil          y (elt tune 0)          j 1)    (if (< j (list-length tune))           (progn              (setf z (elt tune j)                   j (1+ j)                   k y                   m 0                   n (intlh (- z k)))             (if (or (= n 3) (and (< n 0) (/= n -3)))               (setf k (+ 5 k)                     m 1                     n (1+ n)))             (do ()                 ((>= j (list-length tune)))               (setf x y                     y z                     z (elt tune j)                     j (1+ j)                     l m                     m n                     n (intlh (- z k)))               (if (and flag (> (abs (- n l)) 6))                 (progn (if (> m 2)                          (setf k (1- y)))                        (if (< m 0)                          (setf k (+ 6 y)))                        (if (or (> m 2) (< m 0))                          (setf l (intlh (- x k))                                m (intlh (- y k))                                n (intlh (- z k))))))               (setf flag nil)               (if (> (abs (- n m)) 6)                 (if (> (abs (- m l)) 6)                   (progn (if (> m 2)                            (setf k (1- y)))                          (if (< m 0)                            (setf k (+ 6 y)))                          (if (or (> m 2) (< m 0))                            (setf l (intlh (- x k))                                  m (intlh (- y k))                                  n (intlh (- z k)))))                   (if (and (> (abs (- n l)) 6) (< l 7))                     (setf flag t)                     (if (and (= (- n m) 7) (< n 6))                       (setf m (+ m 12))))))               (setf ints (append ints (list (- m l)))))             (append ints (list (- n m)))))))(defun intervals3 (tune)  (let (x y z j k l m n flag ints)    (setf tune (simplify tune)          flag nil          ints nil          y (elt tune 0)          j 1)    (if (< j (list-length tune))           (progn              (setf z (elt tune j)                   j (1+ j)                   k y                   m 0                   n (intlh (- z k)))             (if (or (= n 3) (and (< n 0) (/= n -3)))               (setf k (+ 5 k)                     m 1                     n (1+ n)))             (do ()                 ((>= j (list-length tune)))               (setf x y                     y z                     z (elt tune j)                     j (1+ j)                     l m                     m n                     n (intlh (- z k)))               (if (and flag (> (abs (- n l)) 6))                 (progn (if (> m 1)                          (setf k (1- y)))                        (if (< m 0)                          (setf k (+ 6 y)))                        (if (or (> m 1) (< m 0))                          (setf l (intlh (- x k))                                m (intlh (- y k))                                n (intlh (- z k))))))               (setf flag nil)               (if (> (abs (- n m)) 6)                 (if (> (abs (- m l)) 6)                   (progn (if (> m 1)                            (setf k (1- y)))                          (if (< m 0)                            (setf k (+ 6 y)))                          (if (or (> m 1) (< m 0))                            (setf l (intlh (- x k))                                  m (intlh (- y k))                                  n (intlh (- z k)))))                   (if (and (> (abs (- n l)) 6) (< l 7))                     (setf flag t)                     (if (and (= (- n m) 7) (< n 6))                       (setf m (+ m 12))))))               (setf ints (append ints (list (- m l)))))             (append ints (list (- n m)))))))(defun simplify (tune)  (let (y newtune)    (setf y (- (elt tune 0) 1)          newtune nil)    (dotimes (i (list-length tune))      (if (> (mod (- (elt tune i) y) 12) 0)        (setf newtune (append newtune (list (elt tune i)))))      (setf y (elt tune i)))    newtune));;;;;;;;;;;#|Rest of file is implementation specific.|#(defun batch-lhpitchspell-opndfile (algorithm-version                                    &optional                                    (voices-separately nil)                                    (file-prefix "")                                    (input-file-directory (choose-directory-dialog :button-string "INPUT"))                                    )  (let* ((opndfile-list (directory (make-pathname :directory (pathname-directory input-file-directory)                                                  :name (concatenate 'string file-prefix "*")                                                  :type "opnd-m")))         (total-number-of-errors 0)         (total-number-of-notes 0)         (number-of-errors 0)         (number-of-notes 0))    (mapcar #'(lambda (opndfile)                (multiple-value-setq (number-of-errors                                      number-of-notes)                  (lhpitchspell-opndfile algorithm-version                                         voices-separately                                         opndfile))                (setf total-number-of-errors (+ total-number-of-errors number-of-errors)                      total-number-of-notes (+ total-number-of-notes number-of-notes)))            opndfile-list)    (format t "~%Total number of notes = ~d~%" total-number-of-notes)    (format t "Total number of errors = ~d~%" total-number-of-errors)    (format t "Percentage correct = ~,2f%~%" (* 100 (- 1 (/ total-number-of-errors total-number-of-notes))))))(defun lhpitchspell-opndfile (algorithm-version                              &optional                               (voices-separately nil)                              (opndfile (choose-file-dialog :button-string "OPND"))                              )  (let* ((opndfile-pathname (pathname opndfile))         (opnd (sort (read-file opndfile) (if voices-separately                                            #'(lambda (opnd-datapoint1 opnd-datapoint2)                                                (or (< (fourth opnd-datapoint1)                                                       (fourth opnd-datapoint2))                                                    (opnd-less-than-p opnd-datapoint1 opnd-datapoint2)))                                            #'opnd-less-than-p)))         (output-filename (make-pathname :directory (pathname-directory opndfile-pathname)                                         :name (pathname-name opndfile-pathname)                                         :type (concatenate 'string                                                            "lh"                                                            (format nil "~d" algorithm-version)                                                            (if voices-separately "v" ""))))         (computed-spelling-p1 (let* ((sorted-opndv opnd)                                      (sorted-nlist (opnd2nlist sorted-opndv :sorted t)))                                 (nlist2opndv (case algorithm-version                                                (1 (lhpitchspell1 sorted-nlist))                                                (2 (lhpitchspell2 sorted-nlist))                                                (3 (lhpitchspell3 sorted-nlist))                                                (4 (lhpitchspell4 sorted-nlist))                                                (5 (lhpitchspell5 sorted-nlist))                                                (6 (lhpitchspell6 sorted-nlist)))                                              sorted-opndv)))         (error-list-p1 (remove-if #'null                                 (mapcar #'(lambda (opnd-datapoint1 opnd-datapoint2)                                           (if (not (opnd-datapoint-equal-p opnd-datapoint1 opnd-datapoint2))                                             (list opnd-datapoint1 opnd-datapoint2)))                                        opnd                                        computed-spelling-p1)))         (number-of-errors-p1 (list-length error-list-p1))         (best-spelling computed-spelling-p1)         (number-of-errors number-of-errors-p1)         (transposition 'p1)         (error-list error-list-p1)         ;NOW FOR RD2         (computed-spelling-rd2 (mapcar #'(lambda (opnd-datapoint)                                            (append (list (first opnd-datapoint)                                                          (pn-tran (second opnd-datapoint)                                                                   'rd2))                                                    (cddr opnd-datapoint)))                                        computed-spelling-p1))         (error-list-rd2 (remove-if #'null                                     (mapcar #'(lambda (opnd-datapoint1 opnd-datapoint2)                                               (if (not (opnd-datapoint-equal-p opnd-datapoint1 opnd-datapoint2))                                                 (list opnd-datapoint1 opnd-datapoint2)))                                            opnd                                            computed-spelling-rd2)))         (number-of-errors-rd2 (list-length error-list-rd2))         (best-spelling (if (< number-of-errors-rd2 number-of-errors)                          computed-spelling-rd2                          best-spelling))                  (transposition (if (< number-of-errors-rd2 number-of-errors)                             'rd2                             transposition))         (error-list (if (< number-of-errors-rd2 number-of-errors)                             error-list-rd2                             error-list))         (number-of-errors (if (< number-of-errors-rd2 number-of-errors)                             number-of-errors-rd2                             number-of-errors))         ;NOW for FD2         (computed-spelling-fd2 (mapcar #'(lambda (opnd-datapoint)                                            (append (list (first opnd-datapoint)                                                          (pn-tran (second opnd-datapoint)                                                                   'fd2))                                                    (cddr opnd-datapoint)))                                        computed-spelling-p1))         (error-list-fd2 (remove-if #'null                                     (mapcar #'(lambda (opnd-datapoint1 opnd-datapoint2)                                               (if (not (opnd-datapoint-equal-p opnd-datapoint1 opnd-datapoint2))                                                 (list opnd-datapoint1 opnd-datapoint2)))                                            opnd                                            computed-spelling-fd2)))         (number-of-errors-fd2 (list-length error-list-fd2))         (best-spelling (if (< number-of-errors-fd2 number-of-errors)                          computed-spelling-fd2                          best-spelling))         (transposition (if (< number-of-errors-fd2 number-of-errors)                             'fd2                             transposition))         (error-list (if (< number-of-errors-fd2 number-of-errors)                             error-list-fd2                             error-list))         (number-of-errors (if (< number-of-errors-fd2 number-of-errors)                             number-of-errors-fd2                             number-of-errors))         ;;;;;;;;;;;;         (percentage-correct (* 100 (- 1 (/ number-of-errors (list-length opnd)))))         )    (write-file best-spelling output-filename)    (format t "~%~%Algorithm: LHPitchSpell~d~%" algorithm-version)    (format t "FILE: ~s~%" (pathname-name opndfile))    (format t "Number of errors = ~d~%" number-of-errors)    (format t "Number of notes = ~d~%" (list-length opnd))    (format t "Percentage correct = ~,2f%~%" percentage-correct)    (format t "Best spelling obtained when computed spelling transposed by ~a.~%" transposition)    (format t "ERROR LIST:")    (pprint error-list)    (values number-of-errors            (list-length opnd))))(defun opnd2nlist (opnd &key (sorted t))  (let* ((opnd (if sorted                 opnd                 (sort opnd #'opnd-less-than-p))))    (mapcar #'(lambda (opnd-datapoint)                (make-newnote :pitchlh (- (first (pn-p (second opnd-datapoint))) 27)                              :onset (first opnd-datapoint)                              :offset (+ (first opnd-datapoint) (third opnd-datapoint))                              :span nil                              :deg nil                              :index nil                              :enh nil                              :pitchname nil))            opnd)))(defun nlist2opndv (sorted-nlist sorted-opndv)  (mapcar #'(lambda (note opndv-datapoint)              (append (list (first opndv-datapoint)                            (newnote-pitchname note))                      (cddr opndv-datapoint)))          sorted-nlist          sorted-opndv))#|;another version defined in ps-dphil-musedata.lisp(defun pn-p (pn-as-input)  (let* ((n (if (stringp pn-as-input)              (string-upcase pn-as-input)              (string-upcase (string pn-as-input))))         (n (if (and (>= (length n) 2)                     (or (eq (elt n 1) #\-)                         (digit-char-p (elt n 1))))              (concatenate 'string                            (string (elt n 0))                           "N"                           (subseq n 1))              n))         (n (substitute #\S #\# n :start 1))         (n (substitute #\F #\B n :start 1))         (l (string (elt n 0)))         (i (remove-if #'(lambda (c)                            (or (eq c #\-)                               (digit-char-p c)))                       (subseq n 1)))         (o (remove-if-not #'(lambda (c)                                (or (eq c #\-)                                   (digit-char-p c)))                           (subseq n 1)))         (oasa (read-from-string o))         (m (position l                      '("A" "B" "C" "D" "E" "F" "G")                      :test #'equalp))         (cdash (elt '(0 2 3 5 7 8 10) m))         (e (cond ((string= i "N") 0)                  ((eq (elt i 0) #\F) (* -1 (length i)))                  ((eq (elt i 0) #\S) (length i))))         (om (if (< m 2)               oasa                (- oasa 1)))         (pc (+ e cdash (* 12 om)))         (pm (+ m (* om 7))))    (list pc pm)))|##|(dotimes (o 6)  (dolist (l '(a b c d e f g))    (dolist (i '("" "n" "#" "s" "f" "b" "##" "ss" "ff" "bb" "###" "sss" "fff" "bbb"))      (let ((pn (concatenate 'string                              (string l)                             i                             (format nil "~d" (- o 3)))))        (pprint (list pn                      (pn-p pn)))))))|#(defun opnd-less-than-p (opnd-datapoint1 opnd-datapoint2)  (let* ((p1 (pn-p (second opnd-datapoint1)))         (p2 (pn-p (second opnd-datapoint2)))         (vector1 (append (list (first opnd-datapoint1)                                (first p1))                          (cddr opnd-datapoint1)                          (list (second p1))))         (vector2 (append (list (first opnd-datapoint2)                                (first p2))                          (cddr opnd-datapoint2)                          (list (second p2)))))    (vector-less-than-p vector1 vector2)))(defun read-file (&optional (filename (choose-file-dialog)))  (with-open-file (filestream                   filename)    (read filestream)))(defun write-file (object filename)  (with-open-file (filestream                   filename                   :direction :output                   :if-exists :rename-and-delete)    (pprint object filestream)))(defun opndv2listofvoices (opndv)  (let* ((sorted-opndv (sort opndv #'< :key #'fourth))         (new-voice-indices (let* ((nvi nil))                              (dotimes (i (list-length sorted-opndv) (reverse nvi))                                (if (or (zerop i)                                        (> (fourth (elt sorted-opndv i))                                            (fourth (elt sorted-opndv (1- i)))))                                  (setf nvi                                        (cons i nvi))))))         (list-of-voices (let* ((lov nil)                                (l (list-length new-voice-indices)))                           (dotimes (i l (reverse lov))                             (setf lov (cons (subseq sorted-opndv                                                     (elt new-voice-indices i)                                                     (if (< (1+ i) l)                                                       (elt new-voice-indices (1+ i))                                                       (list-length sorted-opndv)))                                             lov))))))    list-of-voices))#|;another version defined in ps-dphil-test.lisp(defun compare-opndv-files (&optional                            (opndvfile1 (choose-file-dialog :button-string "OPNDV1"))                             (opndvfile2 (choose-file-dialog :button-string "OPNDV2")))  (let* ((sorted-opndv1 (sort (read-file opndvfile1) #'opnd-less-than-p))         (sorted-opndv2 (sort (read-file opndvfile2) #'opnd-less-than-p))         (list-of-differences (remove-if #'null                                         (mapcar #'(lambda (opndv-datapoint1                                                            opndv-datapoint2)                                                     (if (opnd-datapoint-equal-p opndv-datapoint1                                                                       opndv-datapoint2)                                                       nil                                                       (list opndv-datapoint1                                                             opndv-datapoint2)))                                                 sorted-opndv1                                                 sorted-opndv2)))         (number-of-differences (list-length list-of-differences))         (total-number-of-datapoints (list-length sorted-opndv1))         (percentage-same (* 100.0 (- 1 (/ number-of-differences total-number-of-datapoints)))))    (format t "File 1: ~a~%File 2: ~a~%Total number of datapoints = ~d~%Number of differences = ~d~%Percentage same = ~,2f%~%"            opndvfile1            opndvfile2            total-number-of-datapoints            number-of-differences            percentage-same)    list-of-differences))|##|;defined in ps-dphil-test.lisp(defun opnd-datapoint-equal-p (opnd-datapoint1 opnd-datapoint2)  (let* ((opd1 (append (list (first opnd-datapoint1))                       (pn-p (second opnd-datapoint1))                       (cddr opnd-datapoint1)))         (opd2 (append (list (first opnd-datapoint2))                       (pn-p (second opnd-datapoint2))                       (cddr opnd-datapoint2))))    (equalp opd1 opd2)))|#(defun opnd-dataset-equal-p (opnd-dataset1 opnd-dataset2)  (every #'opnd-datapoint-equal-p opnd-dataset1 opnd-dataset2))#|;defined in ps-dphil-intro.lisp(defun pn-tran (pitch-name pitch-interval-name)  (p-pn (p-tran (pn-p pitch-name) (pin-pi pitch-interval-name))))|##|(progn (setf input-directory (choose-directory-dialog))       ;(batch-lhpitchspell-opndfile 1 nil "" input-directory)       ;(batch-lhpitchspell-opndfile 1 t "" input-directory)       ;(batch-lhpitchspell-opndfile 2 nil "" input-directory)       ;(batch-lhpitchspell-opndfile 2 t "" input-directory)       ;(batch-lhpitchspell-opndfile 3 nil "" input-directory)       ;(batch-lhpitchspell-opndfile 3 t "" input-directory)       ;(batch-lhpitchspell-opndfile 4 nil "" input-directory)       ;(batch-lhpitchspell-opndfile 4 t "" input-directory)       ;(batch-lhpitchspell-opndfile 5 nil "" input-directory)       ;(batch-lhpitchspell-opndfile 5 t "" input-directory)       (batch-lhpitchspell-opndfile 6 nil "" input-directory)       (batch-lhpitchspell-opndfile 6 t "" input-directory))Started: 11:45 Saturday 7 Feb 2004(lhpitchspell-opndfile 1 t)|##|Need to check that output generated by (batch-lhpitchspell-opndfile 1 nil "" input-directory)is the same as that generated by implementation in longuet-higgins2.lisp.|##|(progn (setf data-directory (choose-directory-dialog :button-string "DATA"))       (setf output-directory (choose-directory-dialog :button-string "OUTPUT"))       (batch-compare-spellings "opnd-m" "lh1" :verbose t :file-prefix "" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1v" :verbose t :file-prefix "" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2" :verbose t :file-prefix "" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2v" :verbose t :file-prefix "" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3" :verbose t :file-prefix "" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3v" :verbose t :file-prefix "" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4" :verbose t :file-prefix "" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4v" :verbose t :file-prefix "" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5" :verbose t :file-prefix "" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5v" :verbose t :file-prefix "" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6" :verbose t :file-prefix "" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6v" :verbose t :file-prefix "" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory))(progn (setf data-directory (choose-directory-dialog :button-string "DATA"))       (setf output-directory (choose-directory-dialog :button-string "OUTPUT"))       (batch-compare-spellings "opnd-m" "lh1" :verbose t :file-prefix "bach" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1" :verbose t :file-prefix "beet" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1" :verbose t :file-prefix "corell" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1" :verbose t :file-prefix "haydn" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1" :verbose t :file-prefix "handel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1" :verbose t :file-prefix "marcel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1" :verbose t :file-prefix "mozart" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1" :verbose t :file-prefix "telema" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1" :verbose t :file-prefix "vivald" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1v" :verbose t :file-prefix "bach" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1v" :verbose t :file-prefix "beet" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1v" :verbose t :file-prefix "corell" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1v" :verbose t :file-prefix "haydn" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1v" :verbose t :file-prefix "handel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1v" :verbose t :file-prefix "marcel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1v" :verbose t :file-prefix "mozart" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1v" :verbose t :file-prefix "telema" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh1v" :verbose t :file-prefix "vivald" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)              (batch-compare-spellings "opnd-m" "lh2" :verbose t :file-prefix "bach" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2" :verbose t :file-prefix "beet" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2" :verbose t :file-prefix "corell" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2" :verbose t :file-prefix "haydn" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2" :verbose t :file-prefix "handel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2" :verbose t :file-prefix "marcel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2" :verbose t :file-prefix "mozart" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2" :verbose t :file-prefix "telema" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2" :verbose t :file-prefix "vivald" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2v" :verbose t :file-prefix "bach" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2v" :verbose t :file-prefix "beet" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2v" :verbose t :file-prefix "corell" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2v" :verbose t :file-prefix "haydn" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2v" :verbose t :file-prefix "handel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2v" :verbose t :file-prefix "marcel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2v" :verbose t :file-prefix "mozart" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2v" :verbose t :file-prefix "telema" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh2v" :verbose t :file-prefix "vivald" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)              (batch-compare-spellings "opnd-m" "lh3" :verbose t :file-prefix "bach" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3" :verbose t :file-prefix "beet" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3" :verbose t :file-prefix "corell" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3" :verbose t :file-prefix "haydn" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3" :verbose t :file-prefix "handel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3" :verbose t :file-prefix "marcel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3" :verbose t :file-prefix "mozart" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3" :verbose t :file-prefix "telema" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3" :verbose t :file-prefix "vivald" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3v" :verbose t :file-prefix "bach" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3v" :verbose t :file-prefix "beet" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3v" :verbose t :file-prefix "corell" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3v" :verbose t :file-prefix "haydn" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3v" :verbose t :file-prefix "handel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3v" :verbose t :file-prefix "marcel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3v" :verbose t :file-prefix "mozart" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3v" :verbose t :file-prefix "telema" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh3v" :verbose t :file-prefix "vivald" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4" :verbose t :file-prefix "bach" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4" :verbose t :file-prefix "beet" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4" :verbose t :file-prefix "corell" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4" :verbose t :file-prefix "haydn" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4" :verbose t :file-prefix "handel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4" :verbose t :file-prefix "marcel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4" :verbose t :file-prefix "mozart" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4" :verbose t :file-prefix "telema" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4" :verbose t :file-prefix "vivald" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4v" :verbose t :file-prefix "bach" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4v" :verbose t :file-prefix "beet" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4v" :verbose t :file-prefix "corell" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4v" :verbose t :file-prefix "haydn" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4v" :verbose t :file-prefix "handel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4v" :verbose t :file-prefix "marcel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4v" :verbose t :file-prefix "mozart" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4v" :verbose t :file-prefix "telema" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh4v" :verbose t :file-prefix "vivald" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)              (batch-compare-spellings "opnd-m" "lh5" :verbose t :file-prefix "bach" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5" :verbose t :file-prefix "beet" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5" :verbose t :file-prefix "corell" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5" :verbose t :file-prefix "haydn" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5" :verbose t :file-prefix "handel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5" :verbose t :file-prefix "marcel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5" :verbose t :file-prefix "mozart" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5" :verbose t :file-prefix "telema" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5" :verbose t :file-prefix "vivald" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5v" :verbose t :file-prefix "bach" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5v" :verbose t :file-prefix "beet" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5v" :verbose t :file-prefix "corell" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5v" :verbose t :file-prefix "haydn" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5v" :verbose t :file-prefix "handel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5v" :verbose t :file-prefix "marcel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5v" :verbose t :file-prefix "mozart" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5v" :verbose t :file-prefix "telema" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh5v" :verbose t :file-prefix "vivald" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)              (batch-compare-spellings "opnd-m" "lh6" :verbose t :file-prefix "bach" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6" :verbose t :file-prefix "beet" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6" :verbose t :file-prefix "corell" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6" :verbose t :file-prefix "haydn" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6" :verbose t :file-prefix "handel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6" :verbose t :file-prefix "marcel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6" :verbose t :file-prefix "mozart" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6" :verbose t :file-prefix "telema" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6" :verbose t :file-prefix "vivald" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6v" :verbose t :file-prefix "bach" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6v" :verbose t :file-prefix "beet" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6v" :verbose t :file-prefix "corell" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6v" :verbose t :file-prefix "haydn" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6v" :verbose t :file-prefix "handel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6v" :verbose t :file-prefix "marcel" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6v" :verbose t :file-prefix "mozart" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6v" :verbose t :file-prefix "telema" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory)       (batch-compare-spellings "opnd-m" "lh6v" :verbose t :file-prefix "vivald" :data-directory1 data-directory :data-directory2 data-directory :output-directory output-directory))|#(defun batch-compare-spellings (file-suffix1                                 file-suffix2 &key                                (verbose nil)                                (file-prefix "")                                (data-directory1 (choose-directory-dialog :button-string "DIR 1"))                                (data-directory2 (choose-directory-dialog :button-string "DIR 2"))                                (output-directory (choose-directory-dialog :button-string "OUTPUT")))  (let* ((output-filename (make-pathname :directory (pathname-directory output-directory)                                         :name (concatenate 'string file-suffix1 "-" file-suffix2                                                             (if (string/= "" file-prefix) (concatenate 'string "-" file-prefix) ""))                                         :type "bcs")))    (format t "~%~a..." output-filename)    (with-open-file (output-stream                     output-filename                     :direction :output                     :if-exists :rename-and-delete)      (let* ((file-list1 (directory (make-pathname :directory (pathname-directory data-directory1)                                                   :name (concatenate 'string file-prefix "*")                                                   :type file-suffix1)))             (file-list2 (directory (make-pathname :directory (pathname-directory data-directory2)                                                   :name (concatenate 'string file-prefix "*")                                                   :type file-suffix2)))             (number-of-files-in-file-list1 (list-length file-list1))             (number-of-files-in-file-list2 (list-length file-list2))             (total-number-of-differences 0)             (total-number-of-notes 0))        (if (/= number-of-files-in-file-list1                number-of-files-in-file-list2)          (format output-stream "Number of files in directories unequal (DIR 1: ~d; DIR 2: ~d)"                   number-of-files-in-file-list1                  number-of-files-in-file-list2)          (dotimes (i number-of-files-in-file-list1                      (format output-stream "File suffix 1: ~aFile suffix 2: ~aFile prefix: ~aDirectory 1: ~aDirectory 2: ~aTotal number of differences: ~dTotal number of files checked: ~dTotal number of notes: ~dPercentage of notes the same: ~,2f%"                              file-suffix1                              file-suffix2                              file-prefix                              data-directory1                              data-directory2                              total-number-of-differences                              number-of-files-in-file-list1                              total-number-of-notes                              (* 100.0 (- 1 (/ total-number-of-differences total-number-of-notes)))))            (let* ((opnd1 (sort (read-file (elt file-list1 i)) #'opnd-less-than-p))                   (opnd2 (sort (read-file (elt file-list2 i)) #'opnd-less-than-p))                   (number-of-notes (list-length opnd1)))              (if (= number-of-notes (list-length opnd2))                (let* ((difference-list (remove-if #'null                                                    (mapcar #'(lambda (opnd-datapoint1 opnd-datapoint2)                                                               (unless (opnd-datapoint-equal-p opnd-datapoint1 opnd-datapoint2)                                                                 (list opnd-datapoint1 opnd-datapoint2)))                                                           opnd1 opnd2)))                       (number-of-differences (list-length difference-list)))                  (setf total-number-of-differences                        (+ total-number-of-differences                           number-of-differences)                        total-number-of-notes                        (+ total-number-of-notes                           number-of-notes))                  (if (or difference-list verbose)                    (progn (format output-stream "File 1: ~aFile 2: ~aNumber of differences: ~dNumber of notes: ~dPercentage of notes the same: ~,2f%Difference list:"                                   (elt file-list1 i)                                   (elt file-list2 i)                                   number-of-differences                                   number-of-notes                                   (* 100.0 (- 1 (/ number-of-differences number-of-notes))))                           (pprint difference-list output-stream))                    (format output-stream ".")))                (progn (format output-stream "ERROR: Number of notes unequal in corresponding filesFile 1: ~aFile 2: ~aNumber of notes in File 1: ~dNumber of notes in File 2: ~d"                               (elt file-list1 i)                               (elt file-list2 i)                               number-of-notes                               (list-length opnd2))                       (abort)))))          )))    (format t "DONE")    ))#|? (batch-compare-spellings "lh2" "lh1").......................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................File suffix 1: lh2File suffix 2: lh1File prefix 1: File prefix 2: Directory 1: hd:Users:dave:Documents:files:Musedata:20030918opnd-m:Directory 2: hd:Users:dave:Documents:files:Musedata:20040205opnd-m:Total number of differences: 0Total number of files checked: 1655NIL? |#