;ps-dphil-chewchen.lisp(defstruct ccnote  onset  duration  midi  index  sa-vector  pn  parent-ccnote)(defstruct chunk  ccnote-list  duration  sum-pd)(defun ccnotelist2opndv-2 (input-ccnotelist                           output-ccnotelist                           sorted-input-opndv-dataset)  input-ccnotelist  (ccnotelist2opndv output-ccnotelist                    sorted-input-opndv-dataset                    t))(defun ccnotelist2opndv (ccnote-list                         &optional                         (input-filename (choose-file-dialog :button-string "OPND-M"))                         (sorted-opndv-dataset nil))  (let* ((original-opndv-dataset (if sorted-opndv-dataset                                   input-filename                                   (sort-by-onset (read-dataset input-filename))))         (original-onset-midi-duration-list (mapcar #'(lambda (opndv-datapoint)                                                        (list (first opndv-datapoint)                                                              (pn2midi (second opndv-datapoint))                                                              (third opndv-datapoint)))                                                    original-opndv-dataset))         (test-onset-midi-duration-list (mapcar #'(lambda (ccnote)                                                   (list (ccnote-onset ccnote)                                                         (ccnote-midi ccnote)                                                         (ccnote-duration ccnote)))                                                ccnote-list)))    (if (equalp original-onset-midi-duration-list                test-onset-midi-duration-list)      (let* ((output-pitch-names-p1 (mapcar #'ccnote-pn ccnote-list))             (output-pitch-names-rd2 (mapcar #'(lambda (pitch-name)                                             (pn-tran pitch-name "rd2"))                                         output-pitch-names-p1))             (output-pitch-names-fd2 (mapcar #'(lambda (pitch-name)                                                 (pn-tran pitch-name "fd2"))                                             output-pitch-names-p1))             (input-pitch-names (mapcar #'second original-opndv-dataset))             (error-number-list (list                                  ;number of errors for p1                                 (count nil (mapcar #'pitch-name-equal-p input-pitch-names output-pitch-names-p1))                                 ;number of errors for rd2                                 (count nil (mapcar #'pitch-name-equal-p input-pitch-names output-pitch-names-rd2))                                 ;number of errors for fd2                                 (count nil (mapcar #'pitch-name-equal-p input-pitch-names output-pitch-names-fd2))                                 ))             (pitch-names (elt                            (list output-pitch-names-p1                                 output-pitch-names-rd2                                 output-pitch-names-fd2)                           (position (apply #'min error-number-list)                                     error-number-list))))        (mapcar #'(lambda (opndv-datapoint pitch-name)                    (append (list (first opndv-datapoint))                            (list pitch-name)                            (cddr opndv-datapoint)))                original-opndv-dataset                pitch-names))      (progn (format t "~%ERROR: chewchen output not compatible with input opndv.")             (abort)))))(defun batch-chewchen (algorithm                       output-type                       &key (input-directory (choose-directory-dialog :button-string "INPUT"))                            (output-directory (choose-directory-dialog :button-string output-type))                            (results-directory (choose-directory-dialog :button-string "RESULTS")))  (let* ((list-of-input-filenames (directory (make-pathname :directory (pathname-directory input-directory)                                                            :name :wild                                                            :type "opnd-m")))         (list-of-output-filenames (mapcar #'(lambda (input-filename)                                               (make-pathname :directory (pathname-directory output-directory)                                                              :name (pathname-name input-filename)                                                              :type output-type))                                           list-of-input-filenames)))    (mapcar #'(lambda (input-filename                       output-filename)                (with-open-file (output-stream                                 output-filename                                 :direction :output                                 :if-exists :rename-and-delete)                  (format t "~%~a..." (pathname-name input-filename))                  (pprint (ccnotelist2opndv (funcall algorithm input-filename)                                            input-filename)                          output-stream)                  (format t "DONE")))            list-of-input-filenames            list-of-output-filenames)    (print-results-for-algorithm "opnd-m" output-type                                 input-directory                                 output-directory                                 results-directory)))#|cc01====- Uses one set of best values of ws, wr and f for Beethoven Op.109 on page 23 of ChewChenCMJ.- uses r/h of (sqrt (/ 2 15)) as specified on page 12 of ChewChenCMJ- uses chunk size of 1000 which corresponds to a second in opnd-m from nts- uses range of spiral array specified on page 13 of ChewChenCMJ- each chunk contains the notes that start in that chunk, not the notes that sound in that chunk- uses spiral array not line of fifths|#(defun cc01 (&optional (input-filename (choose-file-dialog :button-string "OPND-M")))  (chewchen :ws 4            :wr 3            :f .7            :r (sqrt (/ 2 15))            :h 1            :chunk-size 1000            :min-sa-index -15            :max-sa-index 19            :ccnote-list (opndv2ccnotelist input-filename)            :starting-or-sounding 'starting            :sa-or-lof 'sa))#|cc02====Same as cc01 except uses line of fifths instead of spiral array.|#(defun cc02 (&optional (input-filename (choose-file-dialog :button-string "OPND-M")))  (chewchen :ws 4            :wr 3            :f .7            :r (sqrt (/ 2 15))            :h 1            :chunk-size 1000            :min-sa-index -15            :max-sa-index 19            :ccnote-list (opndv2ccnotelist input-filename)            :starting-or-sounding 'starting            :sa-or-lof 'lof))#|cc03====Same as cc01 except uses sounding instead of starting.|#(defun cc03 (&optional (input-filename (choose-file-dialog :button-string "OPND-M")))  (chewchen :ws 4            :wr 3            :f .7            :r (sqrt (/ 2 15))            :h 1            :chunk-size 1000            :min-sa-index -15            :max-sa-index 19            :ccnote-list (opndv2ccnotelist input-filename)            :starting-or-sounding 'sounding            :sa-or-lof 'sa))#|cc04====Cumulative window as described on page 18 of ChewChenCMJ.ws = 0, f = 0.Other values same as for cc01.|#(defun cc04 (&optional (input-filename (choose-file-dialog :button-string "OPND-M")))  (chewchen :ws 0            :wr 3            :f 0            :r (sqrt (/ 2 15))            :h 1            :chunk-size 1000            :min-sa-index -15            :max-sa-index 19            :ccnote-list (opndv2ccnotelist input-filename)            :starting-or-sounding 'starting            :sa-or-lof 'sa))#|cc05====Sliding window as described on page 18 of ChewChenCMJ.wr = 0, f = 1.Other values as for cc01.|#(defun cc05 (&optional (input-filename (choose-file-dialog :button-string "OPND-M")))  (chewchen :ws 4            :wr 0            :f 1            :r (sqrt (/ 2 15))            :h 1            :chunk-size 1000            :min-sa-index -15            :max-sa-index 19            :ccnote-list (opndv2ccnotelist input-filename)            :starting-or-sounding 'starting            :sa-or-lof 'sa))#|cc06====Sliding window as described on page 18 of ChewChenCMJ.wr = 0, f = 1.ws = 8 as on page 22 (however chunk size is not necessarily a beat)|#(defun cc06 (&optional (input-filename (choose-file-dialog :button-string "OPND-M")))  (chewchen :ws 8            :wr 0            :f 1            :r (sqrt (/ 2 15))            :h 1            :chunk-size 1000            :min-sa-index -15            :max-sa-index 19            :ccnote-list (opndv2ccnotelist input-filename)            :starting-or-sounding 'starting            :sa-or-lof 'sa))#|cc07====Sliding window as described on page 18 of ChewChenCMJ.wr = 0, f = 1.ws = 16 as on page 22 (however chunk size is not necessarily a beat)|#(defun cc07 (&optional (input-filename (choose-file-dialog :button-string "OPND-M")))  (chewchen :ws 16            :wr 0            :f 1            :r (sqrt (/ 2 15))            :h 1            :chunk-size 1000            :min-sa-index -15            :max-sa-index 19            :ccnote-list (opndv2ccnotelist input-filename)            :starting-or-sounding 'starting            :sa-or-lof 'sa))(defstruct parameter-set  ws  wr  f  r  chunk-size  starting-or-sounding  sa-or-lof  sa-range  note-error-count  pin-error-count)(defun paramset= (paramset1                   paramset2                  &optional                  (include-error-counts t))  (and (= (parameter-set-ws paramset1)          (parameter-set-ws paramset2))       (= (parameter-set-wr paramset1)          (parameter-set-wr paramset2))       (= (parameter-set-f paramset1)          (parameter-set-f paramset2))       (= (parameter-set-r paramset1)          (parameter-set-r paramset2))       (= (parameter-set-chunk-size paramset1)          (parameter-set-chunk-size paramset2))       (eq (parameter-set-starting-or-sounding paramset1)           (parameter-set-starting-or-sounding paramset2))       (eq (parameter-set-sa-or-lof paramset1)           (parameter-set-sa-or-lof paramset2))       (equalp (parameter-set-sa-range paramset1)               (parameter-set-sa-range paramset2))       (if include-error-counts         (and (equalp (parameter-set-note-error-count paramset1)                      (parameter-set-note-error-count paramset2))              (equalp (parameter-set-pin-error-count paramset1)                      (parameter-set-pin-error-count paramset2)))         t))  )(defun parameter-set-equalp (paramset1                              paramset2                             &key                             (except-for nil))  (and (or (member 'ws except-for)           (equalp (parameter-set-ws paramset1)                   (parameter-set-ws paramset2)))       (or (member 'wr except-for)           (equalp (parameter-set-wr paramset1)                   (parameter-set-wr paramset2)))       (or (member 'f except-for)           (equalp (parameter-set-f paramset1)                   (parameter-set-f paramset2)))       (or (member 'r except-for)           (equalp (parameter-set-r paramset1)                   (parameter-set-r paramset2)))       (or (member 'chunk-size except-for)           (equalp (parameter-set-chunk-size paramset1)                   (parameter-set-chunk-size paramset2)))       (or (member 'starting-or-sounding except-for)           (equalp (parameter-set-starting-or-sounding paramset1)                   (parameter-set-starting-or-sounding paramset2)))       (or (member 'sa-or-lof except-for)           (equalp (parameter-set-sa-or-lof paramset1)                   (parameter-set-sa-or-lof paramset2)))       (or (member 'sa-range except-for)           (equalp (parameter-set-sa-range paramset1)                   (parameter-set-sa-range paramset2)))       (or (member 'note-error-count except-for)           (equalp (parameter-set-note-error-count paramset1)                   (parameter-set-note-error-count paramset2)))       (or (member 'pin-error-count except-for)           (equalp (parameter-set-pin-error-count paramset1)                   (parameter-set-pin-error-count paramset2))))  )(defun compute-parameter-list ()  (let* ((l nil))    (remove-if #'(lambda (parameter-set)                   (let* ((ws (parameter-set-ws parameter-set))                          (wr (parameter-set-wr parameter-set))                          (f (parameter-set-f parameter-set))                          (r (parameter-set-r parameter-set))                          ;(chunk-size (parameter-set-chunk-size parameter-set))                          ;(starting-or-sounding (parameter-set-starting-or-sounding parameter-set))                          (sa-or-lof (parameter-set-sa-or-lof parameter-set))                          ;(sa-range (parameter-set-sa-range parameter-set))                          )                     (or (> wr ws)                         (and (zerop f)                              (> wr 2))                         (and (> r (sqrt (/ 2 15)))                              (eq sa-or-lof 'lof)))))               (dolist (ws (list 0 4 8 16) l)                 (dolist (wr (list 2 4 6))                   (dolist (f (list 0 .25 .5 .75 1))                     (dolist (r (list (sqrt (/ 2 15)) (sqrt (/ 15 2))))                       (dolist (chunk-size (list 500 1000 2000))                         (dolist (starting-or-sounding (list 'starting 'sounding))                           (dolist (sa-or-lof (list 'sa 'lof))                             (dolist (sa-range (list '(-15 19) '(-22 26)))                               (setf l (cons (make-parameter-set :ws ws                                                                 :wr wr                                                                 :f f                                                                 :r r                                                                 :chunk-size chunk-size                                                                 :starting-or-sounding starting-or-sounding                                                                 :sa-or-lof sa-or-lof                                                                 :sa-range sa-range)                                             l)))))))))))))(defun compute-parameter-list-2 ()  (let* ((l nil))    (remove-if #'(lambda (parameter-set)                   (let* ((ws (parameter-set-ws parameter-set))                          (wr (parameter-set-wr parameter-set))                          ;(f (parameter-set-f parameter-set))                          (r (parameter-set-r parameter-set))                          ;(chunk-size (parameter-set-chunk-size parameter-set))                          ;(starting-or-sounding (parameter-set-starting-or-sounding parameter-set))                          (sa-or-lof (parameter-set-sa-or-lof parameter-set))                          ;(sa-range (parameter-set-sa-range parameter-set))                          )                     (or                       ;wr > ws+1                      (> wr (1+ ws))                      ;when sa-or-lof = lof, no point in using both aspect ratios since they have no effect:                      (and (> r (sqrt (/ 2 15)))                           (eq sa-or-lof 'lof)))))     (remove-if-not #'(lambda (parameter-set)                        (let* ((ws (parameter-set-ws parameter-set))                               (wr (parameter-set-wr parameter-set))                               (f (parameter-set-f parameter-set))                               ;(r (parameter-set-r parameter-set))                               ;(chunk-size (parameter-set-chunk-size parameter-set))                               ;(starting-or-sounding (parameter-set-starting-or-sounding parameter-set))                               ;(sa-or-lof (parameter-set-sa-or-lof parameter-set))                               ;(sa-range (parameter-set-sa-range parameter-set))                               )                          (or                           ;all three CEs have an effect: ws/=0, wr/=0, 0<f<1                           (and (/= 0 ws)                                (/= 0 wr)                                (< 0 f 1))                                                      ;just one combination in which cumulative CE is used: f=0, wr=2, ws=4                           (and (= f 0)                                (= wr 2)                                (= ws 4))                                                      ;just the global CE is used: f=1, wr=0, ws>0                           (and (= f 1)                                (= wr 0)                                (> ws 0))                                                      ;only global and local CEs have an effect: f=1, wr>0, ws>0                           (and (= f 1)                                (> wr 0)                                (> ws 0))                                                      )))                    (dolist (ws (list 0 4 8 16) l)                      (dolist (wr (list 0 2 4 6))                        (dolist (f (list 0 .25 .5 .75 1))                          (dolist (r (list (sqrt (/ 2 15)) (sqrt (/ 15 2))))                            (dolist (chunk-size (list 500 1000 2000))                              (dolist (starting-or-sounding (list 'starting 'sounding))                                (dolist (sa-or-lof (list 'sa 'lof))                                  (dolist (sa-range (list '(-15 19) '(-22 26)))                                    (setf l (cons (make-parameter-set :ws ws                                                                      :wr wr                                                                      :f f                                                                      :r r                                                                      :chunk-size chunk-size                                                                      :starting-or-sounding starting-or-sounding                                                                      :sa-or-lof sa-or-lof                                                                      :sa-range sa-range)                                                  l))))))))))))))(defun paramset> (ps1 ps2)  (let* ((ws1 (parameter-set-ws ps1))         (ws2 (parameter-set-ws ps2))         (wr1 (parameter-set-wr ps1))         (wr2 (parameter-set-wr ps2))         (f1 (parameter-set-f ps1))         (f2 (parameter-set-f ps2))         (r1 (parameter-set-r ps1))         (r2 (parameter-set-r ps2))         (cs1 (parameter-set-chunk-size ps1))         (cs2 (parameter-set-chunk-size ps2))         (sos1 (parameter-set-starting-or-sounding ps1))         (sos2 (parameter-set-starting-or-sounding ps2))         (sol1 (parameter-set-sa-or-lof ps1))         (sol2 (parameter-set-sa-or-lof ps2))         (sar1 (parameter-set-sa-range ps1))         (sar2 (parameter-set-sa-range ps2))         )    (or (> ws1 ws2)        (and (= ws1 ws2)             (> wr1 wr2))        (and (= ws1 ws2)             (= wr1 wr2)             (> f1 f2))        (and (= ws1 ws2)             (= wr1 wr2)             (= f1 f2)             (> r1 r2))        (and (= ws1 ws2)             (= wr1 wr2)             (= f1 f2)             (= r1 r2)             (> cs1 cs2))        (and (= ws1 ws2)             (= wr1 wr2)             (= f1 f2)             (= r1 r2)             (= cs1 cs2)             (neq sos1 sos2)             (eq sos1 'sounding))        (and (= ws1 ws2)             (= wr1 wr2)             (= f1 f2)             (= r1 r2)             (= cs1 cs2)             (eq sos1 sos2)             (neq sol1 sol2)             (eq sol1 'lof))        (and (= ws1 ws2)             (= wr1 wr2)             (= f1 f2)             (= r1 r2)             (= cs1 cs2)             (eq sos1 sos2)             (eq sol1 sol2)             (not (equalp sar1 sar2))             (equalp sar1 '(-22 26))))))(defun cc-supertest (&optional (start-param-set 0)                               (param-set-list (compute-parameter-list)))  (let* ((list-of-parameter-sets (subseq param-set-list start-param-set))         (input-directory (choose-directory-dialog :button-string "INPUT"))         (list-of-input-files (directory (make-pathname :directory (pathname-directory input-directory)                                                        :name :wild                                                        :type "opnd-m")))         (list-of-input-opndvs (mapcar #'(lambda (input-filename)                                           (sort-by-onset (read-dataset input-filename)))                                        list-of-input-files))         (list-of-input-pitch-name-seqs (mapcar #'(lambda (opndv-dataset)                                                     (mapcar #'second opndv-dataset))                                                  list-of-input-opndvs))         (list-of-input-pin-seqs (mapcar #'(lambda (pitch-name-seq)                                             (let* ((l nil))                                               (dotimes (i (1- (list-length pitch-name-seq)) (reverse l))                                                 (setf l (cons (pn2pin (elt pitch-name-seq i)                                                                       (elt pitch-name-seq (1+ i)))                                                               l)))))                                         list-of-input-pitch-name-seqs))         (list-of-input-ccnote-lists (mapcar #'opndv2ccnotelist list-of-input-files)))    (mapcar #'(lambda (parameter-set)                (let* ((list-of-output-pitch-name-seqs                        (mapcar #'(lambda (;file-name                                           ccnote-list sorted-input-opndv)                                    ;(format t "~%~a..." (pathname-name file-name))                                    (mapcar #'second                                             (ccnotelist2opndv                                             (chewchen :ws (parameter-set-ws parameter-set)                                                       :wr (parameter-set-wr parameter-set)                                                       :f (parameter-set-f parameter-set)                                                       :r (parameter-set-r parameter-set)                                                       :chunk-size (parameter-set-chunk-size parameter-set)                                                       :starting-or-sounding (parameter-set-starting-or-sounding parameter-set)                                                       :sa-or-lof (parameter-set-sa-or-lof parameter-set)                                                       :min-sa-index (first (parameter-set-sa-range parameter-set))                                                       :max-sa-index (second (parameter-set-sa-range parameter-set))                                                       :ccnote-list ccnote-list)                                             sorted-input-opndv                                             t))                                    ;(format t "DONE")                                    )                                ;list-of-input-files                                list-of-input-ccnote-lists                                list-of-input-opndvs))                       (list-of-output-pin-seqs (mapcar #'(lambda (pitch-name-seq)                                                            (let* ((l nil))                                                              (dotimes (i (1- (list-length pitch-name-seq)) (reverse l))                                                                (setf l (cons (pn2pin (elt pitch-name-seq i)                                                                                      (elt pitch-name-seq (1+ i)))                                                                              l)))))                                                        list-of-output-pitch-name-seqs))                       (list-of-note-error-counts (mapcar #'(lambda (input-pitch-name-seq                                                                     output-pitch-name-seq)                                                              (count nil (mapcar #'pn=                                                                                  input-pitch-name-seq                                                                                 output-pitch-name-seq)))                                                          list-of-input-pitch-name-seqs                                                          list-of-output-pitch-name-seqs))                                              (list-of-pin-error-counts (mapcar #'(lambda (input-pin-seq                                                                    output-pin-seq)                                                             (count nil (mapcar #'pin=                                                                                 input-pin-seq                                                                                output-pin-seq)))                                                         list-of-input-pin-seqs                                                         list-of-output-pin-seqs))                       (new-parameter-set (copy-parameter-set parameter-set)))                  (setf (parameter-set-note-error-count new-parameter-set)                        (apply #'+ list-of-note-error-counts)                        (parameter-set-pin-error-count new-parameter-set)                        (apply #'+ list-of-pin-error-counts))                  (pprint new-parameter-set)                  new-parameter-set                  ))            list-of-parameter-sets)))(defun chewchen (&key (ws 4) (wr 3) (f .7) (r (sqrt (/ 2 15))) (h 1)                      (chunk-size 1000) (min-sa-index -15) (max-sa-index 19)                      (ccnote-list (opndv2ccnotelist)) (starting-or-sounding 'starting)                      (sa-or-lof 'sa))  (let* (spiral-array chunk-list pitch-class ce list-of-chunk-ccnote-lists chunk-duration-list                      ce-self-ref ce-cum min-diff diff-list possible-sa-nodes best-position best-sa-node number-of-chunks                      ccnote-list-size output-list)    (setf ccnote-list-size (list-length ccnote-list))    (setf spiral-array (construct-spiral-array min-sa-index max-sa-index r h))    (setf list-of-chunk-ccnote-lists (construct-list-of-chunk-ccnote-lists ccnote-list chunk-size                                                                           starting-or-sounding))    (setf chunk-duration-list (mapcar #'(lambda (ccnote-list)                                          (apply #'+ (mapcar #'ccnote-duration ccnote-list)))                                      list-of-chunk-ccnote-lists))    (setf chunk-list (mapcar #'(lambda (ccnote-list duration)                                 (make-chunk :ccnote-list ccnote-list                                             :duration duration))                             list-of-chunk-ccnote-lists                             chunk-duration-list))    (setf number-of-chunks (list-length chunk-list))    (dotimes (j number-of-chunks)      ;(format t "~%Chunk ~d" j)      (dotimes (phase 2)        ;(format t "~% Phase ~d" phase)        (if (> j 0)          (if (= phase 0)            (setf ce (compute-ce (subseq chunk-list (max (- j ws) 0) j)                                 sa-or-lof))            (setf ce-self-ref (compute-ce (subseq chunk-list (max (1+ (- j wr)) 0) (1+ j))                                          sa-or-lof)                  ce-cum (compute-ce (subseq chunk-list 0 j)                                     sa-or-lof)                  ce (if (or ce-self-ref                             ce-cum)                       (if (eq sa-or-lof 'sa)                         (vector-sum (list (if ce-self-ref                                             (scalar-vector-multiply f ce-self-ref)                                             (list 0 0 0))                                           (if ce-cum                                             (scalar-vector-multiply (- 1 f) ce-cum)                                             (list 0 0 0))))                         (+ (* f (if ce-self-ref ce-self-ref 0))                            (* (- 1 f) (if ce-cum ce-cum 0))))))))        (if (or (= j 0)                (and (= phase 0) (/= ws 0))                (and (= phase 1) (not (and (= f 1) (= wr 0)))))          (progn (dolist (ccnote (chunk-ccnote-list (elt chunk-list j)))                   ;(format t "~%CE = ~a" ce)                   (setf pitch-class (mod (ccnote-midi ccnote) 12))                   (setf possible-sa-nodes (remove-if #'null (mapcar #'(lambda (sa-node)                                                                         (if (= pitch-class (sa-node-pitch-class sa-node))                                                                           sa-node))                                                                     spiral-array)))                   (setf diff-list (if (or (and (= j 0) (= phase 0))                                                                                      ;following is to ensure does not crash when ce is null on first phase                                           ;because of no notes in the previous ws chunks.                                           ;Need to have pitch names assigned in order to do self-referential                                           ;window in second phase.                                           (and (= phase 0) (null ce))                                           )                                     (mapcar #'(lambda (index)                                                 (abs (- index 2)))                                             (mapcar #'sa-node-index possible-sa-nodes))                                     (if (eq sa-or-lof 'sa)                                       (mapcar #'(lambda (vector)                                                   (euclidean-distance vector ce))                                               (mapcar #'sa-node-vector possible-sa-nodes))                                       (mapcar #'(lambda (index)                                                   (abs (- index ce)))                                               (mapcar #'sa-node-index possible-sa-nodes)))))                   (setf min-diff (apply #'min diff-list))                   (setf best-position (position min-diff diff-list))                   (setf best-sa-node (elt possible-sa-nodes best-position))                   (setf (ccnote-index ccnote) (sa-node-index best-sa-node))                   (setf (ccnote-sa-vector ccnote) (copy-list (sa-node-vector best-sa-node))))                 (setf (chunk-sum-pd (elt chunk-list j)) (compute-chunk-sum-pd (elt chunk-list j) sa-or-lof))                 ;(format t "~%chunk-sum-pd = ~a" (chunk-sum-pd (elt chunk-list j)))                 (if (and (= 0 j) (= phase 0))                   (setf ce (compute-ce (list (elt chunk-list j))                                        sa-or-lof)))))))    (setf output-list          (apply #'append (mapcar #'chunk-ccnote-list chunk-list)))    (if (eq starting-or-sounding 'sounding)      (setf output-list (compute-sounding-output-list output-list ccnote-list)))    (dotimes (i ccnote-list-size)      (setf (ccnote-pn (elt output-list i))            (midiindex2pn (ccnote-midi (elt output-list i)) (ccnote-index (elt output-list i)))))    output-list))(defun compute-sounding-output-list (output-list ccnote-list)  (let* (sorted-output-list         list-of-index-lists         list-of-index-sets         list-of-indices         ;list-of-multiple-pitch-name-assignments         )    (setf sorted-output-list (sort output-list #'(lambda (ccn1 ccn2)                                                   (or (< (ccnote-parent-ccnote ccn1) (ccnote-parent-ccnote ccn2))                                                       (and (= (ccnote-parent-ccnote ccn1) (ccnote-parent-ccnote ccn2))                                                            (< (ccnote-onset ccn1) (ccnote-onset ccn2)))))))    (setf list-of-index-lists (let* ((loil nil)                                     (current-parent-ccnote nil))                                (dotimes (i (list-length sorted-output-list) (reverse (mapcar #'reverse loil)))                                  (if (and current-parent-ccnote                                           (= current-parent-ccnote (ccnote-parent-ccnote (elt sorted-output-list i))))                                    (setf (first loil)                                          (cons (ccnote-index (elt sorted-output-list i))                                                (first loil)))                                    (setf loil                                          (cons (list (ccnote-index (elt sorted-output-list i)))                                                loil)                                          current-parent-ccnote                                          (ccnote-parent-ccnote (elt sorted-output-list i))))                                  )))    (setf list-of-index-sets (mapcar #'remove-duplicates list-of-index-lists))    #|(if (not (every #'(lambda (index-set)                        (= (list-length index-set) 1))                    list-of-index-sets))      (progn (setf list-of-multiple-pitch-name-assignments                   (remove-if #'null (mapcar #'(lambda (is)                                                 (if (= 1 (list-length is))                                                   nil                                                   is))                                             list-of-index-sets)))             (format t "~%~d notes have multiple pitch names assigned because of crossing chunk boundaries: ~a"                     (list-length list-of-multiple-pitch-name-assignments)                     list-of-multiple-pitch-name-assignments)))|#    (setf list-of-indices (mapcar #'first list-of-index-sets))    (setf output-list ccnote-list)    (mapcar #'(lambda (ccnote index)                (setf (ccnote-index ccnote)                      index))            output-list            list-of-indices)    output-list))(defun midiindex2pn (midi index)  (let (i p-dashed o c istr j ostr lstr)    (setf i (floor (1+ index) 7)          p-dashed (- midi i)          o (- (floor p-dashed 12) 1))    (if (> i 0)      (setf c "s")      (setf c "f"))    (setf istr ""          j 1)    (do ()        ((> j (abs i)))      (setf istr (concatenate 'string istr c)            j (1+ j)))    (if (zerop i)      (setf istr "n"))    (setf ostr (num2str o)          lstr (elt '("C" "D" "E" "F" "G" "A" "B") (mod (* 4 index) 7)))    (concatenate 'string lstr istr ostr)))(defun euclidean-distance (v1 v2)  (sqrt (apply #'+ (mapcar #'(lambda (x)                               (* x x))                           (mapcar #'- v1 v2)))))(defun compute-ce (list-of-chunks sa-or-lof)  (if (and list-of-chunks           (/= 0 (apply #'+ (mapcar #'chunk-duration list-of-chunks))))    (if (eq sa-or-lof 'sa)      (scalar-vector-multiply (/ 1 (apply #'+ (mapcar #'chunk-duration list-of-chunks)))                            (vector-sum (mapcar #'chunk-sum-pd list-of-chunks)))      (* (/ 1 (apply #'+ (mapcar #'chunk-duration list-of-chunks)))         (apply #'+ (mapcar #'chunk-sum-pd list-of-chunks))))))(defun compute-chunk-sum-pd (chunk sa-or-lof)  (if (eq sa-or-lof 'sa)    (let* ((vs (vector-sum (mapcar #'(lambda (ccnote)                                       (scalar-vector-multiply (ccnote-duration ccnote)                                                               (ccnote-sa-vector ccnote)))                                   (chunk-ccnote-list chunk)))))      (if vs vs (list 0 0 0)))    (apply #'+ (mapcar #'(lambda (ccnote)                           (* (ccnote-duration ccnote)                              (ccnote-index ccnote)))                       (chunk-ccnote-list chunk)))))(defun scalar-vector-multiply (s v)  (mapcar #'(lambda (e)              (* s e))          v))(defun vector-sum (list-of-vectors)  (if list-of-vectors    (apply #'mapcar #'+ list-of-vectors)))(defun ccnote-offset (ccnote)  (+ (ccnote-onset ccnote)     (ccnote-duration ccnote)))(defun construct-list-of-chunk-ccnote-lists (ccnote-list                                             chunk-size                                             starting-or-sounding)  (let* (new-ccnote-list ccnote-list-size chunk-list chunk-number this-chunk)    (setf new-ccnote-list (mapcar #'copy-ccnote ccnote-list))    (if (eq starting-or-sounding 'sounding)            ;If starting-or-sounding is 'sounding:      ;Need to split up all the ccnotes in ccnote-list into within-chunk segments      ;each of these segments needs to be tagged with the original ccnote from which it came      ;so that they can be recombined at the end.      ;One possible problem is that different segments of the same note could be assigned different pitch names...            (let* (max-offset number-of-chunks chunk-boundaries)        (setf max-offset (apply #'max (mapcar #'ccnote-offset ccnote-list)))        (setf number-of-chunks (ceiling (/ max-offset chunk-size)))        (setf chunk-boundaries              (let (cb)                (dotimes (i number-of-chunks (reverse cb))                  (setf cb (cons (* (1+ i) chunk-size)                                 cb)))))        (setf new-ccnote-list              (sort (let* ((ccnote nil)                           (output-list nil)                           (chunk-boundaries-for-this-ccnote nil)                           (new-ccnote-boundaries-for-this-note nil)                           (new-ccnotes-for-this-ccnote nil))                      (dotimes (i (list-length ccnote-list)                                   output-list)                        (setf ccnote (elt ccnote-list i))                        (setf chunk-boundaries-for-this-ccnote                              (remove-if #'null (mapcar #'(lambda (boundary)                                                            (if (< (ccnote-onset ccnote)                                                                   boundary                                                                   (ccnote-offset ccnote))                                                              boundary))                                                        chunk-boundaries)))                        (setf new-ccnote-boundaries-for-this-note                              (append (list (ccnote-onset ccnote))                                      chunk-boundaries-for-this-ccnote                                      (list (ccnote-offset ccnote))))                        (setf new-ccnotes-for-this-ccnote                              (let (l)                                (dotimes (j (1- (list-length new-ccnote-boundaries-for-this-note)) (reverse l))                                  (setf l                                        (cons (make-ccnote :onset (elt new-ccnote-boundaries-for-this-note j)                                                           :duration (- (elt new-ccnote-boundaries-for-this-note (1+ j))                                                                        (elt new-ccnote-boundaries-for-this-note j))                                                           :midi (ccnote-midi ccnote)                                                           :parent-ccnote i)                                              l)))))                        (setf output-list                              (append output-list new-ccnotes-for-this-ccnote))))                    #'(lambda (ccn1 ccn2)                        (or (< (ccnote-onset ccn1)                               (ccnote-onset ccn2))                            (and (= (ccnote-onset ccn1)                                    (ccnote-onset ccn2))                                 (< (ccnote-midi ccn1)                                    (ccnote-midi ccn2)))                            (and (= (ccnote-onset ccn1)                                    (ccnote-onset ccn2))                                 (= (ccnote-midi ccn1)                                    (ccnote-midi ccn2))                                 (< (ccnote-duration ccn1)                                    (ccnote-duration ccn2)))))))))        (setf ccnote-list-size (list-length new-ccnote-list))    (setf chunk-list nil)    (setf chunk-number 1)    (setf this-chunk nil)    (dotimes (i ccnote-list-size)      (if (< (ccnote-onset (elt new-ccnote-list i))             (* chunk-number chunk-size))        (setf this-chunk              (append this-chunk                      (list (copy-ccnote (elt new-ccnote-list i)))))        (progn (setf chunk-list (append chunk-list (list this-chunk)))               (setf chunk-number (1+ chunk-number))               (do ()                   ((< (ccnote-onset (elt new-ccnote-list i))                       (* chunk-number chunk-size))                    (setf this-chunk                          (list (elt new-ccnote-list i))))                 (setf chunk-list                       (append chunk-list (list nil)))                 (setf chunk-number (1+ chunk-number))))))        (if this-chunk      (setf chunk-list            (append chunk-list (list this-chunk))))    chunk-list))(defun opndv2ccnotelist (&optional (opnd-m-file (choose-file-dialog :button-string "OPND-M")))  (mapcar #'(lambda (opndv-datapoint)              (make-ccnote :onset (first opndv-datapoint)                           :duration (third opndv-datapoint)                           :midi (pn2midi (second opndv-datapoint))))          (sort-by-onset (read-dataset opnd-m-file))))(defun opndv2ccnotelist-2 (sorted-input-opndv-dataset)  (mapcar #'(lambda (opndv-datapoint)              (make-ccnote :onset (first opndv-datapoint)                           :duration (third opndv-datapoint)                           :midi (pn2midi (second opndv-datapoint))))          sorted-input-opndv-dataset))(defstruct sa-node  index  pitch-class  vector)(defun construct-spiral-array (&optional                                (min-sa-index -15)                               (max-sa-index 19)                               (r (sqrt (/ 2 15)))                               (h 1))  (do* ((sa nil)        (k min-sa-index (1+ k))        (x nil)        (y nil))       ((> k max-sa-index)        sa)    (setf sa          (append sa                  (list (make-sa-node :index  k                                      :pitch-class (mod (* 7 k) 12)                                      :vector (list (if (< (abs (setf x (* r (sin (/ (* k pi) 2))))) .000000001)                                                      0 x)                                                    (if (< (abs (setf y (* r (cos (/ (* k pi) 2))))) .000000001)                                                      0 y)                                                    (* k h))))))));;;;;;;;;;;;;;;;;;;;;#|(defun chewchen2005-v1 (&key                        (ws 4)                        (wr 3)                        (f .7)                        (r-over-h (sqrt (/ 2 15)))                        (chunk-size 1000)                        (min-sa-index -15)                        (max-sa-index 19)                        (ccnote-list (opndv2ccnotelist))                        (starting-or-sounding 'starting))  (let (spiral-array chunk-list pitch-class ce                     list-of-chunk-ccnote-lists chunk-duration-list                     ce-self-ref ce-cum min-diff diff-list possible-sa-nodes                     best-position best-sa-node number-of-chunks                     ccnote-list-size output-list                     sorted-output-list                     list-of-index-lists                     list-of-index-sets                     list-of-indices)    (setf ccnote-list-size (list-length ccnote-list))    (setf spiral-array (construct-spiral-array min-sa-index                                               max-sa-index                                               r-over-h))    (setf list-of-chunk-ccnote-lists (construct-list-of-chunk-ccnote-lists ccnote-list                                                                           chunk-size                                                                           starting-or-sounding))    (setf chunk-duration-list (mapcar #'(lambda (ccnote-list)                                          (apply #'+ (mapcar #'ccnote-duration                                                             ccnote-list)))                                      list-of-chunk-ccnote-lists))    (setf chunk-list (mapcar #'(lambda (ccnote-list                                        duration)                                 (make-chunk :ccnote-list ccnote-list                                             :duration duration))                             list-of-chunk-ccnote-lists                             chunk-duration-list))    (setf number-of-chunks (list-length chunk-list))        ;find indices closest to 2 for notes in first chunk (p.17)    (dolist (ccnote (chunk-ccnote-list (elt chunk-list 0)))      (setf pitch-class (mod (ccnote-midi ccnote) 12))      (setf possible-sa-nodes (remove-if #'null                                         (mapcar #'(lambda (sa-node)                                                     (if (= pitch-class                                                            (sa-node-pitch-class sa-node))                                                       sa-node))                                                 spiral-array)))      (setf diff-list (mapcar #'(lambda (index)                                  (abs (- index 2)))                              (mapcar #'sa-node-index possible-sa-nodes)))      (setf min-diff (apply #'min diff-list))      (setf best-position (position min-diff diff-list))      (setf best-sa-node (elt possible-sa-nodes                              best-position))      (setf (ccnote-index ccnote)            (sa-node-index best-sa-node))      (setf (ccnote-sa-vector ccnote)            (copy-list (sa-node-vector best-sa-node))))        ;find initial sum-pd for first chunk    (setf (chunk-sum-pd (elt chunk-list 0))          (compute-chunk-sum-pd (elt chunk-list 0)))        ;compute CE using initial pitch name assignments for first chunk (p.17)    (setf ce (compute-ce (list (elt chunk-list 0))))        ;recompute indices for first chunk based on ce    (dolist (ccnote (chunk-ccnote-list (elt chunk-list 0)))      (setf pitch-class (mod (ccnote-midi ccnote) 12))      (setf possible-sa-nodes (remove-if #'null                                         (mapcar #'(lambda (sa-node)                                                     (if (= pitch-class                                                            (sa-node-pitch-class sa-node))                                                       sa-node))                                                 spiral-array)))      (setf diff-list (mapcar #'(lambda (vector)                                  (euclidean-distance vector                                                      ce))                              (mapcar #'sa-node-vector possible-sa-nodes)))      (setf min-diff (apply #'min diff-list))      (setf best-position (position min-diff diff-list))      (setf best-sa-node (elt possible-sa-nodes                              best-position))      (setf (ccnote-index ccnote)            (sa-node-index best-sa-node))      (setf (ccnote-sa-vector ccnote)            (sa-node-vector best-sa-node)))        ;find revised sum-pd for first chunk    (setf (chunk-sum-pd (elt chunk-list 0))          (compute-chunk-sum-pd (elt chunk-list 0)))        ;compute spellings for rest of chunks    (do* ((j 1 (1+ j)))         ((= j number-of-chunks))            ;phase 1: pitch names are assigned using the CE: c_j = c_{j-w_s,j-1} (p.17)      (setf ce (compute-ce (subseq chunk-list                                   (max (- j ws) 0)                                   j)))      (dolist (ccnote (chunk-ccnote-list (elt chunk-list j)))        (setf pitch-class (mod (ccnote-midi ccnote) 12))        (setf possible-sa-nodes (remove-if #'null                                           (mapcar #'(lambda (sa-node)                                                       (if (= pitch-class                                                              (sa-node-pitch-class sa-node))                                                         sa-node))                                                   spiral-array)))        (setf diff-list (mapcar #'(lambda (vector)                                    (euclidean-distance vector                                                        ce))                                (mapcar #'sa-node-vector possible-sa-nodes)))        (setf min-diff (apply #'min diff-list))        (setf best-position (position min-diff diff-list))        (setf best-sa-node (elt possible-sa-nodes                                best-position))        (setf (ccnote-index ccnote)              (sa-node-index best-sa-node))        (setf (ccnote-sa-vector ccnote)              (sa-node-vector best-sa-node)))            ;calculate sum-pd for this chunk as this is used in phase 2.      (setf (chunk-sum-pd (elt chunk-list j))            (compute-chunk-sum-pd (elt chunk-list j)))            ;phase 2: pitch names are assigned using a hybrid CE:      ;c_j = f.c_{j-w_r+1,j}+(1-f).c_{1,j-1} where 02f21      (setf ce-self-ref (compute-ce (subseq chunk-list                                            (max (1+ (- j wr)) 0)                                            (1+ j))))      (setf ce-cum (compute-ce (subseq chunk-list                                       0 j)))      (setf ce (vector-sum (list (scalar-vector-multiply f ce-self-ref)                                 (scalar-vector-multiply (- 1 f) ce-cum))))            (dolist (ccnote (chunk-ccnote-list (elt chunk-list j)))        (setf pitch-class (mod (ccnote-midi ccnote) 12))        (setf possible-sa-nodes (remove-if #'null                                           (mapcar #'(lambda (sa-node)                                                       (if (= pitch-class                                                              (sa-node-pitch-class sa-node))                                                         sa-node))                                                   spiral-array)))        (setf diff-list (mapcar #'(lambda (vector)                                    (euclidean-distance vector                                                        ce))                                (mapcar #'sa-node-vector possible-sa-nodes)))        (setf min-diff (apply #'min diff-list))        (setf best-position (position min-diff diff-list))        (setf best-sa-node (elt possible-sa-nodes                                best-position))        (setf (ccnote-index ccnote)              (sa-node-index best-sa-node))        (setf (ccnote-sa-vector ccnote)              (sa-node-vector best-sa-node)))            ;now calculate final sum-pd for this chunk      (setf (chunk-sum-pd (elt chunk-list j))            (compute-chunk-sum-pd (elt chunk-list j)))      )        (setf output-list          (apply #'append (mapcar #'chunk-ccnote-list chunk-list)))    (if (eq starting-or-sounding 'sounding)      (progn (setf sorted-output-list (sort output-list                                            #'(lambda (ccn1 ccn2)                                                (or (< (ccnote-parent-ccnote ccn1)                                                       (ccnote-parent-ccnote ccn2))                                                    (and (= (ccnote-parent-ccnote ccn1)                                                            (ccnote-parent-ccnote ccn2))                                                         (< (ccnote-onset ccn1)                                                            (ccnote-onset ccn2)))))))             (setf list-of-index-lists (let* ((loil nil)                                              (current-parent-ccnote nil))                                         (dotimes (i (list-length sorted-output-list) (reverse (mapcar #'reverse loil)))                                           (if (and current-parent-ccnote                                                    (= current-parent-ccnote                                                       (ccnote-parent-ccnote (elt sorted-output-list i))))                                             (setf (first loil)                                                   (cons (ccnote-index (elt sorted-output-list i))                                                         (first loil)))                                             (setf loil                                                   (cons (list (ccnote-index (elt sorted-output-list i)))                                                         loil)                                                   current-parent-ccnote                                                   (ccnote-parent-ccnote (elt sorted-output-list i))))                                           )))             (setf list-of-index-sets (mapcar #'remove-duplicates list-of-index-lists))             (if (not (every #'(lambda (index-set)                                 (= (list-length index-set) 1))                             list-of-index-sets))               (progn (format t "~%Single note assigned more than one pitch name.")                      (abort)))             (setf list-of-indices (mapcar #'first list-of-index-sets))             (setf output-list ccnote-list)             (mapcar #'(lambda (ccnote index)                         (setf (ccnote-index ccnote)                               index))                     output-list                     list-of-indices)))        (dotimes (i ccnote-list-size)      (setf (ccnote-pn (elt output-list i))            (midiindex2pn (ccnote-midi (elt output-list i))                          (ccnote-index (elt output-list i)))))    output-list))|#(defun analyse-cc-results (&optional (cc-results-file (choose-file-dialog :button-string "CC RESULTS"))                                     (maximum-note-error-count 1700))  (let* ((list-of-parameter-sets (with-open-file (cc-results-file-stream                                                  cc-results-file                                                  :direction :input)                                   (do ((lops nil)                                        (this-param-set (read cc-results-file-stream nil nil)                                                        (read cc-results-file-stream nil nil)))                                       ((null this-param-set)                                        (reverse lops))                                     (setf lops (cons this-param-set lops)))))         (sorted-list-of-parameter-sets (sort (mapcar #'copy-parameter-set list-of-parameter-sets)                                              #'<                                              :key #'parameter-set-note-error-count)))    (mapcar #'pprint (subseq sorted-list-of-parameter-sets 0 (position maximum-note-error-count                                                                       sorted-list-of-parameter-sets                                                                       :key #'parameter-set-note-error-count                                                                       :test #'<)))))(defun chewchen-with-parameter-set (parameter-set ccnote-list)  (chewchen :ws (parameter-set-ws parameter-set)            :wr (parameter-set-wr parameter-set)            :f (parameter-set-f parameter-set)            :r (parameter-set-r parameter-set)            :chunk-size (parameter-set-chunk-size parameter-set)            :starting-or-sounding (parameter-set-starting-or-sounding parameter-set)            :sa-or-lof (parameter-set-sa-or-lof parameter-set)            :min-sa-index (first (parameter-set-sa-range parameter-set))            :max-sa-index (second (parameter-set-sa-range parameter-set))            :ccnote-list ccnote-list))(defun cc-opt-01 (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 2.7386127875258306 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING SOUNDING :SA-OR-LOF SA :SA-RANGE (-22 26) :NOTE-ERROR-COUNT 1665 :PIN-ERROR-COUNT 2779)                               ccnote-list))(defun cc-opt-02 (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 2.7386127875258306 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING SOUNDING :SA-OR-LOF SA :SA-RANGE (-15 19) :NOTE-ERROR-COUNT 1665 :PIN-ERROR-COUNT 2779)                               ccnote-list))(defun cc-opt-03 (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 0.3651483716701107 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING SOUNDING :SA-OR-LOF LOF :SA-RANGE (-22 26) :NOTE-ERROR-COUNT 1665 :PIN-ERROR-COUNT 2779)                               ccnote-list))(defun cc-opt-04 (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 0.3651483716701107 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING SOUNDING :SA-OR-LOF LOF :SA-RANGE (-15 19) :NOTE-ERROR-COUNT 1665 :PIN-ERROR-COUNT 2779)                               ccnote-list))(defun cc-opt-05 (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 0.3651483716701107 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING SOUNDING :SA-OR-LOF SA :SA-RANGE (-22 26) :NOTE-ERROR-COUNT 1665 :PIN-ERROR-COUNT 2779)                               ccnote-list))(defun cc-opt-06 (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 0.3651483716701107 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING SOUNDING :SA-OR-LOF SA :SA-RANGE (-15 19) :NOTE-ERROR-COUNT 1665 :PIN-ERROR-COUNT 2779)                               ccnote-list))(defun cc-opt-07 (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 2.7386127875258306 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING STARTING :SA-OR-LOF SA :SA-RANGE (-22 26) :NOTE-ERROR-COUNT 1666 :PIN-ERROR-COUNT 2737)                               ccnote-list))(defun cc-opt-08 (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 2.7386127875258306 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING STARTING :SA-OR-LOF SA :SA-RANGE (-15 19) :NOTE-ERROR-COUNT 1666 :PIN-ERROR-COUNT 2737)                               ccnote-list))(defun cc-opt-09 (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 0.3651483716701107 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING STARTING :SA-OR-LOF LOF :SA-RANGE (-22 26) :NOTE-ERROR-COUNT 1666 :PIN-ERROR-COUNT 2737)                               ccnote-list))(defun cc-opt-10 (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 0.3651483716701107 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING STARTING :SA-OR-LOF LOF :SA-RANGE (-15 19) :NOTE-ERROR-COUNT 1666 :PIN-ERROR-COUNT 2737)                               ccnote-list))(defun cc-opt-11 (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 0.3651483716701107 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING STARTING :SA-OR-LOF SA :SA-RANGE (-22 26) :NOTE-ERROR-COUNT 1666 :PIN-ERROR-COUNT 2737)                               ccnote-list))(defun cc-opt-12 (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 0.3651483716701107 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING STARTING :SA-OR-LOF SA :SA-RANGE (-15 19) :NOTE-ERROR-COUNT 1666 :PIN-ERROR-COUNT 2737)                               ccnote-list));;;;;;;;;;;;;;;;;;;;;;;SA-OR-LOF DEBUG(defun saorlof-debug-sa-1-a (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 4                                                 :WR 4                                                :F 1.0                                                :R 2.7386127875258306                                                :CHUNK-SIZE 500                                                :STARTING-OR-SOUNDING STARTING                                                :SA-OR-LOF SA                                                :SA-RANGE (-15 19))                               ccnote-list))#|(run-alg-and-print-results 'saorlof-debug-sa-1-a                           'sort-by-onset                           'opndv2ccnotelist-2                           'ccnotelist2opndv-2                           "opnd-m"                           "sa1a")|#(defun saorlof-debug-lof-a (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 4                                                 :WR 4                                                :F 1.0                                                :R 0.3651483716701107                                                :CHUNK-SIZE 500                                                :STARTING-OR-SOUNDING STARTING                                                :SA-OR-LOF LOF                                                :SA-RANGE (-15 19))                               ccnote-list))#|(run-alg-and-print-results 'saorlof-debug-lof-a                           'sort-by-onset                           'opndv2ccnotelist-2                           'ccnotelist2opndv-2                           "opnd-m"                           "lofa")|#(defun saorlof-debug-sa-2-a (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 4                                                 :WR 4                                                :F 1.0                                                :R 0.3651483716701107                                                :CHUNK-SIZE 500                                                :STARTING-OR-SOUNDING STARTING                                                :SA-OR-LOF SA                                                :SA-RANGE (-15 19))                               ccnote-list))#|(run-alg-and-print-results 'saorlof-debug-sa-2-a                           'sort-by-onset                           'opndv2ccnotelist-2                           'ccnotelist2opndv-2                           "opnd-m"                           "sa2a")|#(defun saorlof-debug-sa-1-b (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 4                                                 :WR 4                                                :F 1.0                                                :R 2.7386127875258306                                                :CHUNK-SIZE 500                                                :STARTING-OR-SOUNDING STARTING                                                :SA-OR-LOF SA                                                :SA-RANGE (-22 26))                               ccnote-list))#|(run-alg-and-print-results 'saorlof-debug-sa-1-b                           'sort-by-onset                           'opndv2ccnotelist-2                           'ccnotelist2opndv-2                           "opnd-m"                           "sa1b")|#(defun saorlof-debug-lof-b (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 4                                                 :WR 4                                                :F 1.0                                                :R 0.3651483716701107                                                :CHUNK-SIZE 500                                                :STARTING-OR-SOUNDING STARTING                                                :SA-OR-LOF LOF                                                :SA-RANGE (-22 26))                               ccnote-list))#|(run-alg-and-print-results 'saorlof-debug-lof-b                           'sort-by-onset                           'opndv2ccnotelist-2                           'ccnotelist2opndv-2                           "opnd-m"                           "lofb")|#(defun saorlof-debug-sa-2-b (ccnote-list)  (chewchen-with-parameter-set #S(PARAMETER-SET :WS 4                                                 :WR 4                                                :F 1.0                                                :R 0.3651483716701107                                                :CHUNK-SIZE 500                                                :STARTING-OR-SOUNDING STARTING                                                :SA-OR-LOF SA                                                :SA-RANGE (-22 26))                               ccnote-list))#|(run-alg-and-print-results 'saorlof-debug-sa-2-b                           'sort-by-onset                           'opndv2ccnotelist-2                           'ccnotelist2opndv-2                           "opnd-m"                           "sa2b")|#;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;New Analysis of results(defun analyse-cc-results-2 (&optional (for-r nil))  (let* ((results (read-dataset))         (results-sorted-by-note-error-count (sort results #'< :key #'parameter-set-note-error-count))         (current-nec nil))    (if for-r      (format t "~%GLC	WS/ms	WR/ms	WS	WR	F	R	CHUNK-SIZE	STARTING-OR-SOUNDING	SA-OR-LOF	SA-RANGE	NOTE-ERROR-COUNT	PIN-ERROR-COUNT")      (format t "~%GLC    WS/ms    WR/ms WS WR    F     R CHUNK-SIZE STARTING-OR-SOUNDING SA-OR-LOF SA-RANGE NOTE-ERROR-COUNT PIN-ERROR-COUNT"))    (mapcar #'(lambda (ps)                (if (null current-nec)                  (setf current-nec (parameter-set-note-error-count ps)))                (if (/= (parameter-set-note-error-count ps) current-nec)                  (progn (if (not for-r) (format t "~%"))                         (setf current-nec (parameter-set-note-error-count ps))))                (format t (if for-r                            "~%~a	~d	~d	~d	~d	~f	~f	~d	~a	~a	~a	~d	~d"                            "~%~3a~9d~9d~3d~3d~5,2f~6,3f~11d~21@a~10@a~9@a~17d~16d")                        (let* ((ws (parameter-set-ws ps))                               (wr (parameter-set-wr ps))                               (f (parameter-set-f ps)))                          (cond ((and (/= ws 0) (/= wr 0) (< 0 f 1))                                  "GLC")                                ((and (= f 0) (= wr 2) (= ws 4))                                 "  C")                                ((and (= f 1) (= 0 wr) (> ws 0))                                 "G  ")                                ((and (= f 1) (> wr 0) (> ws 0))                                 "GL ")))                        (* (parameter-set-ws ps) (parameter-set-chunk-size ps))                        (* (parameter-set-wr ps) (parameter-set-chunk-size ps))                        (parameter-set-ws ps)                        (parameter-set-wr ps)                        (parameter-set-f ps)                        (parameter-set-r ps)                        (parameter-set-chunk-size ps)                        (parameter-set-starting-or-sounding ps)                        (parameter-set-sa-or-lof ps)                        (parameter-set-sa-range ps)                        (parameter-set-note-error-count ps)                        (parameter-set-pin-error-count ps)))            results-sorted-by-note-error-count)))(defun paramset-less-than-for-saorlof (ps1 ps2)  (let* ((ws1 (parameter-set-ws ps1))         (ws2 (parameter-set-ws ps2))         (wr1 (parameter-set-wr ps1))         (wr2 (parameter-set-wr ps2))         (f1 (parameter-set-f ps1))         (f2 (parameter-set-f ps2))         (r1 (parameter-set-r ps1))         (r2 (parameter-set-r ps2))         (cs1 (parameter-set-chunk-size ps1))         (cs2 (parameter-set-chunk-size ps2))         (sos1 (parameter-set-starting-or-sounding ps1))         (sos2 (parameter-set-starting-or-sounding ps2))         (sol1 (parameter-set-sa-or-lof ps1))         (sol2 (parameter-set-sa-or-lof ps2))         (sar1 (parameter-set-sa-range ps1))         (sar2 (parameter-set-sa-range ps2))         (psvec1 (list ws1 wr1 f1 cs1 sos1 sar1 sol1 r1))         (psvec2 (list ws2 wr2 f2 cs2 sos2 sar2 sol2 r2)))    (mixed-type-vector-< psvec1 psvec2)))(defun mixed-type-vector-< (mtv1 mtv2)  (cond ((null mtv2)         nil)        ((null mtv1)         t)        ((equalp mtv1 mtv2)         nil)        ((< (list-length mtv1) (list-length mtv2))         t)        ((> (list-length mtv1) (list-length mtv2))         nil)        ((and (numberp (first mtv1))              (numberp (first mtv2))              (< (first mtv1) (first mtv2)))         t)        ((and (numberp (first mtv1))              (numberp (first mtv2))              (> (first mtv1) (first mtv2)))         nil)        ((and (numberp (first mtv1))              (numberp (first mtv2)))         (mixed-type-vector-< (cdr mtv1) (cdr mtv2)))        ((and (listp (first mtv1))              (listp (first mtv2))              (mixed-type-vector-< (first mtv1) (first mtv2)))         t)        ((and (listp (first mtv1))              (listp (first mtv2))              (mixed-type-vector-< (first mtv2) (first mtv1)))         nil)        ((equalp (first mtv1) (first mtv2))         (mixed-type-vector-< (cdr mtv1) (cdr mtv2)))        ((string< (string (first mtv1)) (string (first mtv2)))         t)        ((string> (string (first mtv1)) (string (first mtv2)))         nil)        (t         (mixed-type-vector-< (cdr mtv1) (cdr mtv2)))))(defun saorlof-analysis (&key (output-directory #3P"hd:Users:dave:Documents:MIDI-to-notation:03Pitch-spelling:DPhil:")                              (no-change-colour 6)                              (change-colour 1))  (let* ((r-input-filename (make-pathname :directory (pathname-directory output-directory)                                          :name "saorlof"                                          :type "r"))         (results (read-dataset #1P"hd:Users:dave:Documents:Musedata:20040829-small-corpus:RESULTS:cc-sorted-new-results"))         (number-of-results (list-length results))         (sorted-results (sort results #'paramset-less-than-for-saorlof))         (affected-param-sets nil)         (list-of-nec-triples (do* ((i 0 (+ i 3))                                    (l nil)                                    (this-triple nil nil))                                   ((= i number-of-results)                                    (reverse l))                                (setf this-triple                                      (list (parameter-set-note-error-count (elt sorted-results i))                                            (parameter-set-note-error-count (elt sorted-results (+ i 1)))                                            (parameter-set-note-error-count (elt sorted-results (+ i 2)))))                                (setf l (cons this-triple l))                                (if (/= 1 (list-length (remove-duplicates this-triple)))                                  (setf affected-param-sets (cons (subseq sorted-results i (+ 3 i))                                                                  affected-param-sets)))))         (list-of-nec-triples (sort (remove-duplicates list-of-nec-triples :test #'equalp)                                    #'(lambda (t1 t2)                                        (< (list-length (remove-duplicates t1))                                           (list-length (remove-duplicates t2)))))))    (with-open-file (output-stream                     r-input-filename                     :direction :output                     :if-exists :rename-and-delete)      (format output-stream "~%rm(list = ls())WD<-getwd()setwd(\"/Users/dave/Documents/MIDI-to-notation/03Pitch-spelling/DPhil\")oldpar <- par(no.readonly = TRUE)postscript(\"saorlof.ps\",	pointsize=10,        height=10,        width=4,        horizontal=FALSE,        onefile=FALSE)par(mai=c(0.5,0.5,0.5,0.5))")      (format output-stream "~%plot(c(~d,~d,~d),   type=\"l\",   axes=FALSE,   xlab=\"Spiral array (SA) or line of fifths (LOF)\",   ylab=\"Note error count\",   ylim=c(0,~d),   col=~a)axis(side=1,at=1:3,labels=c(\"LOF\",\"SA (r/h=0.365)\", \"SA (r/h=2.739)\"))axis(side=2)"              (first (first list-of-nec-triples))              (second (first list-of-nec-triples))              (third (first list-of-nec-triples))              (+ 50 (apply #'max (apply #'append list-of-nec-triples)))              (if (= 1 (list-length (remove-duplicates (first list-of-nec-triples))))                (format nil "rainbow(0:8/8)[~d]" no-change-colour)                (format nil "rainbow(0:8/8)[~d]" change-colour)))      (dolist (triple (cdr list-of-nec-triples))        (format output-stream "~%points(c(~d,~d,~d),type=\"l\",col=~a)"                 (first triple)                (second triple)                (third triple)                (if (= 1 (list-length (remove-duplicates triple)))                  (format nil "rainbow(0:8/8)[~d]" no-change-colour)                  (format nil "rainbow(0:8/8)[~d]" change-colour))))      (format output-stream "~%box()dev.off()par(oldpar)setwd(WD)rm(list = ls())"))    affected-param-sets))(defun paramset-less-than-for-startorsound (ps1 ps2)  (let* ((ws1 (parameter-set-ws ps1))         (ws2 (parameter-set-ws ps2))         (wr1 (parameter-set-wr ps1))         (wr2 (parameter-set-wr ps2))         (f1 (parameter-set-f ps1))         (f2 (parameter-set-f ps2))         (r1 (parameter-set-r ps1))         (r2 (parameter-set-r ps2))         (cs1 (parameter-set-chunk-size ps1))         (cs2 (parameter-set-chunk-size ps2))         (sos1 (parameter-set-starting-or-sounding ps1))         (sos2 (parameter-set-starting-or-sounding ps2))         (sol1 (parameter-set-sa-or-lof ps1))         (sol2 (parameter-set-sa-or-lof ps2))         (sar1 (parameter-set-sa-range ps1))         (sar2 (parameter-set-sa-range ps2))         (psvec1 (list ws1 wr1 f1 cs1 sar1 sol1 r1 sos1))         (psvec2 (list ws2 wr2 f2 cs2 sar2 sol2 r2 sos2)))    (mixed-type-vector-< psvec1 psvec2)))(defun start-or-sound-analysis (&key                                 (output-directory #3P"hd:Users:dave:Documents:MIDI-to-notation:03Pitch-spelling:DPhil:")                                (no-change-colour 6)                                (change-colour 1))  (let* ((r-input-filename (make-pathname :directory (pathname-directory output-directory)                                          :name "startorsound"                                          :type "r"))         (results (read-dataset #1P"hd:Users:dave:Documents:Musedata:20040829-small-corpus:RESULTS:cc-sorted-new-results"))         (number-of-results (list-length results))         (sorted-results (sort results #'paramset-less-than-for-startorsound))         (affected-param-sets nil)         (list-of-nec-pairs (do* ((i 0 (+ i 2))                                  (l nil)                                  (this-pair nil nil))                                 ((= i number-of-results)                                  (reverse l))                              (setf this-pair                                    (list (parameter-set-note-error-count (elt sorted-results i))                                          (parameter-set-note-error-count (elt sorted-results (+ i 1)))))                              (setf l (cons this-pair l))                              (if (/= 1 (list-length (remove-duplicates this-pair)))                                (setf affected-param-sets (cons (subseq sorted-results i (+ 2 i))                                                                affected-param-sets)))))         (list-of-nec-pairs (sort (remove-duplicates list-of-nec-pairs :test #'equalp)                                  #'(lambda (t1 t2)                                      (< (list-length (remove-duplicates t1))                                         (list-length (remove-duplicates t2)))))))    (with-open-file (output-stream                     r-input-filename                     :direction :output                     :if-exists :rename-and-delete)      (format output-stream "~%rm(list = ls())WD<-getwd()setwd(\"/Users/dave/Documents/MIDI-to-notation/03Pitch-spelling/DPhil\")oldpar <- par(no.readonly = TRUE)postscript(\"startorsound.ps\",	pointsize=10,        height=10,        width=4,        horizontal=FALSE,        onefile=FALSE)par(mai=c(0.5,0.5,0.5,0.5))")      (format output-stream "~%plot(c(~d,~d),   type=\"l\",   axes=FALSE,   xlab=\"StartOrSound\",   ylab=\"Note error count\",   ylim=c(0,~d),   col=~a)axis(side=1,at=1:2,labels=c(\"Starting\",\"Sounding\"))axis(side=2)"              (first (first list-of-nec-pairs))              (second (first list-of-nec-pairs))              (+ 50 (apply #'max (apply #'append list-of-nec-pairs)))              (if (= 1 (list-length (remove-duplicates (first list-of-nec-pairs))))                (format nil "gray(0:8/8)[~d]" no-change-colour)                (format nil "gray(0:8/8)[~d]" change-colour)))      (dolist (pair (cdr list-of-nec-pairs))        (format output-stream "~%points(c(~d,~d),type=\"l\",col=~a)"                 (first pair)                (second pair)                (if (= 1 (list-length (remove-duplicates pair)))                  (format nil "gray(0:8/8)[~d]" no-change-colour)                  (format nil "gray(0:8/8)[~d]" change-colour))))      (format output-stream "~%box()dev.off()par(oldpar)setwd(WD)rm(list = ls())"))    affected-param-sets))(defun chew-chen-results-subset (&key (ws 'undefined)                                      (wr 'undefined)                                      (f 'undefined)                                      (r 'undefined)                                      (chunk-size 'undefined)                                      (starting-or-sounding 'undefined)                                      (sa-or-lof 'undefined)                                      (sa-range 'undefined)                                      (note-error-count 'undefined)                                      (pin-error-count 'undefined))  (let* ((results (read-dataset))         (test-ps (make-parameter-set :ws ws                                      :wr wr                                      :f f                                      :r r                                      :chunk-size chunk-size                                      :starting-or-sounding starting-or-sounding                                      :sa-or-lof sa-or-lof                                      :sa-range sa-range                                      :note-error-count note-error-count                                      :pin-error-count pin-error-count))         (except-for-set (let* ((efs nil))                           (if (eq 'undefined (parameter-set-ws test-ps))                             (setf efs (cons 'ws efs)))                           (if (eq 'undefined (parameter-set-wr test-ps))                             (setf efs (cons 'wr efs)))                           (if (eq 'undefined (parameter-set-f test-ps))                             (setf efs (cons 'f efs)))                           (if (eq 'undefined (parameter-set-r test-ps))                             (setf efs (cons 'r efs)))                           (if (eq 'undefined (parameter-set-chunk-size test-ps))                             (setf efs (cons 'chunk-size efs)))                           (if (eq 'undefined (parameter-set-starting-or-sounding test-ps))                             (setf efs (cons 'starting-or-sounding efs)))                           (if (eq 'undefined (parameter-set-sa-or-lof test-ps))                             (setf efs (cons 'sa-or-lof efs)))                           (if (eq 'undefined (parameter-set-sa-range test-ps))                             (setf efs (cons 'sa-range efs)))                           (if (eq 'undefined (parameter-set-note-error-count test-ps))                             (setf efs (cons 'note-error-count efs)))                           (if (eq 'undefined (parameter-set-pin-error-count test-ps))                             (setf efs (cons 'pin-error-count efs))))))    (remove-if #'null (mapcar #'(lambda (ps)                                  (if (parameter-set-equalp test-ps ps :except-for except-for-set)                                    ps))                              results))))