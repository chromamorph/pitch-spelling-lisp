;ps-dphil-partition.lisp#|Contains algorithms for partitioning the corpus into equally-sized chunks.|#;;;;;;;;;;;;;;;;;;;;;;;;;;;Following is to find best partition of test corpus into largest number of equal-sized;chunks.(defun analyse-partition (partition &optional (verbose t))  (let* ((number-of-subsets (list-length partition))         (list-of-subset-sizes (mapcar #'(lambda (class)                                           (apply #'+ (mapcar #'second class)))                                       partition))         (total-number-of-notes (apply #'+ list-of-subset-sizes))         (number-of-movements (list-length (apply #'append partition)))         (mean-subset-size (mean list-of-subset-sizes))         (sd-of-subset-size (standard-deviation list-of-subset-sizes))         (min-subset-size (apply #'min list-of-subset-sizes))         (max-subset-size (apply #'max list-of-subset-sizes))         (min-deviation (/ (- mean-subset-size min-subset-size) sd-of-subset-size))         (max-deviation (/ (- max-subset-size mean-subset-size) sd-of-subset-size))         (min-dev-as-percentage (* 100.0 (/ (- mean-subset-size min-subset-size)                                            mean-subset-size)))         (max-dev-as-percentage (* 100.0 (/ (- max-subset-size mean-subset-size)                                            mean-subset-size))))    (if verbose       (progn (format t "~%")             (format t "~%Number of subsets: ~d" number-of-subsets)             (format t "~%List of subset sizes: ~a" list-of-subset-sizes)             (format t "~%Total number of notes: ~d" total-number-of-notes)             (format t "~%Number of movements: ~d" number-of-movements)             (format t "~%Mean subset size: ~,2f" mean-subset-size)             (format t "~%Standard deviation of subset size: ~,2f" sd-of-subset-size)             (format t "~%Range of subset sizes: ~d to ~d" min-subset-size max-subset-size)             (format t "~%Range of subset size in multiples of standard deviations: ~,2f to ~,2f" min-deviation max-deviation)             (format t "~%Percentage difference between least and mean: ~,3f%" min-dev-as-percentage)             (format t "~%Percentage difference between greatest and mean: ~,3f%" max-dev-as-percentage)             (format t "~%")))    sd-of-subset-size))#|(defun multiple-partition-test-corpus (min-number-of-subsets                                       max-number-of-subsets                                       &optional (movement-sorting-order 'dec)                                       (fnp-file (choose-file-dialog :button-string "FNP LIST")))  (do* ((n min-number-of-subsets           (1+ n)))       ((> n max-number-of-subsets))    (partition-test-corpus n                            movement-sorting-order                           (read-dataset fnp-file))))|#(defun create-composer-partition (&optional (fnp-list (read-dataset (choose-file-dialog :button-string "FNP LIST"))))  (let* ((sorted-fnp-list (sort (copy-list fnp-list)                                #'string<                                :key #'first))         (partition (list (list (first sorted-fnp-list)))))    (dolist (fnp (cdr sorted-fnp-list) partition)      (if (string= (first fnp)                   (first (first (first partition)))                   :end1 4                   :end2 4)        (setf (first partition)              (cons fnp (first partition)))        (setf partition              (cons (list fnp)                    partition))))    (analyse-partition partition)))#|(defun generate-y1job-file (number-of-subsets                            &optional (fnpl (read-dataset (choose-file-dialog :button-string "fnpl"))))  (let* ((part-list (sort (mapcar #'(lambda (fnp)                                       (list (second fnp) 1))                                   fnpl)                          #'>                          :key #'first))        (total-number-of-notes (apply #'+ (mapcar #'first part-list)))        (target-stock-size (ceiling total-number-of-notes number-of-subsets)))    (dotimes (i (1- (list-length part-list)))      (if (= (first (elt part-list i))             (first (elt part-list (1+ i))))        (setf (second (elt part-list (1+ i))) (+ (second (elt part-list (1+ i)))                                                 (second (elt part-list i)))               (elt part-list i) nil)))    (setf part-list (remove-if #'null part-list))    (format t "~%0  0  5  555")    (format t "~%~d   ~d" target-stock-size number-of-subsets)    (format t "~%555   555~%")    (dolist (part part-list)      (format t "~%~d   ~d" (first part) (second part)))    (format t "~%555   555~%")))()|#(defvar *lnpl*)(setf *lnpl* '(("BACHBGCANT000905M" 1663) ("BACHBGCANT002003M" 1200) ("BACHBGCANT004206M" 2354) ("BACHBGCANT004407M" 199) ("BACHBGCANT004902M" 1979) ("BACHBGCANT012201M" 1886) ("BACHBGCANT013606M" 274) ("BACHBGCANT015303M" 307) ("BACHBGCANT015308M" 1487) ("BACHBGCANT016503M" 477) ("BACHBGCANT017104M" 1973) ("BACHBGCHORAL027601M" 562) ("BACHBGCHORAL030201M" 230) ("BACHBGCHORAL032701M" 146) ("BACHBGCHORAL035201M" 238) ("BACHBGCHORAL037701M" 153) ("BACHBGCHORAL040201M" 349) ("BACHBGCHORAL042701M" 214) ("BACHBGKEYBDWTC-I085202M" 886) ("BACHBGKEYBDWTC-I086402M" 1172) ("BACHBGKEYBDWTC-I086501M" 608) ("BACHBGKEYBDWTC-II087801M" 904) ("BACHBGKEYBDWTC-II089002M" 958) ("BACHBGORCH104302M" 2447) ("BACHBGORCH105102M" 1271) ("BACHRASMUSINVENT078201M" 568) ("BEETBHSYMNO102M" 4162) ("BEETBHSYMNO103M" 1789) ("BEETBHSYMNO104M" 6432) ("BEETBHSYMNO302M" 7999) ("BEETBHSYMNO503M" 4111) ("CORELLCHRYTRIOOP1N0101M" 206) ("CORELLCHRYTRIOOP1N0102M" 633) ("CORELLCHRYTRIOOP1N0103M" 211) ("CORELLCHRYTRIOOP1N0104M" 687) ("CORELLCHRYTRIOOP1N0201M" 241) ("CORELLCHRYTRIOOP1N0202M" 394) ("CORELLCHRYTRIOOP1N0203M" 154) ("CORELLCHRYTRIOOP1N0204M" 659) ("CORELLCHRYTRIOOP1N0302M" 947) ("CORELLCHRYTRIOOP1N0303M" 181) ("CORELLCHRYTRIOOP1N0304M" 744) ("CORELLCHRYTRIOOP1N0401M" 369) ("CORELLCHRYTRIOOP1N0402M" 152) ("CORELLCHRYTRIOOP1N0403M" 537) ("CORELLCHRYTRIOOP1N0404M" 421) ("CORELLCHRYTRIOOP1N0501M" 258) ("CORELLCHRYTRIOOP1N0502M" 569) ("CORELLCHRYTRIOOP1N0504M" 489) ("CORELLCHRYTRIOOP1N0601M" 138) ("CORELLCHRYTRIOOP1N0602M" 669) ("CORELLCHRYTRIOOP1N0603M" 257) ("CORELLCHRYTRIOOP1N0604M" 492) ("CORELLCHRYTRIOOP1N0701M" 780) ("CORELLCHRYTRIOOP1N0702M" 134) ("CORELLCHRYTRIOOP1N0703M" 657) ("CORELLCHRYTRIOOP1N0801M" 143) ("CORELLCHRYTRIOOP1N0802M" 360) ("CORELLCHRYTRIOOP1N0803M" 344) ("CORELLCHRYTRIOOP1N0804M" 250) ("CORELLCHRYTRIOOP1N0902M" 559) ("CORELLCHRYTRIOOP1N0903M" 245) ("CORELLCHRYTRIOOP1N1001M" 103) ("CORELLCHRYTRIOOP1N1003M" 406) ("CORELLCHRYTRIOOP1N1004M" 142) ("CORELLCHRYTRIOOP1N1101M" 162) ("CORELLCHRYTRIOOP1N1103M" 210) ("CORELLCHRYTRIOOP1N1201M" 275) ("CORELLCHRYTRIOOP1N1203M" 125) ("CORELLCHRYTRIOOP1N1204M" 975) ("CORELLCHRYTRIOOP2N0101M" 190) ("CORELLCHRYTRIOOP2N0102M" 314) ("CORELLCHRYTRIOOP2N0103M" 217) ("CORELLCHRYTRIOOP2N0104M" 103) ("CORELLCHRYTRIOOP2N0201M" 424) ("CORELLCHRYTRIOOP2N0202M" 348) ("CORELLCHRYTRIOOP2N0301M" 193) ("CORELLCHRYTRIOOP2N0302M" 437) ("CORELLCHRYTRIOOP2N0303M" 195) ("CORELLCHRYTRIOOP2N0401M" 261) ("CORELLCHRYTRIOOP2N0402M" 295) ("CORELLCHRYTRIOOP2N0404M" 456) ("CORELLCHRYTRIOOP2N0501M" 163) ("CORELLCHRYTRIOOP2N0503M" 118) ("CORELLCHRYTRIOOP2N0504M" 338) ("CORELLCHRYTRIOOP2N0601M" 357) ("CORELLCHRYTRIOOP2N0602M" 211) ("CORELLCHRYTRIOOP2N0603M" 547) ("CORELLCHRYTRIOOP2N0701M" 261) ("CORELLCHRYTRIOOP2N0702M" 292) ("CORELLCHRYTRIOOP2N0703M" 252) ("CORELLCHRYTRIOOP2N0801M" 194) ("CORELLCHRYTRIOOP2N0802M" 445) ("CORELLCHRYTRIOOP2N0803M" 188) ("CORELLCHRYTRIOOP2N0804M" 276) ("CORELLCHRYTRIOOP2N0901M" 384) ("CORELLCHRYTRIOOP2N0903M" 339) ("CORELLCHRYTRIOOP2N1001M" 147) ("CORELLCHRYTRIOOP2N1003M" 130) ("CORELLCHRYTRIOOP2N1004M" 354) ("CORELLCHRYTRIOOP2N1102M" 395) ("CORELLCHRYTRIOOP2N1103M" 391) ("HANDELARNOLDSEMELE31M" 610) ("HANDELCHRYARIODA10M" 852) ("HANDELCHRYARIODA14M" 1220) ("HANDELCHRYARIODA37M" 1107) ("HANDELCHRYARIODA81M" 1224) ("HANDELCHRYMESSIA1-22CM" 1278) ("HANDELCHRYMESSIA2-15M" 1167) ("HANDELCHRYMESSIA3-04M" 2106) ("HANDELCHRYORCHOP201B01M" 796) ("HANDELCHRYORCHOP20303M" 496) ("HANDELCHRYORCHOP20503M" 296) ("HANDELCHRYORCHOP20904M" 1749) ("HANDELCHRYORCHOP30204M" 615) ("HANDELCHRYORCHOP30504M" 915) ("HANDELCHRYORCHOP50104M" 703) ("HANDELCHRYORCHOP50303M" 227) ("HANDELCHRYORCHOP50604M" 1186) ("HANDELCHRYSUSANN16M" 1286) ("HANDELCHRYSUSANN34M" 324) ("HANDELCHRYSUSANN41M" 1639) ("HANDELCHRYSUSANN59M" 136) ("HANDELHICKSCLORI27M" 1241) ("HANDELHICKSJUDASM08BM" 664) ("HANDELHICKSJUDASM19M" 433) ("HANDELHICKSOTT02M" 1443) ("HANDELHICKSOTT38M" 696) ("HANDELHICKSOTT69M" 91) ("HAYDNBHSYMS-00102M" 1504) ("HAYDNDOVERQUARTOP54N203M" 628) ("HAYDNDOVERQUARTOP55N101M" 2512) ("HAYDNDOVERQUARTOP55N302M" 1514) ("HAYDNDOVERQUARTOP64N102M" 652) ("HAYDNDOVERQUARTOP64N202M" 1333) ("HAYDNDOVERSYMS-09902M" 3391) ("HAYDNDOVERSYMS-10004M" 6384) ("HAYDNDOVERSYMS-10202M" 2343) ("HAYDNDOVERSYMS-10302M" 4229) ("MOZARTBHCONCK45903M" 8194) ("MOZARTBHCONCK62202M" 2072) ("MOZARTBHDUOSK42302M" 896) ("MOZARTBHDUOSK42402M" 634) ("MOZARTBHQRTETSK08003M" 514) ("MOZARTBHQRTETSK15602M" 1012) ("MOZARTBHQRTETSK15802M" 1296) ("MOZARTBHQRTETSK16002M" 942) ("MOZARTBHSYMK50401M" 8934) ("TELEMABRUSSE1734_40102M" 1070) ("TELEMABRUSSE1734_40103M" 227) ("TELEMABRUSSE1734_40202M" 809) ("TELEMABRUSSE1734_40203M" 249) ("TELEMABRUSSE1734_40302M" 904) ("TELEMABRUSSE1734_40303M" 585) ("TELEMABRUSSE1734_40402M" 692) ("TELEMABRUSSE1734_40403M" 256) ("TELEMABRUSSE1734_40503M" 579) ("TELEMABRUSSE1734_40603M" 269) ("TELEMABRUSSE1734_40704M" 642) ("TELEMABRUSSE1734_40804M" 827) ("TELEMABRUSSE1734_40903M" 292) ("TELEMABRUSSE1734_40904M" 669) ("TELEMABRUSSE1734_41003M" 282) ("TELEMABRUSSE1734_41004M" 898) ("TELEMABRUSSE1734_41104M" 657) ("TELEMABRUSSE1734_41204M" 787) ("TELEMAMAGDEBGERMAN01BM" 1886) ("TELEMAMAGDEBGERMAN04M" 1360) ("TELEMAMAGDEBGERMAN05M" 36) ("TELEMAMAGDEBGERMAN09M" 115) ("TELEMAMAGDEBGERMAN13M" 24) ("TELEMAMAGDEBGERMAN19M" 77) ("TELEMAMAGDEBGERMAN21M" 78) ("TELEMAMAGDEBGERMAN22M" 901) ("TELEMAMAGDEBGERMAN26M" 35) ("TELEMAMAGDEBGERMAN27M" 1048) ("TELEMAMAGDEBGERMAN30M" 68) ("TELEMAMAGDEBGERMAN34M" 93) ("TELEMAMAGDEBORPHEU1012M" 218) ("TELEMAMAGDEBORPHEU1021M" 1037) ("TELEMAMAGDEBORPHEU1025M" 106) ("TELEMAMAGDEBORPHEU1051M" 827) ("TELEMAMAGDEBORPHEU1083M" 649) ("TELEMAMAGDEBORPHEU1092M" 980) ("TELEMAMAGDEBORPHEU1103M" 388) ("TELEMAMAGDEBORPHEU2015M" 24) ("TELEMAMAGDEBORPHEU2031M" 684) ("TELEMAMAGDEBORPHEU2062M" 670) ("TELEMAMAGDEBORPHEU2081M" 97) ("TELEMAMAGDEBORPHEU3013M" 283) ("TELEMAMAGDEBORPHEU3031M" 99) ("TELEMAMAGDEBORPHEU3034M" 589) ("TELEMAMAGDEBORPHEU3052M" 831) ("TELEMAMAGDEBORPHEU3074M" 270) ("TELEMAMAGDEBORPHEU3076M" 223) ("TELEMAMAGDEBORPHEU3082M" 110) ("VIVALDDOVEROP30102M" 590) ("VIVALDDOVEROP30202M" 511) ("VIVALDDOVEROP30401M" 526) ("VIVALDDOVEROP8011M" 2291) ("VIVALDDOVEROP8032M" 139) ("VIVALDDOVEROP8041M" 3072) ("VIVALDDOVEROP8063M" 1558) ("VIVALDDOVEROP8092M" 256) ("VIVALDDOVEROP8113M" 2529) ("VIVALDDOVEROP8122M" 158) ("VIVALDLECENEOP100204M" 82) ("VIVALDLECENEOP100302M" 200) ("VIVALDLECENEOP100401M" 1515) ("VIVALDLECENEOP100603M" 2051) ("VIVALDLECENEOP3032M" 440) ("VIVALDLECENEOP3062M" 290) ("VIVALDLECENEOP3091M" 1193) ("VIVALDLECENEOP3121M" 1941) ("VIVALDLECENEOP8023M" 3165) ("VIVALDLECENEOP8061M" 1990)))#|Suppose S is a list of N ordered pairs in which the first element is a label and the secondelement is a positive integer:S = ((l1, x1), (l2, x2), (l3, x3), ... (lN, xN))and we want to partition S into M subsets such that the sum of the xi in each subset is asnearly as possible the same.partition-1===========This algorithm simply sorts S to get S' so that the elements are in decreasing order of x.Then it allocates the first M elements in S' to different subsets. Then it allocates the second M elements in S' to different subsets in the opposite order and so on.If M = 3 and N = 10element		subset	f=(floor e m)	k=f mod 2	g = e mod M	M-1-g0		0	0		0		0		21		1	0		0		1		12		2	0		0		2		03		2	1		1		0		24		1	1		1		1		15		0	1		1		2		06		0	2		0		0		27		1	2		0		1		18		2	2		0		2		09		2	3		1		0		2sd = 2091.45|#(defun partition-1 (number-of-subsets                     &optional                    (label-number-pair-list (read-dataset (choose-file-dialog :button-string "LNPL")))                    (verbose nil))  (let* ((sorted-lnp-list (sort (copy-list label-number-pair-list)                                #'>                                :key #'second))         (partition (let ((p nil))                      (dotimes (i number-of-subsets p)                        (setf p (cons nil p))))))    (dotimes (e (list-length sorted-lnp-list) partition)      (let* ((f (floor e number-of-subsets))             (k (mod f 2))             (g (mod e number-of-subsets))             (m-1-g (- number-of-subsets 1 g))             (s (if (zerop k)                  g                  m-1-g)))        (setf (elt partition s)              (cons (elt sorted-lnp-list e)                    (elt partition s)))))    (if verbose (pprint partition))    (analyse-partition partition)))#|partition-2 first sorts the elements in the list into decreasing order of size.Then it fills up each subset in turn by adding to each subset the movement that bestfits the gap between the current sum of the current subset and the target subset size.A subset is considered full when none of the remaining movements improves the gap betweenthe current sum of the subset and the target subset size.sd = 16.79|#(defun partition-2 (number-of-subsets                    &optional                    (file-name-nnotes-pair-list                      (read-dataset (choose-file-dialog :button-string "FNP LIST")))                    (verbose nil)                    &key                    (movement-sorting-order 'dec))  (let* ((sorted-fnp-list (sort (copy-list file-name-nnotes-pair-list)                                (case movement-sorting-order                                  (dec #'>)                                  (inc #'<)                                  (rand #'(lambda (n1 n2)                                            n1 n2                                            (if (zerop (random 2))                                              t nil))))                                :key #'second))         (total-number-of-notes (apply #'+ (mapcar #'second sorted-fnp-list)))         (cardinality-of-partition (if number-of-subsets                                     number-of-subsets                                     (round total-number-of-notes (apply #'max (mapcar #'second sorted-fnp-list)))))         (target-subset-size (round total-number-of-notes cardinality-of-partition)))    (do* ((partition nil)          (this-subset nil)          (size-of-this-subset 0))         ((and (null sorted-fnp-list)               (null this-subset))          (if verbose (pprint partition))          (analyse-partition partition)          )      (if (null this-subset)        (setf this-subset (list (first sorted-fnp-list))              size-of-this-subset (second (first sorted-fnp-list))              sorted-fnp-list (cdr sorted-fnp-list)))      (if (< size-of-this-subset target-subset-size)        (let* ((remainder (- target-subset-size size-of-this-subset))               (best-fit-new-movement (let* ((bfnm nil))                                        (dolist (fnp sorted-fnp-list bfnm)                                          (if (or (and (null bfnm)                                                       (< (second fnp) (* 2 remainder)))                                                  (and bfnm                                                       (< (abs (- remainder (second fnp)))                                                          (abs (- remainder (second bfnm))))                                                       (< (second fnp) (* 2 remainder))))                                            (setf bfnm fnp))))))          (if best-fit-new-movement            (setf this-subset (cons best-fit-new-movement this-subset)                  size-of-this-subset (+ size-of-this-subset                                         (second best-fit-new-movement))                  (elt sorted-fnp-list (position best-fit-new-movement                                                 sorted-fnp-list                                                 :test #'equalp))                  nil                  sorted-fnp-list (remove-if #'null sorted-fnp-list))            (progn (if verbose (format t "~%Subset: ~a~%Size: ~d~%"                                        this-subset                                        size-of-this-subset))                   (setf partition                         (cons this-subset partition)                         this-subset nil                         size-of-this-subset 0)                   )))        (progn (if verbose (format t "~%Subset: ~a~%Size: ~d~%"                                    this-subset                                    size-of-this-subset))               (setf partition                     (cons this-subset partition)                     this-subset nil                     size-of-this-subset 0)               )))))#|partition-3 is basically a greedy algorithm. It first sorts the elements into decreasing order of size and then allocates each element tothe smallest subset so far.sd = 17.74|#(defun partition-3 (number-of-subsets                    &optional                    (lnpl (read-dataset (choose-file-dialog :button-string "LNPL")))                    (verbose nil))  (let* ((sorted-lnpl (sort (copy-list lnpl)                            #'>                            :key #'second))         (partition (let ((p nil))                      (dotimes (i number-of-subsets p)                        (setf p (cons nil p)))))         (sum-list (let ((p nil))                      (dotimes (i number-of-subsets p)                        (setf p (cons 0 p))))))    (dolist (movement sorted-lnpl)      (let* ((smallest-subset (position (apply #'min sum-list)                                        sum-list)))        (setf (elt partition smallest-subset)              (cons movement (elt partition smallest-subset))              (elt sum-list smallest-subset)              (+ (elt sum-list smallest-subset)                 (second movement)))))    (if verbose (pprint partition))    (analyse-partition partition)))#|partition-4 first sorts the elements into decreasing order of size and then allocateseach element to the subset s such that targetsize - nnotes(s) is most similar to the sizeof the current element.|#(defun partition-4 (number-of-subsets                    &optional                    (lnpl (read-dataset (choose-file-dialog :button-string "LNPL")))                    (verbose nil))  (let* ((sorted-lnpl (sort (copy-list lnpl)                            #'>                            :key #'second))         (partition (let ((p nil))                      (dotimes (i number-of-subsets p)                        (setf p (cons nil p)))))         (target-subset-size (/ (apply #'+ (mapcar #'second lnpl))                                number-of-subsets))         (sum-list (let ((p nil))                      (dotimes (i number-of-subsets p)                        (setf p (cons 0 p)))))         (index-list (let ((il nil)) (dotimes (i number-of-subsets (reverse il)) (setf il (cons i il))))))    (dolist (movement sorted-lnpl)      (let* ((this-movement-size (second movement))             (remainder-list (mapcar #'(lambda (sum)                                         (- target-subset-size sum))                                     sum-list))             (difference-list (mapcar #'(lambda (remainder)                                          (abs (- remainder this-movement-size)))                                      remainder-list))             (valid-list (mapcar #'(lambda (remainder)                                     (> remainder 0))                                 remainder-list))             (subset-list (mapcar #'list index-list valid-list difference-list remainder-list))             (best-subset (let* ((bs nil)                                 (best-difference nil))                            (dotimes (i number-of-subsets bs)                              (let* ((this-subset (elt subset-list i)))                                (if (second this-subset)                                  (if (or (and (null bs)                                               (< this-movement-size (* 2 (fourth this-subset))))                                          (and bs                                               (< (third this-subset) best-difference)                                               (< this-movement-size (* 2 (fourth this-subset)))))                                    (setf bs i                                          best-difference (third this-subset)))))))))        (setf (elt partition best-subset)              (cons movement (elt partition best-subset))              (elt sum-list best-subset)              (+ (elt sum-list best-subset)                 (second movement)))))    (if verbose (pprint partition))    (analyse-partition partition)))#|Geraint's suggestionHe claims his algorithm generates the following output for M=22:(standard-deviation '(8934889789148915891389178897891288988915891089128914891588888917891488848905891689168869))(pprint (setf geraints-partition (mapcar #'(lambda (movement-class)                                     (sort movement-class #'string<))                                 '(("MOZARTBHSYMK50401M")  ("HANDELCHRYORCHOP50104M" "MOZARTBHCONCK45903M") ("HANDELCHRYORCHOP30504M" "BEETBHSYMNO302M") ("TELEMAMAGDEBGERMAN05M" "BACHBGORCH104302M" "BEETBHSYMNO104M") ("VIVALDDOVEROP8113M" "HAYDNDOVERSYMS-10004M") ("VIVALDDOVEROP30401M" "BEETBHSYMNO102M" "HAYDNDOVERSYMS-10302M") ("TELEMAMAGDEBGERMAN26M" "TELEMAMAGDEBGERMAN04M" "HAYDNDOVERSYMS-09902M" "BEETBHSYMNO503M") ("CORELLCHRYTRIOOP2N0501M" "HAYDNDOVERQUARTOP55N101M" "VIVALDDOVEROP8041M" "VIVALDLECENEOP8023M") ("TELEMAMAGDEBORPHEU2015M" "TELEMAMAGDEBGERMAN01BM" "VIVALDDOVEROP8011M" "HAYDNDOVERSYMS-10202M" "BACHBGCANT004206M") ("HANDELHICKSOTT38M" "VIVALDLECENEOP8061M" "VIVALDLECENEOP100603M" "MOZARTBHCONCK62202M" "HANDELCHRYMESSIA3-04M") ("TELEMAMAGDEBGERMAN13M" "HANDELCHRYARIODA37M" "BACHBGCANT012201M" "VIVALDLECENEOP3121M" "BACHBGCANT017104M" "BACHBGCANT004902M") ("MOZARTBHQRTETSK08003M" "VIVALDDOVEROP8063M" "HANDELCHRYSUSANN41M" "BACHBGCANT000905M" "HANDELCHRYORCHOP20904M" "BEETBHSYMNO103M") ("CORELLCHRYTRIOOP2N0503M" "HAYDNDOVERQUARTOP64N202M" "HANDELHICKSOTT02M" "BACHBGCANT015308M" "HAYDNBHSYMS-00102M" "HAYDNDOVERQUARTOP55N302M" "VIVALDLECENEOP100401M") ("TELEMAMAGDEBORPHEU3031M" "HANDELCHRYARIODA14M" "HANDELCHRYARIODA81M" "HANDELHICKSCLORI27M" "BACHBGORCH105102M" "HANDELCHRYMESSIA1-22CM" "HANDELCHRYSUSANN16M"  "MOZARTBHQRTETSK15802M") ("HANDELCHRYARIODA10M" "TELEMAMAGDEBGERMAN27M" "TELEMABRUSSE1734_40102M" "HANDELCHRYMESSIA2-15M" "BACHBGKEYBDWTC-I086402M" "HANDELCHRYORCHOP50604M" "VIVALDLECENEOP3091M"  "BACHBGCANT002003M") ("CORELLCHRYTRIOOP1N0501M" "BACHBGKEYBDWTC-II087801M" "TELEMABRUSSE1734_40302M" "MOZARTBHQRTETSK16002M" "CORELLCHRYTRIOOP1N0302M" "BACHBGKEYBDWTC-II089002M"  "CORELLCHRYTRIOOP1N1204M" "TELEMAMAGDEBORPHEU1092M" "MOZARTBHQRTETSK15602M" "TELEMAMAGDEBORPHEU1021M") ("CORELLCHRYTRIOOP2N0404M" "TELEMABRUSSE1734_41204M" "HANDELCHRYORCHOP201B01M" "TELEMABRUSSE1734_40202M" "TELEMABRUSSE1734_40804M" "TELEMAMAGDEBORPHEU1051M"  "TELEMAMAGDEBORPHEU3052M" "BACHBGKEYBDWTC-I085202M" "MOZARTBHDUOSK42302M" "TELEMABRUSSE1734_41004M" "TELEMAMAGDEBGERMAN22M") ("HAYDNDOVERQUARTOP64N102M" "CORELLCHRYTRIOOP1N0703M" "TELEMABRUSSE1734_41104M" "CORELLCHRYTRIOOP1N0204M" "HANDELHICKSJUDASM08BM" "CORELLCHRYTRIOOP1N0602M"  "TELEMABRUSSE1734_40904M" "TELEMAMAGDEBORPHEU2062M" "TELEMAMAGDEBORPHEU2031M" "CORELLCHRYTRIOOP1N0104M" "TELEMABRUSSE1734_40402M" "CORELLCHRYTRIOOP1N0304M"  "CORELLCHRYTRIOOP1N0701M") ("CORELLCHRYTRIOOP1N1003M" "BACHRASMUSINVENT078201M" "CORELLCHRYTRIOOP1N0502M" "TELEMABRUSSE1734_40503M" "TELEMABRUSSE1734_40303M" "TELEMAMAGDEBORPHEU3034M"  "VIVALDDOVEROP30102M" "BACHBGKEYBDWTC-I086501M" "HANDELARNOLDSEMELE31M" "HANDELCHRYORCHOP30204M" "HAYDNDOVERQUARTOP54N203M" "CORELLCHRYTRIOOP1N0102M"  "MOZARTBHDUOSK42402M" "TELEMABRUSSE1734_40704M" "TELEMAMAGDEBORPHEU1083M") ("TELEMAMAGDEBGERMAN21M" "TELEMAMAGDEBORPHEU1103M" "CORELLCHRYTRIOOP2N1103M" "CORELLCHRYTRIOOP1N0202M" "CORELLCHRYTRIOOP2N1102M" "CORELLCHRYTRIOOP1N0404M"  "CORELLCHRYTRIOOP2N0201M" "HANDELHICKSJUDASM19M" "CORELLCHRYTRIOOP2N0302M" "VIVALDLECENEOP3032M" "CORELLCHRYTRIOOP2N0802M" "BACHBGCANT016503M" "CORELLCHRYTRIOOP1N0504M"  "CORELLCHRYTRIOOP1N0604M" "HANDELCHRYORCHOP20303M" "VIVALDDOVEROP30202M" "CORELLCHRYTRIOOP1N0403M" "CORELLCHRYTRIOOP2N0603M" "CORELLCHRYTRIOOP1N0902M"  "BACHBGCHORAL027601M") ("VIVALDDOVEROP8092M" "CORELLCHRYTRIOOP1N0603M" "CORELLCHRYTRIOOP2N0401M" "CORELLCHRYTRIOOP2N0701M" "TELEMABRUSSE1734_40603M" "TELEMAMAGDEBORPHEU3074M"  "BACHBGCANT013606M" "CORELLCHRYTRIOOP1N1201M" "CORELLCHRYTRIOOP2N0804M" "TELEMABRUSSE1734_41003M" "TELEMAMAGDEBORPHEU3013M" "VIVALDLECENEOP3062M"  "CORELLCHRYTRIOOP2N0702M" "TELEMABRUSSE1734_40903M" "CORELLCHRYTRIOOP2N0402M" "HANDELCHRYORCHOP20503M" "BACHBGCANT015303M" "CORELLCHRYTRIOOP2N0102M"  "HANDELCHRYSUSANN34M" "CORELLCHRYTRIOOP2N0504M" "CORELLCHRYTRIOOP2N0903M" "CORELLCHRYTRIOOP1N0803M" "CORELLCHRYTRIOOP2N0202M" "BACHBGCHORAL040201M"  "CORELLCHRYTRIOOP2N1004M" "CORELLCHRYTRIOOP2N0601M" "CORELLCHRYTRIOOP1N0802M" "CORELLCHRYTRIOOP1N0401M" "CORELLCHRYTRIOOP2N0901M") ("TELEMAMAGDEBGERMAN30M" "TELEMAMAGDEBGERMAN19M" "VIVALDLECENEOP100204M" "HANDELHICKSOTT69M" "TELEMAMAGDEBGERMAN34M" "TELEMAMAGDEBORPHEU2081M" "CORELLCHRYTRIOOP1N1001M"  "CORELLCHRYTRIOOP2N0104M" "TELEMAMAGDEBORPHEU1025M" "TELEMAMAGDEBORPHEU3082M" "TELEMAMAGDEBGERMAN09M" "CORELLCHRYTRIOOP1N1203M" "CORELLCHRYTRIOOP2N1003M"  "CORELLCHRYTRIOOP1N0702M" "HANDELCHRYSUSANN59M" "CORELLCHRYTRIOOP1N0601M" "VIVALDDOVEROP8032M" "CORELLCHRYTRIOOP1N1004M" "CORELLCHRYTRIOOP1N0801M" "BACHBGCHORAL032701M"  "CORELLCHRYTRIOOP2N1001M" "CORELLCHRYTRIOOP1N0402M" "BACHBGCHORAL037701M" "CORELLCHRYTRIOOP1N0203M" "VIVALDDOVEROP8122M" "CORELLCHRYTRIOOP1N1101M"  "CORELLCHRYTRIOOP1N0303M" "CORELLCHRYTRIOOP2N0803M" "CORELLCHRYTRIOOP2N0101M" "CORELLCHRYTRIOOP2N0301M" "CORELLCHRYTRIOOP2N0801M" "CORELLCHRYTRIOOP2N0303M"  "BACHBGCANT004407M" "VIVALDLECENEOP100302M" "CORELLCHRYTRIOOP1N0101M" "CORELLCHRYTRIOOP1N1103M" "CORELLCHRYTRIOOP1N0103M" "CORELLCHRYTRIOOP2N0602M" "BACHBGCHORAL042701M"  "CORELLCHRYTRIOOP2N0103M" "TELEMAMAGDEBORPHEU1012M" "TELEMAMAGDEBORPHEU3076M" "HANDELCHRYORCHOP50303M" "TELEMABRUSSE1734_40103M" "BACHBGCHORAL030201M"  "BACHBGCHORAL035201M" "CORELLCHRYTRIOOP1N0201M" "CORELLCHRYTRIOOP1N0903M" "TELEMABRUSSE1734_40203M" "CORELLCHRYTRIOOP1N0804M" "CORELLCHRYTRIOOP2N0703M"  "TELEMABRUSSE1734_40403M")))))|#(defun partition-5 (number-of-subsets                    &optional                    (lnpl (read-dataset (choose-file-dialog :button-string "LNPL")))                    (verbose nil)                    (max-max-subset-size-increase 30))  (do* ((sorted-lnpl (sort (copy-list (reverse lnpl))                           #'>                           :key #'second))        (max-subset-size (/ (apply #'+ (mapcar #'second lnpl))                            number-of-subsets)                         (1+ max-subset-size))        (max-max-subset-size (+ max-subset-size                                 max-max-subset-size-increase))        (best-partition nil)        (best-sd nil))       ((> max-subset-size           max-max-subset-size)        (if verbose (pprint best-partition))        (analyse-partition best-partition))    (let* ((partition (let ((p nil)) (dotimes (i number-of-subsets p) (setf p (cons nil p)))))           (sum-list (let ((p nil)) (dotimes (i number-of-subsets p) (setf p (cons 0 p)))))           (sd nil)           (valid-partition t))      (dolist (mvt sorted-lnpl)        (do* ((size-of-mvt (second mvt))              (i 0 (1+ i)))             ((or (= i number-of-subsets)                  (< size-of-mvt (- max-subset-size (elt sum-list i)))                  (zerop (elt sum-list i)))              (if (< i number-of-subsets)                (setf (elt partition i)                      (cons mvt (elt partition i))                      (elt sum-list i)                      (+ (elt sum-list i)                         size-of-mvt))                (progn (format t "~%Unable to allocate movement. (~a)" mvt)                       (setf valid-partition nil))))))      (if valid-partition        (progn (setf sd (analyse-partition partition nil))               (if (or (null best-sd)                       (< sd best-sd))                 (setf best-partition partition                       best-sd sd)))))))#|(pprint (setf partition-5-partition (mapcar #'(lambda (movement-class)            (sort (mapcar #'first movement-class) #'string<))        '((("MOZARTBHSYMK50401M" 8934)) (("HANDELCHRYORCHOP50104M" 703) ("MOZARTBHCONCK45903M" 8194)) (("HANDELCHRYORCHOP30504M" 915) ("BEETBHSYMNO302M" 7999)) (("TELEMAMAGDEBGERMAN05M" 36) ("BACHBGORCH104302M" 2447) ("BEETBHSYMNO104M" 6432)) (("VIVALDDOVEROP8113M" 2529) ("HAYDNDOVERSYMS-10004M" 6384)) (("VIVALDDOVEROP30401M" 526) ("BEETBHSYMNO102M" 4162) ("HAYDNDOVERSYMS-10302M" 4229)) (("TELEMAMAGDEBGERMAN26M" 35) ("TELEMAMAGDEBGERMAN04M" 1360) ("HAYDNDOVERSYMS-09902M" 3391) ("BEETBHSYMNO503M" 4111)) (("CORELLCHRYTRIOOP2N0501M" 163) ("HAYDNDOVERQUARTOP55N101M" 2512) ("VIVALDDOVEROP8041M" 3072) ("VIVALDLECENEOP8023M" 3165)) (("TELEMAMAGDEBORPHEU2015M" 24) ("TELEMAMAGDEBGERMAN01BM" 1886) ("VIVALDDOVEROP8011M" 2291) ("HAYDNDOVERSYMS-10202M" 2343) ("BACHBGCANT004206M" 2354)) (("HANDELHICKSOTT38M" 696) ("VIVALDLECENEOP8061M" 1990) ("VIVALDLECENEOP100603M" 2051) ("MOZARTBHCONCK62202M" 2072) ("HANDELCHRYMESSIA3-04M" 2106)) (("TELEMAMAGDEBGERMAN13M" 24) ("HANDELCHRYARIODA37M" 1107) ("BACHBGCANT012201M" 1886) ("VIVALDLECENEOP3121M" 1941) ("BACHBGCANT017104M" 1973) ("BACHBGCANT004902M" 1979)) (("MOZARTBHQRTETSK08003M" 514) ("VIVALDDOVEROP8063M" 1558) ("HANDELCHRYSUSANN41M" 1639) ("BACHBGCANT000905M" 1663) ("HANDELCHRYORCHOP20904M" 1749) ("BEETBHSYMNO103M" 1789)) (("CORELLCHRYTRIOOP2N0503M" 118) ("HAYDNDOVERQUARTOP64N202M" 1333) ("HANDELHICKSOTT02M" 1443) ("BACHBGCANT015308M" 1487) ("HAYDNBHSYMS-00102M" 1504) ("HAYDNDOVERQUARTOP55N302M" 1514)  ("VIVALDLECENEOP100401M" 1515)) (("TELEMAMAGDEBORPHEU3031M" 99) ("HANDELCHRYARIODA14M" 1220) ("HANDELCHRYARIODA81M" 1224) ("HANDELHICKSCLORI27M" 1241) ("BACHBGORCH105102M" 1271) ("HANDELCHRYMESSIA1-22CM" 1278)  ("HANDELCHRYSUSANN16M" 1286) ("MOZARTBHQRTETSK15802M" 1296)) (("HANDELCHRYARIODA10M" 852) ("TELEMAMAGDEBGERMAN27M" 1048) ("TELEMABRUSSE1734_40102M" 1070) ("HANDELCHRYMESSIA2-15M" 1167) ("BACHBGKEYBDWTC-I086402M" 1172) ("HANDELCHRYORCHOP50604M" 1186)  ("VIVALDLECENEOP3091M" 1193) ("BACHBGCANT002003M" 1200)) (("CORELLCHRYTRIOOP1N0501M" 258) ("BACHBGKEYBDWTC-II087801M" 904) ("TELEMABRUSSE1734_40302M" 904) ("MOZARTBHQRTETSK16002M" 942) ("CORELLCHRYTRIOOP1N0302M" 947) ("BACHBGKEYBDWTC-II089002M" 958)  ("CORELLCHRYTRIOOP1N1204M" 975) ("TELEMAMAGDEBORPHEU1092M" 980) ("MOZARTBHQRTETSK15602M" 1012) ("TELEMAMAGDEBORPHEU1021M" 1037)) (("CORELLCHRYTRIOOP2N0404M" 456) ("TELEMABRUSSE1734_41204M" 787) ("HANDELCHRYORCHOP201B01M" 796) ("TELEMABRUSSE1734_40202M" 809) ("TELEMABRUSSE1734_40804M" 827) ("TELEMAMAGDEBORPHEU1051M" 827)  ("TELEMAMAGDEBORPHEU3052M" 831) ("BACHBGKEYBDWTC-I085202M" 886) ("MOZARTBHDUOSK42302M" 896) ("TELEMABRUSSE1734_41004M" 898) ("TELEMAMAGDEBGERMAN22M" 901)) (("HAYDNDOVERQUARTOP64N102M" 652) ("CORELLCHRYTRIOOP1N0703M" 657) ("TELEMABRUSSE1734_41104M" 657) ("CORELLCHRYTRIOOP1N0204M" 659) ("HANDELHICKSJUDASM08BM" 664) ("CORELLCHRYTRIOOP1N0602M" 669)  ("TELEMABRUSSE1734_40904M" 669) ("TELEMAMAGDEBORPHEU2062M" 670) ("TELEMAMAGDEBORPHEU2031M" 684) ("CORELLCHRYTRIOOP1N0104M" 687) ("TELEMABRUSSE1734_40402M" 692) ("CORELLCHRYTRIOOP1N0304M" 744)  ("CORELLCHRYTRIOOP1N0701M" 780)) (("CORELLCHRYTRIOOP1N1003M" 406) ("BACHRASMUSINVENT078201M" 568) ("CORELLCHRYTRIOOP1N0502M" 569) ("TELEMABRUSSE1734_40503M" 579) ("TELEMABRUSSE1734_40303M" 585) ("TELEMAMAGDEBORPHEU3034M" 589)  ("VIVALDDOVEROP30102M" 590) ("BACHBGKEYBDWTC-I086501M" 608) ("HANDELARNOLDSEMELE31M" 610) ("HANDELCHRYORCHOP30204M" 615) ("HAYDNDOVERQUARTOP54N203M" 628) ("CORELLCHRYTRIOOP1N0102M" 633)  ("MOZARTBHDUOSK42402M" 634) ("TELEMABRUSSE1734_40704M" 642) ("TELEMAMAGDEBORPHEU1083M" 649)) (("TELEMAMAGDEBGERMAN21M" 78) ("TELEMAMAGDEBORPHEU1103M" 388) ("CORELLCHRYTRIOOP2N1103M" 391) ("CORELLCHRYTRIOOP1N0202M" 394) ("CORELLCHRYTRIOOP2N1102M" 395) ("CORELLCHRYTRIOOP1N0404M" 421)  ("CORELLCHRYTRIOOP2N0201M" 424) ("HANDELHICKSJUDASM19M" 433) ("CORELLCHRYTRIOOP2N0302M" 437) ("VIVALDLECENEOP3032M" 440) ("CORELLCHRYTRIOOP2N0802M" 445) ("BACHBGCANT016503M" 477)  ("CORELLCHRYTRIOOP1N0504M" 489) ("CORELLCHRYTRIOOP1N0604M" 492) ("HANDELCHRYORCHOP20303M" 496) ("VIVALDDOVEROP30202M" 511) ("CORELLCHRYTRIOOP1N0403M" 537) ("CORELLCHRYTRIOOP2N0603M" 547)  ("CORELLCHRYTRIOOP1N0902M" 559) ("BACHBGCHORAL027601M" 562)) (("VIVALDDOVEROP8092M" 256) ("CORELLCHRYTRIOOP1N0603M" 257) ("CORELLCHRYTRIOOP2N0401M" 261) ("CORELLCHRYTRIOOP2N0701M" 261) ("TELEMABRUSSE1734_40603M" 269) ("TELEMAMAGDEBORPHEU3074M" 270)  ("BACHBGCANT013606M" 274) ("CORELLCHRYTRIOOP1N1201M" 275) ("CORELLCHRYTRIOOP2N0804M" 276) ("TELEMABRUSSE1734_41003M" 282) ("TELEMAMAGDEBORPHEU3013M" 283) ("VIVALDLECENEOP3062M" 290)  ("CORELLCHRYTRIOOP2N0702M" 292) ("TELEMABRUSSE1734_40903M" 292) ("CORELLCHRYTRIOOP2N0402M" 295) ("HANDELCHRYORCHOP20503M" 296) ("BACHBGCANT015303M" 307) ("CORELLCHRYTRIOOP2N0102M" 314)  ("HANDELCHRYSUSANN34M" 324) ("CORELLCHRYTRIOOP2N0504M" 338) ("CORELLCHRYTRIOOP2N0903M" 339) ("CORELLCHRYTRIOOP1N0803M" 344) ("CORELLCHRYTRIOOP2N0202M" 348) ("BACHBGCHORAL040201M" 349)  ("CORELLCHRYTRIOOP2N1004M" 354) ("CORELLCHRYTRIOOP2N0601M" 357) ("CORELLCHRYTRIOOP1N0802M" 360) ("CORELLCHRYTRIOOP1N0401M" 369) ("CORELLCHRYTRIOOP2N0901M" 384)) (("TELEMAMAGDEBGERMAN30M" 68) ("TELEMAMAGDEBGERMAN19M" 77) ("VIVALDLECENEOP100204M" 82) ("HANDELHICKSOTT69M" 91) ("TELEMAMAGDEBGERMAN34M" 93) ("TELEMAMAGDEBORPHEU2081M" 97)  ("CORELLCHRYTRIOOP1N1001M" 103) ("CORELLCHRYTRIOOP2N0104M" 103) ("TELEMAMAGDEBORPHEU1025M" 106) ("TELEMAMAGDEBORPHEU3082M" 110) ("TELEMAMAGDEBGERMAN09M" 115) ("CORELLCHRYTRIOOP1N1203M" 125)  ("CORELLCHRYTRIOOP2N1003M" 130) ("CORELLCHRYTRIOOP1N0702M" 134) ("HANDELCHRYSUSANN59M" 136) ("CORELLCHRYTRIOOP1N0601M" 138) ("VIVALDDOVEROP8032M" 139) ("CORELLCHRYTRIOOP1N1004M" 142)  ("CORELLCHRYTRIOOP1N0801M" 143) ("BACHBGCHORAL032701M" 146) ("CORELLCHRYTRIOOP2N1001M" 147) ("CORELLCHRYTRIOOP1N0402M" 152) ("BACHBGCHORAL037701M" 153) ("CORELLCHRYTRIOOP1N0203M" 154)  ("VIVALDDOVEROP8122M" 158) ("CORELLCHRYTRIOOP1N1101M" 162) ("CORELLCHRYTRIOOP1N0303M" 181) ("CORELLCHRYTRIOOP2N0803M" 188) ("CORELLCHRYTRIOOP2N0101M" 190) ("CORELLCHRYTRIOOP2N0301M" 193)  ("CORELLCHRYTRIOOP2N0801M" 194) ("CORELLCHRYTRIOOP2N0303M" 195) ("BACHBGCANT004407M" 199) ("VIVALDLECENEOP100302M" 200) ("CORELLCHRYTRIOOP1N0101M" 206) ("CORELLCHRYTRIOOP1N1103M" 210)  ("CORELLCHRYTRIOOP1N0103M" 211) ("CORELLCHRYTRIOOP2N0602M" 211) ("BACHBGCHORAL042701M" 214) ("CORELLCHRYTRIOOP2N0103M" 217) ("TELEMAMAGDEBORPHEU1012M" 218) ("TELEMAMAGDEBORPHEU3076M" 223)  ("HANDELCHRYORCHOP50303M" 227) ("TELEMABRUSSE1734_40103M" 227) ("BACHBGCHORAL030201M" 230) ("BACHBGCHORAL035201M" 238) ("CORELLCHRYTRIOOP1N0201M" 241) ("CORELLCHRYTRIOOP1N0903M" 245)  ("TELEMABRUSSE1734_40203M" 249) ("CORELLCHRYTRIOOP1N0804M" 250) ("CORELLCHRYTRIOOP2N0703M" 252) ("TELEMABRUSSE1734_40403M" 256))))))|#(defun check-lnpl ()  (format t "~%Total number of notes = ~d" (apply #'+ (mapcar #'second *lnpl*)))  (format t "~%Number of files = ~d" (list-length *lnpl*)))(defun run-all-partition-algs (min-number-of-subsets max-number-of-subsets)  (let* ((output-table (let* ((ot nil))                         (dotimes (i 5 ot)                           (setf ot                                 (cons (let* ((output-row nil))                                         (dotimes (i (1+ (- max-number-of-subsets min-number-of-subsets)) output-row)                                           (setf output-row (cons 0 output-row))))                                       ot))))))    (dotimes (alg 5 output-table)      (do* ((m min-number-of-subsets (1+ m)))           ((> m max-number-of-subsets))        (setf (elt (elt output-table alg)                   (- m min-number-of-subsets))              (funcall (case alg                         (0 #'partition-1)                         (1 #'partition-2)                         (2 #'partition-3)                         (3 #'partition-4)                         (4 #'partition-5)) m *lnpl*))))))#|(setf all-run-results '((718.4204896855323 970.6703868976327 603.580980482321 787.6136743353304 1343.012881546562 1412.7875518515395 1668.1619482874814 1804.543986717974 1866.555877664648 2146.7859824736734  2219.678764637311 2245.6140271592444 2156.606023005022 2197.1423063346883 2190.067411443462 2226.683984353521 2132.6994217492097 2095.5945338477086 2108.826623104846 2107.689303479049  2091.453348326256) (2.8284271247461903 1.0 3.7416573867739413 8.264381404557755 13.311649033834989 115.21573966549303 389.191836649082 20.892582415776182 17.862437310363518 14.319725746485004 258.42987443405224  165.31644092777233 347.83749521424954 6.2701105025578086 241.54930483581745 31.570416159287284 61.53143625057703 138.43933795131233 41.28386966766612 121.79367799684843 16.78898835159908) (2.8284271247461903 10.816653826391969 4.242640687119285 14.310835055998654 9.591663046625438 11.210114480533491 12.569805089976535 25.09482018265921 10.622826575090288 7.47358986395062  25.612496949731394 11.417485465678263 28.349467502799904 24.501311918227678 29.13989247291989 32.08490574196203 9.53013795344877 30.34807815913911 11.2221585314619 37.08773382130539  17.743238453633843) (496.38896039295633 572.7311760328749 1422.9014957707602 1425.6974784294177 1418.9221261225014 1181.0718295966028 1099.1015811626721 2578.5570577359736 1908.2359975176607 2174.1784780798134  2136.9706255691617 2182.090211771203 2001.095430777084 3091.120166818865 3465.9618289877344 2783.2207181925887 2478.678988778451 2613.6080649093246 2446.4368375251383 2213.563213463758  2122.1515281018715) (2.8284271247461903 1.7320508075688772 6.164414002968976 6.348228099241551 5.138093031466052 8.621678104251709 5.503245795502349 8.440971508067065 6.528569691917383 6.021174757017559  7.397788367294155 4.675358206487965 11.128618685450313 6.878538050653331 14.233762678926468 9.76940000565993 6.885620139528638 8.756284293002542 8.33761293618768 6.29285308902091  14.022554497381517)))(mapcar #'list '(718.4204896855323 970.6703868976327 603.580980482321 787.6136743353304 1343.012881546562 1412.7875518515395 1668.1619482874814 1804.543986717974 1866.555877664648 2146.7859824736734  2219.678764637311 2245.6140271592444 2156.606023005022 2197.1423063346883 2190.067411443462 2226.683984353521 2132.6994217492097 2095.5945338477086 2108.826623104846 2107.689303479049  2091.453348326256) '(2.8284271247461903 1.0 3.7416573867739413 8.264381404557755 13.311649033834989 115.21573966549303 389.191836649082 20.892582415776182 17.862437310363518 14.319725746485004 258.42987443405224  165.31644092777233 347.83749521424954 6.2701105025578086 241.54930483581745 31.570416159287284 61.53143625057703 138.43933795131233 41.28386966766612 121.79367799684843 16.78898835159908) '(2.8284271247461903 10.816653826391969 4.242640687119285 14.310835055998654 9.591663046625438 11.210114480533491 12.569805089976535 25.09482018265921 10.622826575090288 7.47358986395062  25.612496949731394 11.417485465678263 28.349467502799904 24.501311918227678 29.13989247291989 32.08490574196203 9.53013795344877 30.34807815913911 11.2221585314619 37.08773382130539  17.743238453633843) '(496.38896039295633 572.7311760328749 1422.9014957707602 1425.6974784294177 1418.9221261225014 1181.0718295966028 1099.1015811626721 2578.5570577359736 1908.2359975176607 2174.1784780798134  2136.9706255691617 2182.090211771203 2001.095430777084 3091.120166818865 3465.9618289877344 2783.2207181925887 2478.678988778451 2613.6080649093246 2446.4368375251383 2213.563213463758  2122.1515281018715) '(2.8284271247461903 1.7320508075688772 6.164414002968976 6.348228099241551 5.138093031466052 8.621678104251709 5.503245795502349 8.440971508067065 6.528569691917383 6.021174757017559  7.397788367294155 4.675358206487965 11.128618685450313 6.878538050653331 14.233762678926468 9.76940000565993 6.885620139528638 8.756284293002542 8.33761293618768 6.29285308902091  14.022554497381517))															m((718.4204896855323 2.8284271247461903 2.8284271247461903 496.38896039295633 2.8284271247461903)	2,3,5		2		 (970.6703868976327 1.0 10.816653826391969 572.7311760328749 1.7320508075688772)			2		3 (603.580980482321 3.7416573867739413 4.242640687119285 1422.9014957707602 6.164414002968976)		2		4 (787.6136743353304 8.264381404557755 14.310835055998654 1425.6974784294177 6.348228099241551)		5		5 (1343.012881546562 13.311649033834989 9.591663046625438 1418.9221261225014 5.138093031466052)		5		6 (1412.7875518515395 115.21573966549303 11.210114480533491 1181.0718295966028 8.621678104251709)	5		7 (1668.1619482874814 389.191836649082 12.569805089976535 1099.1015811626721 5.503245795502349)		5		8 (1804.543986717974 20.892582415776182 25.09482018265921 2578.5570577359736 8.440971508067065)		5		9 (1866.555877664648 17.862437310363518 10.622826575090288 1908.2359975176607 6.528569691917383)		5		10 (2146.7859824736734 14.319725746485004 7.47358986395062 2174.1784780798134 6.021174757017559)		5		11 (2219.678764637311 258.42987443405224 25.612496949731394 2136.9706255691617 7.397788367294155)		5		12 (2245.6140271592444 165.31644092777233 11.417485465678263 2182.090211771203 4.675358206487965)		5		13 (2156.606023005022 347.83749521424954 28.349467502799904 2001.095430777084 11.128618685450313)		5		14 (2197.1423063346883 6.2701105025578086 24.501311918227678 3091.120166818865 6.878538050653331)		2		15 (2190.067411443462 241.54930483581745 29.13989247291989 3465.9618289877344 14.233762678926468)		5		16 (2226.683984353521 31.570416159287284 32.08490574196203 2783.2207181925887 9.76940000565993)		5		17 (2132.6994217492097 61.53143625057703 9.53013795344877 2478.678988778451 6.885620139528638)		5		18 (2095.5945338477086 138.43933795131233 30.34807815913911 2613.6080649093246 8.756284293002542)		5		19	 (2108.826623104846 41.28386966766612 11.2221585314619 2446.4368375251383 8.33761293618768)		5		20 (2107.689303479049 121.79367799684843 37.08773382130539 2213.563213463758 6.29285308902091)		5		21 (2091.453348326256 16.78898835159908 17.743238453633843 2122.1515281018715 14.022554497381517))	5		22	|##|Partitions generated using http://www.chez.com/starshoot/partition/index.php3|#(defvar *g2*)(setf *g2*      '((8934 6432 6384 4111 3165 2529 2447 2343 2106 2051 1979 1941 1886 1749 1639 1515 1504         1443 1333 1296 1271 1241 1200 1193 1167 1107 1037 980 975 942 904 904 898 886 827 809         787 744 703 692 684 669 664 657 652 642 628 610 608 585 569 562 559 526 514 496 477 456         437 433 406 395 391 384 357 349 344 339 314 307 292 292 282 276 270 269 258 256 252 250         245 230 227 223 217 211 206 200 195 193 181 163 158 152 147 142 139 134 130 115 106 103         99 91 78 77 35 24)        (8194 7999 4229 4162 3391 3072 2512 2354 2291 2072 1990 1973 1886 1789 1663 1558 1514 1487         1360 1286 1278 1224 1220 1186 1172 1070 1048 1012 958 947 915 901 896 852 831 827 796 780         696 687 670 669 659 657 649 634 633 615 590 589 579 568 547 537 511 492 489 445 440 424         421 394 388 369 360 354 348 338 324 296 295 290 283 275 274 261 261 257 256 249 241 238          227 218 214 211 210 199 194 190 188 162 154 153 146 143 138 136 125 118 110 103 97 93 82         68 36 24)))(defvar *g2b*)(setf *g2b*      '((8934 6432 6384 4111 3165 2529 2447 2343 2106 2051 1979 1941 1886 1749 1639 1515 1504 1443 1333          1296 1271 1241 1200 1193 1167 1107 1037 980 975 942 904 904 898 886 827 809 787 744 703 692 684          669 664 657 652 642 628 610 608 585 569 562 559 526 514 496 477 456 437 433 406 395 391 384 357          349 344 339 314 307 292 292 282 276 270 269 258 256 252 250 245 230 227 223 217 211 206 200 195          193 181 163 158 152 147 142 139 134 130 115 106 103 99 91 78 77 35 24)        (8194 7999 4229 4162 3391 3072 2512 2354 2291 2072 1990 1973 1886 1789 1663 1558 1514 1487 1360          1286 1278 1224 1220 1186 1172 1070 1048 1012 958 947 915 901 896 852 831 827 796 780 696 687 670          669 659 657 649 634 633 615 590 589 579 568 547 537 511 492 489 445 440 424 421 394 388 369 360          354 348 338 324 296 295 290 283 275 274 261 261 257 256 249 241 238 227 218 214 211 210 199 194          190 188 162 154 153 146 143 138 136 125 118 110 103 97 93 82 68 36 24)))(defvar *g4*)(setf *g4*      '((8934 4111 2529 2447 2106 1979 1886 1639 1443 1333 1241 1200 1107 1037 942 904 898 827 787 692 669          657 642 628 585 569 526 514 477 433 395 391 357 339 307 292 282 269 258 250 245 223 211 200 195          163 158 147 139 130 106 103 91)        (6432 6384 3165 2343 2051 1941 1749 1515 1504 1296 1271 1193 1167 980 975 904 886 809 744 703 684          664 652 610 608 562 559 496 456 437 406 384 349 344 314 292 276 270 256 252 230 227 217 206 193          181 152 142 134 115 99 78 77 35 24)        (8194 4162 3072 2512 2291 1973 1789 1558 1514 1360 1224 1186 1172 1012 947 901 852 831 796 696 669          657 634 633 589 568 547 492 489 424 394 388 354 348 296 295 283 274 257 249 241 227 211 199 194          188 153 143 136 125 97 93 68 36)        (7999 4229 3391 2354 2072 1990 1886 1663 1487 1286 1278 1220 1070 1048 958 915 896 827 780 687 670          659 649 615 590 579 537 511 445 440 421 369 360 338 324 290 275 261 261 256 238 218 214 210 190          162 154 146 138 118 110 103 82 24)))(defvar *g8*)(setf *g8*      '((8934 2106 1886 1333 1200 1037 904 898 692 669 642 585 526 477 391 339 292 282 250 223 211 195 163 158 103)        (4111 2529 2447 1979 1639 1443 1241 1107 942 827 787 657 628 569 514 433 395 357 307 269 258 245 200 147 139 130 106 91)        (6432 2343 2051 1749 1504 1271 1167 904 886 703 664 652 562 559 437 384 344 292 276 256 230 217 181 152 142 115 24)        (6384 3165 1941 1515 1296 1193 980 975 809 744 684 610 608 496 456 406 349 314 270 252 227 206 193 134 99 78 77 35)        (8194 2291 1789 1514 1224 1172 947 852 796 669 634 589 547 489 394 354 296 295 274 241 227 194 153 143 125 93)        (4162 3072 2512 1973 1558 1360 1186 1012 901 831 696 657 633 568 492 424 388 348 283 257 249 211 199 188 136 97 68 36)        (7999 2072 1886 1663 1278 1070 958 915 827 687 649 615 537 511 421 360 324 275 261 256 214 190 162 146 118 103)        (4229 3391 2354 1990 1487 1286 1220 1048 896 780 670 659 590 579 445 440 369 338 290 261 238 218 210 154 138 110 82 24)))(defvar *g16*)(setf *g16*      '((8934 692 642 526 391 292 250 223 195 103)        (2106 1886 1333 1200 1037 904 898 669 585 477 339 282 211 163 158)        (4111 1979 1443 1107 827 657 569 433 357 258 147 139 130 91)        (2529 2447 1639 1241 942 787 628 514 395 307 269 245 200 106)        (6432 1271 904 886 664 562 437 292 276 230 152 142)        (2343 2051 1749 1504 1167 703 652 559 384 344 256 217 181 115 24)        (6384 1296 980 809 684 496 456 349 314 252 193 35)        (3165 1941 1515 1193 975 744 610 608 406 270 227 206 134 99 78 77)        (8194 852 669 634 489 394 354 241 153 143 125)        (2291 1789 1514 1224 1172 947 796 589 547 296 295 274 227 194 93)        (4162 1973 1360 1012 831 657 568 424 388 283 199 188 136 68)        (3072 2512 1558 1186 901 696 633 492 348 257 249 211 97 36)        (7999 915 827 615 511 360 324 275 261 162)        (2072 1886 1663 1278 1070 958 687 649 537 421 256 214 190 146 118 103)        (4229 1990 1286 1048 780 670 590 440 338 261 218 154 138 82 24)        (3391 2354 1487 1220 896 659 579 445 369 290 238 210 110)))(defun check-partition (partition)  (if (listp (first (first partition)))    (let*((par (mapcar #'(lambda (movement-class)                           (mapcar #'second movement-class))                       partition))          (list-of-file-names (remove-duplicates (mapcar #'first (apply #'append partition))                                                 :test #'string=)))      (format t "~%Total number of notes = ~d" (apply #'+ (apply #'append par)))      (format t "~%Number of movement classes = ~d" (list-length par))      (format t "~%Number of distinct filenames = ~d" (list-length list-of-file-names))      (format t "~%Number of movements = ~d" (apply #'+ (mapcar #'list-length partition)))      (format t "~%Numbers of notes in movement classes = ~a" (mapcar #'(lambda (mc)                                                                          (apply #'+ mc))                                                                      par)))    (progn (format t "~%Total number of notes = ~d" (apply #'+ (apply #'append partition)))           (format t "~%Number of movement classes = ~d" (list-length partition))           (format t "~%Number of movements = ~d" (apply #'+ (mapcar #'list-length partition)))           (format t "~%Numbers of notes in movement classes = ~a" (mapcar #'(lambda (mc)                                                                          (apply #'+ mc))                                                                      partition)))))(defvar *g2-lnpl*)(setf *g2-lnpl*      (do* ((lnpl (copy-list *lnpl*)                  (cdr lnpl))            (g2 (mapcar #'copy-list *g2*))            (output-list (list nil nil)))           ((null lnpl)            (pprint lnpl)            (pprint g2)            output-list)        (let* ((size-of-this-movement (second (first lnpl)))               (movement-class-for-this-movement (let* ((j nil))                                                   (dotimes (mc 2 j)                                                     (if (member size-of-this-movement                                                                 (elt g2 mc))                                                       (setf j mc)))))               (pos-of-this-mvt-size-in-mc (position size-of-this-movement                                                     (elt g2 movement-class-for-this-movement))))          (setf (elt (elt g2                          movement-class-for-this-movement)                     pos-of-this-mvt-size-in-mc)                nil                (elt output-list movement-class-for-this-movement)                (cons (first lnpl)                      (elt output-list movement-class-for-this-movement))))))(defvar *g4-lnpl*)(setf *g4-lnpl*      (do* ((lnpl (copy-list *lnpl*)                  (cdr lnpl))            (g4 (mapcar #'copy-list *g4*))            (output-list (list nil nil nil nil)))           ((null lnpl)            (pprint lnpl)            (pprint g4)            output-list)        (let* ((size-of-this-movement (second (first lnpl)))               (movement-class-for-this-movement (let* ((j nil))                                                   (dotimes (mc 4 j)                                                     (if (member size-of-this-movement                                                                 (elt g4 mc))                                                       (setf j mc)))))               (pos-of-this-mvt-size-in-mc (position size-of-this-movement                                                     (elt g4 movement-class-for-this-movement))))          (setf (elt (elt g4                          movement-class-for-this-movement)                     pos-of-this-mvt-size-in-mc)                nil                (elt output-list movement-class-for-this-movement)                (cons (first lnpl)                      (elt output-list movement-class-for-this-movement))))))(defvar *g8-lnpl*)(setf *g8-lnpl*      (do* ((lnpl (copy-list *lnpl*)                  (cdr lnpl))            (g8 (mapcar #'copy-list *g8*))            (output-list (list nil nil nil nil                               nil nil nil nil)))           ((null lnpl)            (pprint lnpl)            (pprint g8)            output-list)        (let* ((size-of-this-movement (second (first lnpl)))               (movement-class-for-this-movement (let* ((j nil))                                                   (dotimes (mc 8 j)                                                     (if (member size-of-this-movement                                                                 (elt g8 mc))                                                       (setf j mc)))))               (pos-of-this-mvt-size-in-mc (position size-of-this-movement                                                     (elt g8 movement-class-for-this-movement))))          (setf (elt (elt g8                          movement-class-for-this-movement)                     pos-of-this-mvt-size-in-mc)                nil                (elt output-list movement-class-for-this-movement)                (cons (first lnpl)                      (elt output-list movement-class-for-this-movement))))))(defvar *g16-lnpl*)(setf *g16-lnpl*      (do* ((lnpl (copy-list *lnpl*)                  (cdr lnpl))            (g16 (mapcar #'copy-list *g16*))            (output-list (list nil nil nil nil                               nil nil nil nil                               nil nil nil nil                               nil nil nil nil)))           ((null lnpl)            (pprint lnpl)            (pprint g16)            output-list)        (let* ((size-of-this-movement (second (first lnpl)))               (movement-class-for-this-movement (let* ((j nil))                                                   (dotimes (mc 16 j)                                                     (if (member size-of-this-movement                                                                 (elt g16 mc))                                                       (setf j mc)))))               (pos-of-this-mvt-size-in-mc (position size-of-this-movement                                                     (elt g16 movement-class-for-this-movement))))          (setf (elt (elt g16                          movement-class-for-this-movement)                     pos-of-this-mvt-size-in-mc)                nil                (elt output-list movement-class-for-this-movement)                (cons (first lnpl)                      (elt output-list movement-class-for-this-movement))))))(defvar *g-comp-lnpl*)(setf *g-comp-lnpl*      (let* ((output-list (list nil nil nil nil                                 nil nil nil nil)))        (dolist (mvt *lnpl* output-list)          (let* ((comp (subseq (first mvt) 0 4))                 (mc (cond ((string= comp "BACH") 0)                           ((string= comp "BEET") 1)                           ((string= comp "CORE") 2)                           ((string= comp "HAND") 3)                           ((string= comp "HAYD") 4)                           ((string= comp "MOZA") 5)                           ((string= comp "TELE") 6)                           ((string= comp "VIVA") 7))))            (setf (elt output-list mc)                  (cons mvt (elt output-list mc)))))))(defvar *g22-partition-5*)(setf *g22-partition-5*      '((("MOZARTBHSYMK50401M" 8934)) (("HANDELCHRYORCHOP50104M" 703) ("MOZARTBHCONCK45903M" 8194)) (("HANDELCHRYORCHOP30504M" 915) ("BEETBHSYMNO302M" 7999)) (("TELEMAMAGDEBGERMAN05M" 36) ("BACHBGORCH104302M" 2447) ("BEETBHSYMNO104M" 6432)) (("VIVALDDOVEROP8113M" 2529) ("HAYDNDOVERSYMS-10004M" 6384)) (("VIVALDDOVEROP30401M" 526) ("BEETBHSYMNO102M" 4162) ("HAYDNDOVERSYMS-10302M" 4229)) (("TELEMAMAGDEBGERMAN26M" 35) ("TELEMAMAGDEBGERMAN04M" 1360) ("HAYDNDOVERSYMS-09902M" 3391) ("BEETBHSYMNO503M" 4111)) (("CORELLCHRYTRIOOP2N0501M" 163) ("HAYDNDOVERQUARTOP55N101M" 2512) ("VIVALDDOVEROP8041M" 3072) ("VIVALDLECENEOP8023M" 3165)) (("TELEMAMAGDEBORPHEU2015M" 24) ("TELEMAMAGDEBGERMAN01BM" 1886) ("VIVALDDOVEROP8011M" 2291) ("HAYDNDOVERSYMS-10202M" 2343) ("BACHBGCANT004206M" 2354)) (("HANDELHICKSOTT38M" 696) ("VIVALDLECENEOP8061M" 1990) ("VIVALDLECENEOP100603M" 2051) ("MOZARTBHCONCK62202M" 2072) ("HANDELCHRYMESSIA3-04M" 2106)) (("TELEMAMAGDEBGERMAN13M" 24) ("HANDELCHRYARIODA37M" 1107) ("BACHBGCANT012201M" 1886) ("VIVALDLECENEOP3121M" 1941) ("BACHBGCANT017104M" 1973) ("BACHBGCANT004902M" 1979)) (("MOZARTBHQRTETSK08003M" 514) ("VIVALDDOVEROP8063M" 1558) ("HANDELCHRYSUSANN41M" 1639) ("BACHBGCANT000905M" 1663) ("HANDELCHRYORCHOP20904M" 1749) ("BEETBHSYMNO103M" 1789)) (("CORELLCHRYTRIOOP2N0503M" 118) ("HAYDNDOVERQUARTOP64N202M" 1333) ("HANDELHICKSOTT02M" 1443) ("BACHBGCANT015308M" 1487) ("HAYDNBHSYMS-00102M" 1504) ("HAYDNDOVERQUARTOP55N302M" 1514)  ("VIVALDLECENEOP100401M" 1515)) (("TELEMAMAGDEBORPHEU3031M" 99) ("HANDELCHRYARIODA14M" 1220) ("HANDELCHRYARIODA81M" 1224) ("HANDELHICKSCLORI27M" 1241) ("BACHBGORCH105102M" 1271) ("HANDELCHRYMESSIA1-22CM" 1278)  ("HANDELCHRYSUSANN16M" 1286) ("MOZARTBHQRTETSK15802M" 1296)) (("HANDELCHRYARIODA10M" 852) ("TELEMAMAGDEBGERMAN27M" 1048) ("TELEMABRUSSE1734_40102M" 1070) ("HANDELCHRYMESSIA2-15M" 1167) ("BACHBGKEYBDWTC-I086402M" 1172) ("HANDELCHRYORCHOP50604M" 1186)  ("VIVALDLECENEOP3091M" 1193) ("BACHBGCANT002003M" 1200)) (("CORELLCHRYTRIOOP1N0501M" 258) ("BACHBGKEYBDWTC-II087801M" 904) ("TELEMABRUSSE1734_40302M" 904) ("MOZARTBHQRTETSK16002M" 942) ("CORELLCHRYTRIOOP1N0302M" 947) ("BACHBGKEYBDWTC-II089002M" 958)  ("CORELLCHRYTRIOOP1N1204M" 975) ("TELEMAMAGDEBORPHEU1092M" 980) ("MOZARTBHQRTETSK15602M" 1012) ("TELEMAMAGDEBORPHEU1021M" 1037)) (("CORELLCHRYTRIOOP2N0404M" 456) ("TELEMABRUSSE1734_41204M" 787) ("HANDELCHRYORCHOP201B01M" 796) ("TELEMABRUSSE1734_40202M" 809) ("TELEMABRUSSE1734_40804M" 827) ("TELEMAMAGDEBORPHEU1051M" 827)  ("TELEMAMAGDEBORPHEU3052M" 831) ("BACHBGKEYBDWTC-I085202M" 886) ("MOZARTBHDUOSK42302M" 896) ("TELEMABRUSSE1734_41004M" 898) ("TELEMAMAGDEBGERMAN22M" 901)) (("HAYDNDOVERQUARTOP64N102M" 652) ("CORELLCHRYTRIOOP1N0703M" 657) ("TELEMABRUSSE1734_41104M" 657) ("CORELLCHRYTRIOOP1N0204M" 659) ("HANDELHICKSJUDASM08BM" 664) ("CORELLCHRYTRIOOP1N0602M" 669)  ("TELEMABRUSSE1734_40904M" 669) ("TELEMAMAGDEBORPHEU2062M" 670) ("TELEMAMAGDEBORPHEU2031M" 684) ("CORELLCHRYTRIOOP1N0104M" 687) ("TELEMABRUSSE1734_40402M" 692) ("CORELLCHRYTRIOOP1N0304M" 744)  ("CORELLCHRYTRIOOP1N0701M" 780)) (("CORELLCHRYTRIOOP1N1003M" 406) ("BACHRASMUSINVENT078201M" 568) ("CORELLCHRYTRIOOP1N0502M" 569) ("TELEMABRUSSE1734_40503M" 579) ("TELEMABRUSSE1734_40303M" 585) ("TELEMAMAGDEBORPHEU3034M" 589)  ("VIVALDDOVEROP30102M" 590) ("BACHBGKEYBDWTC-I086501M" 608) ("HANDELARNOLDSEMELE31M" 610) ("HANDELCHRYORCHOP30204M" 615) ("HAYDNDOVERQUARTOP54N203M" 628) ("CORELLCHRYTRIOOP1N0102M" 633)  ("MOZARTBHDUOSK42402M" 634) ("TELEMABRUSSE1734_40704M" 642) ("TELEMAMAGDEBORPHEU1083M" 649)) (("TELEMAMAGDEBGERMAN21M" 78) ("TELEMAMAGDEBORPHEU1103M" 388) ("CORELLCHRYTRIOOP2N1103M" 391) ("CORELLCHRYTRIOOP1N0202M" 394) ("CORELLCHRYTRIOOP2N1102M" 395) ("CORELLCHRYTRIOOP1N0404M" 421)  ("CORELLCHRYTRIOOP2N0201M" 424) ("HANDELHICKSJUDASM19M" 433) ("CORELLCHRYTRIOOP2N0302M" 437) ("VIVALDLECENEOP3032M" 440) ("CORELLCHRYTRIOOP2N0802M" 445) ("BACHBGCANT016503M" 477)  ("CORELLCHRYTRIOOP1N0504M" 489) ("CORELLCHRYTRIOOP1N0604M" 492) ("HANDELCHRYORCHOP20303M" 496) ("VIVALDDOVEROP30202M" 511) ("CORELLCHRYTRIOOP1N0403M" 537) ("CORELLCHRYTRIOOP2N0603M" 547)  ("CORELLCHRYTRIOOP1N0902M" 559) ("BACHBGCHORAL027601M" 562)) (("VIVALDDOVEROP8092M" 256) ("CORELLCHRYTRIOOP1N0603M" 257) ("CORELLCHRYTRIOOP2N0401M" 261) ("CORELLCHRYTRIOOP2N0701M" 261) ("TELEMABRUSSE1734_40603M" 269) ("TELEMAMAGDEBORPHEU3074M" 270)  ("BACHBGCANT013606M" 274) ("CORELLCHRYTRIOOP1N1201M" 275) ("CORELLCHRYTRIOOP2N0804M" 276) ("TELEMABRUSSE1734_41003M" 282) ("TELEMAMAGDEBORPHEU3013M" 283) ("VIVALDLECENEOP3062M" 290)  ("CORELLCHRYTRIOOP2N0702M" 292) ("TELEMABRUSSE1734_40903M" 292) ("CORELLCHRYTRIOOP2N0402M" 295) ("HANDELCHRYORCHOP20503M" 296) ("BACHBGCANT015303M" 307) ("CORELLCHRYTRIOOP2N0102M" 314)  ("HANDELCHRYSUSANN34M" 324) ("CORELLCHRYTRIOOP2N0504M" 338) ("CORELLCHRYTRIOOP2N0903M" 339) ("CORELLCHRYTRIOOP1N0803M" 344) ("CORELLCHRYTRIOOP2N0202M" 348) ("BACHBGCHORAL040201M" 349)  ("CORELLCHRYTRIOOP2N1004M" 354) ("CORELLCHRYTRIOOP2N0601M" 357) ("CORELLCHRYTRIOOP1N0802M" 360) ("CORELLCHRYTRIOOP1N0401M" 369) ("CORELLCHRYTRIOOP2N0901M" 384)) (("TELEMAMAGDEBGERMAN30M" 68) ("TELEMAMAGDEBGERMAN19M" 77) ("VIVALDLECENEOP100204M" 82) ("HANDELHICKSOTT69M" 91) ("TELEMAMAGDEBGERMAN34M" 93) ("TELEMAMAGDEBORPHEU2081M" 97)  ("CORELLCHRYTRIOOP1N1001M" 103) ("CORELLCHRYTRIOOP2N0104M" 103) ("TELEMAMAGDEBORPHEU1025M" 106) ("TELEMAMAGDEBORPHEU3082M" 110) ("TELEMAMAGDEBGERMAN09M" 115) ("CORELLCHRYTRIOOP1N1203M" 125)  ("CORELLCHRYTRIOOP2N1003M" 130) ("CORELLCHRYTRIOOP1N0702M" 134) ("HANDELCHRYSUSANN59M" 136) ("CORELLCHRYTRIOOP1N0601M" 138) ("VIVALDDOVEROP8032M" 139) ("CORELLCHRYTRIOOP1N1004M" 142)  ("CORELLCHRYTRIOOP1N0801M" 143) ("BACHBGCHORAL032701M" 146) ("CORELLCHRYTRIOOP2N1001M" 147) ("CORELLCHRYTRIOOP1N0402M" 152) ("BACHBGCHORAL037701M" 153) ("CORELLCHRYTRIOOP1N0203M" 154)  ("VIVALDDOVEROP8122M" 158) ("CORELLCHRYTRIOOP1N1101M" 162) ("CORELLCHRYTRIOOP1N0303M" 181) ("CORELLCHRYTRIOOP2N0803M" 188) ("CORELLCHRYTRIOOP2N0101M" 190) ("CORELLCHRYTRIOOP2N0301M" 193)  ("CORELLCHRYTRIOOP2N0801M" 194) ("CORELLCHRYTRIOOP2N0303M" 195) ("BACHBGCANT004407M" 199) ("VIVALDLECENEOP100302M" 200) ("CORELLCHRYTRIOOP1N0101M" 206) ("CORELLCHRYTRIOOP1N1103M" 210)  ("CORELLCHRYTRIOOP1N0103M" 211) ("CORELLCHRYTRIOOP2N0602M" 211) ("BACHBGCHORAL042701M" 214) ("CORELLCHRYTRIOOP2N0103M" 217) ("TELEMAMAGDEBORPHEU1012M" 218) ("TELEMAMAGDEBORPHEU3076M" 223)  ("HANDELCHRYORCHOP50303M" 227) ("TELEMABRUSSE1734_40103M" 227) ("BACHBGCHORAL030201M" 230) ("BACHBGCHORAL035201M" 238) ("CORELLCHRYTRIOOP1N0201M" 241) ("CORELLCHRYTRIOOP1N0903M" 245)  ("TELEMABRUSSE1734_40203M" 249) ("CORELLCHRYTRIOOP1N0804M" 250) ("CORELLCHRYTRIOOP2N0703M" 252) ("TELEMABRUSSE1734_40403M" 256))))(defvar *g21-partition-5*)(setf *g21-partition-5*      '((("CORELLCHRYTRIOOP2N1102M" 395) ("MOZARTBHSYMK50401M" 8934)) (("TELEMAMAGDEBGERMAN05M" 36) ("HANDELCHRYARIODA37M" 1107) ("MOZARTBHCONCK45903M" 8194)) (("HAYDNDOVERQUARTOP64N202M" 1333) ("BEETBHSYMNO302M" 7999)) (("CORELLCHRYTRIOOP1N0401M" 369) ("VIVALDDOVEROP8113M" 2529) ("BEETBHSYMNO104M" 6432)) (("VIVALDLECENEOP3032M" 440) ("HAYDNDOVERQUARTOP55N101M" 2512) ("HAYDNDOVERSYMS-10004M" 6384)) (("CORELLCHRYTRIOOP1N0302M" 947) ("BEETBHSYMNO102M" 4162) ("HAYDNDOVERSYMS-10302M" 4229)) (("TELEMAMAGDEBGERMAN26M" 35) ("BEETBHSYMNO103M" 1789) ("HAYDNDOVERSYMS-09902M" 3391) ("BEETBHSYMNO503M" 4111)) (("HAYDNDOVERQUARTOP64N102M" 652) ("BACHBGORCH104302M" 2447) ("VIVALDDOVEROP8041M" 3072) ("VIVALDLECENEOP8023M" 3165)) (("CORELLCHRYTRIOOP1N0201M" 241) ("HANDELCHRYMESSIA3-04M" 2106) ("VIVALDDOVEROP8011M" 2291) ("HAYDNDOVERSYMS-10202M" 2343) ("BACHBGCANT004206M" 2354)) (("HANDELHICKSCLORI27M" 1241) ("BACHBGCANT004902M" 1979) ("VIVALDLECENEOP8061M" 1990) ("VIVALDLECENEOP100603M" 2051) ("MOZARTBHCONCK62202M" 2072)) (("HANDELCHRYSUSANN41M" 1639) ("BACHBGCANT012201M" 1886) ("TELEMAMAGDEBGERMAN01BM" 1886) ("VIVALDLECENEOP3121M" 1941) ("BACHBGCANT017104M" 1973)) (("TELEMAMAGDEBORPHEU2015M" 24) ("MOZARTBHQRTETSK15802M" 1296) ("HAYDNDOVERQUARTOP55N302M" 1514) ("VIVALDLECENEOP100401M" 1515) ("VIVALDDOVEROP8063M" 1558) ("BACHBGCANT000905M" 1663)  ("HANDELCHRYORCHOP20904M" 1749)) (("TELEMAMAGDEBORPHEU1092M" 980) ("HANDELCHRYMESSIA1-22CM" 1278) ("HANDELCHRYSUSANN16M" 1286) ("TELEMAMAGDEBGERMAN04M" 1360) ("HANDELHICKSOTT02M" 1443) ("BACHBGCANT015308M" 1487)  ("HAYDNBHSYMS-00102M" 1504)) (("HANDELCHRYARIODA10M" 852) ("BACHBGKEYBDWTC-I086402M" 1172) ("HANDELCHRYORCHOP50604M" 1186) ("VIVALDLECENEOP3091M" 1193) ("BACHBGCANT002003M" 1200) ("HANDELCHRYARIODA14M" 1220)  ("HANDELCHRYARIODA81M" 1224) ("BACHBGORCH105102M" 1271)) (("BACHBGCHORAL042701M" 214) ("HANDELCHRYORCHOP30504M" 915) ("MOZARTBHQRTETSK16002M" 942) ("BACHBGKEYBDWTC-II089002M" 958) ("CORELLCHRYTRIOOP1N1204M" 975) ("MOZARTBHQRTETSK15602M" 1012)  ("TELEMAMAGDEBORPHEU1021M" 1037) ("TELEMAMAGDEBGERMAN27M" 1048) ("TELEMABRUSSE1734_40102M" 1070) ("HANDELCHRYMESSIA2-15M" 1167)) (("TELEMAMAGDEBORPHEU1083M" 649) ("TELEMABRUSSE1734_40202M" 809) ("TELEMABRUSSE1734_40804M" 827) ("TELEMAMAGDEBORPHEU1051M" 827) ("TELEMAMAGDEBORPHEU3052M" 831) ("BACHBGKEYBDWTC-I085202M" 886)  ("MOZARTBHDUOSK42302M" 896) ("TELEMABRUSSE1734_41004M" 898) ("TELEMAMAGDEBGERMAN22M" 901) ("BACHBGKEYBDWTC-II087801M" 904) ("TELEMABRUSSE1734_40302M" 904)) (("TELEMAMAGDEBORPHEU2081M" 97) ("HANDELHICKSJUDASM08BM" 664) ("CORELLCHRYTRIOOP1N0602M" 669) ("TELEMABRUSSE1734_40904M" 669) ("TELEMAMAGDEBORPHEU2062M" 670) ("TELEMAMAGDEBORPHEU2031M" 684)  ("CORELLCHRYTRIOOP1N0104M" 687) ("TELEMABRUSSE1734_40402M" 692) ("HANDELHICKSOTT38M" 696) ("HANDELCHRYORCHOP50104M" 703) ("CORELLCHRYTRIOOP1N0304M" 744) ("CORELLCHRYTRIOOP1N0701M" 780)  ("TELEMABRUSSE1734_41204M" 787) ("HANDELCHRYORCHOP201B01M" 796)) (("VIVALDLECENEOP100204M" 82) ("CORELLCHRYTRIOOP1N0502M" 569) ("TELEMABRUSSE1734_40503M" 579) ("TELEMABRUSSE1734_40303M" 585) ("TELEMAMAGDEBORPHEU3034M" 589) ("VIVALDDOVEROP30102M" 590)  ("BACHBGKEYBDWTC-I086501M" 608) ("HANDELARNOLDSEMELE31M" 610) ("HANDELCHRYORCHOP30204M" 615) ("HAYDNDOVERQUARTOP54N203M" 628) ("CORELLCHRYTRIOOP1N0102M" 633) ("MOZARTBHDUOSK42402M" 634)  ("TELEMABRUSSE1734_40704M" 642) ("CORELLCHRYTRIOOP1N0703M" 657) ("TELEMABRUSSE1734_41104M" 657) ("CORELLCHRYTRIOOP1N0204M" 659)) (("TELEMAMAGDEBGERMAN13M" 24) ("CORELLCHRYTRIOOP1N1003M" 406) ("CORELLCHRYTRIOOP1N0404M" 421) ("CORELLCHRYTRIOOP2N0201M" 424) ("HANDELHICKSJUDASM19M" 433) ("CORELLCHRYTRIOOP2N0302M" 437)  ("CORELLCHRYTRIOOP2N0802M" 445) ("CORELLCHRYTRIOOP2N0404M" 456) ("BACHBGCANT016503M" 477) ("CORELLCHRYTRIOOP1N0504M" 489) ("CORELLCHRYTRIOOP1N0604M" 492) ("HANDELCHRYORCHOP20303M" 496)  ("VIVALDDOVEROP30202M" 511) ("MOZARTBHQRTETSK08003M" 514) ("VIVALDDOVEROP30401M" 526) ("CORELLCHRYTRIOOP1N0403M" 537) ("CORELLCHRYTRIOOP2N0603M" 547) ("CORELLCHRYTRIOOP1N0902M" 559)  ("BACHBGCHORAL027601M" 562) ("BACHRASMUSINVENT078201M" 568)) (("CORELLCHRYTRIOOP2N1003M" 130) ("CORELLCHRYTRIOOP2N0401M" 261) ("CORELLCHRYTRIOOP2N0701M" 261) ("TELEMABRUSSE1734_40603M" 269) ("TELEMAMAGDEBORPHEU3074M" 270) ("BACHBGCANT013606M" 274)  ("CORELLCHRYTRIOOP1N1201M" 275) ("CORELLCHRYTRIOOP2N0804M" 276) ("TELEMABRUSSE1734_41003M" 282) ("TELEMAMAGDEBORPHEU3013M" 283) ("VIVALDLECENEOP3062M" 290) ("CORELLCHRYTRIOOP2N0702M" 292)  ("TELEMABRUSSE1734_40903M" 292) ("CORELLCHRYTRIOOP2N0402M" 295) ("HANDELCHRYORCHOP20503M" 296) ("BACHBGCANT015303M" 307) ("CORELLCHRYTRIOOP2N0102M" 314) ("HANDELCHRYSUSANN34M" 324)  ("CORELLCHRYTRIOOP2N0504M" 338) ("CORELLCHRYTRIOOP2N0903M" 339) ("CORELLCHRYTRIOOP1N0803M" 344) ("CORELLCHRYTRIOOP2N0202M" 348) ("BACHBGCHORAL040201M" 349) ("CORELLCHRYTRIOOP2N1004M" 354)  ("CORELLCHRYTRIOOP2N0601M" 357) ("CORELLCHRYTRIOOP1N0802M" 360) ("CORELLCHRYTRIOOP2N0901M" 384) ("TELEMAMAGDEBORPHEU1103M" 388) ("CORELLCHRYTRIOOP2N1103M" 391) ("CORELLCHRYTRIOOP1N0202M" 394)) (("TELEMAMAGDEBGERMAN30M" 68) ("TELEMAMAGDEBGERMAN19M" 77) ("TELEMAMAGDEBGERMAN21M" 78) ("HANDELHICKSOTT69M" 91) ("TELEMAMAGDEBGERMAN34M" 93) ("TELEMAMAGDEBORPHEU3031M" 99)  ("CORELLCHRYTRIOOP1N1001M" 103) ("CORELLCHRYTRIOOP2N0104M" 103) ("TELEMAMAGDEBORPHEU1025M" 106) ("TELEMAMAGDEBORPHEU3082M" 110) ("TELEMAMAGDEBGERMAN09M" 115) ("CORELLCHRYTRIOOP2N0503M" 118)  ("CORELLCHRYTRIOOP1N1203M" 125) ("CORELLCHRYTRIOOP1N0702M" 134) ("HANDELCHRYSUSANN59M" 136) ("CORELLCHRYTRIOOP1N0601M" 138) ("VIVALDDOVEROP8032M" 139) ("CORELLCHRYTRIOOP1N1004M" 142)  ("CORELLCHRYTRIOOP1N0801M" 143) ("BACHBGCHORAL032701M" 146) ("CORELLCHRYTRIOOP2N1001M" 147) ("CORELLCHRYTRIOOP1N0402M" 152) ("BACHBGCHORAL037701M" 153) ("CORELLCHRYTRIOOP1N0203M" 154)  ("VIVALDDOVEROP8122M" 158) ("CORELLCHRYTRIOOP1N1101M" 162) ("CORELLCHRYTRIOOP2N0501M" 163) ("CORELLCHRYTRIOOP1N0303M" 181) ("CORELLCHRYTRIOOP2N0803M" 188) ("CORELLCHRYTRIOOP2N0101M" 190)  ("CORELLCHRYTRIOOP2N0301M" 193) ("CORELLCHRYTRIOOP2N0801M" 194) ("CORELLCHRYTRIOOP2N0303M" 195) ("BACHBGCANT004407M" 199) ("VIVALDLECENEOP100302M" 200) ("CORELLCHRYTRIOOP1N0101M" 206)  ("CORELLCHRYTRIOOP1N1103M" 210) ("CORELLCHRYTRIOOP1N0103M" 211) ("CORELLCHRYTRIOOP2N0602M" 211) ("CORELLCHRYTRIOOP2N0103M" 217) ("TELEMAMAGDEBORPHEU1012M" 218) ("TELEMAMAGDEBORPHEU3076M" 223)  ("HANDELCHRYORCHOP50303M" 227) ("TELEMABRUSSE1734_40103M" 227) ("BACHBGCHORAL030201M" 230) ("BACHBGCHORAL035201M" 238) ("CORELLCHRYTRIOOP1N0903M" 245) ("TELEMABRUSSE1734_40203M" 249)  ("CORELLCHRYTRIOOP1N0804M" 250) ("CORELLCHRYTRIOOP2N0703M" 252) ("TELEMABRUSSE1734_40403M" 256) ("VIVALDDOVEROP8092M" 256) ("CORELLCHRYTRIOOP1N0603M" 257) ("CORELLCHRYTRIOOP1N0501M" 258))))(defvar *g-mvt*)(setf *g-mvt*      (mapcar #'list *lnpl*))(defun factorize (n)  (do* ((i 1 (1+ i))        (list-of-factors nil))       ((> i (sqrt n))        (sort (append (mapcar #'(lambda (f)                                  (/ n f))                              list-of-factors)                      list-of-factors)              #'<))    (if (zerop (mod n i))      (setf list-of-factors            (cons i list-of-factors)))))(defun stratify-by-size ()  (let* ((sorted-lnpl (sort (mapcar #'copy-list *lnpl*)                            #'<                            :key #'second))         (min-sd-of-cvs 1000000000)         (best-number-of-strata nil))    (dolist (number-of-strata (cdr (butlast (factorize (list-length sorted-lnpl)))))      (let* ((size-of-stratum (/ (list-length sorted-lnpl)                                 number-of-strata))             (stratification (let* (s)                               (dotimes (i number-of-strata s)                                 (setf s                                       (cons (subseq sorted-lnpl                                                      (* i size-of-stratum)                                                     (* (1+ i) size-of-stratum))                                             s)))))             (list-of-max-sizes (mapcar #'(lambda (s)                                            (apply #'max (mapcar #'second s)))                                        stratification))             (list-of-min-sizes (mapcar #'(lambda (s)                                            (apply #'min (mapcar #'second s)))                                        stratification))             (list-of-mean-sizes (mapcar #'(lambda (s)                                             (mean (mapcar #'second s)))                                         stratification))             (list-of-sds (mapcar #'(lambda (s)                                      (standard-deviation (mapcar #'second s)))                                  stratification))             (list-of-cvs (mapcar #'(lambda (m s)                                      (/ s m))                                  list-of-mean-sizes                                  list-of-sds))             (sd-of-cvs (standard-deviation list-of-cvs))             (list-of-ranges (mapcar #'list list-of-min-sizes list-of-max-sizes)))        (if (< sd-of-cvs min-sd-of-cvs)          (setf min-sd-of-cvs sd-of-cvs                best-number-of-strata number-of-strata))        (format t "~%~%Number of strata = ~d" number-of-strata)        (format t "~%Size of stratum = ~d" size-of-stratum)        (format t "~%SD of coefficient of variations = ~,5f" sd-of-cvs)        (format t "~%Ranges of strata: ~a" list-of-ranges)))    (format t "~%Best number of strata = ~d" best-number-of-strata)    (format t "~%SD of CV for best stratification = ~,5f" min-sd-of-cvs)))