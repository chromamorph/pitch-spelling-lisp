;; This file contains functions for analysing the results of my;; evaluation of the ChewChen algorithm.(load "/Users/dave/Documents/Lisp/new-programs/open-read-close.lisp")(load "/Users/dave/Documents/Lisp/new-programs/statistics.lisp")(defstruct parameter-set  ws  wr  f  r  chunk-size  starting-or-sounding  sa-or-lof  sa-range  note-error-count  pin-error-count)(defun mixed-type-vector-< (mtv1 mtv2)  (cond ((null mtv2)         nil)        ((null mtv1)         t)        ((equalp mtv1 mtv2)         nil)        ((< (list-length mtv1) (list-length mtv2))         t)        ((> (list-length mtv1) (list-length mtv2))         nil)        ((and (numberp (first mtv1))              (numberp (first mtv2))              (< (first mtv1) (first mtv2)))         t)        ((and (numberp (first mtv1))              (numberp (first mtv2))              (> (first mtv1) (first mtv2)))         nil)        ((and (numberp (first mtv1))              (numberp (first mtv2)))         (mixed-type-vector-< (cdr mtv1) (cdr mtv2)))        ((and (listp (first mtv1))              (listp (first mtv2))              (mixed-type-vector-< (first mtv1) (first mtv2)))         t)        ((and (listp (first mtv1))              (listp (first mtv2))              (mixed-type-vector-< (first mtv2) (first mtv1)))         nil)        ((equalp (first mtv1) (first mtv2))         (mixed-type-vector-< (cdr mtv1) (cdr mtv2)))        ((string< (string (first mtv1)) (string (first mtv2)))         t)        ((string> (string (first mtv1)) (string (first mtv2)))         nil)        (t         (mixed-type-vector-< (cdr mtv1) (cdr mtv2)))))(defun paramset-less-than-for-ws (ps1 ps2)  (paramset-less-than ps1 ps2 '(wr f r cs sos sol sar ws)))(defun paramset-less-than-for-wr (ps1 ps2)  (paramset-less-than ps1 ps2 '(ws f r cs sos sol sar wr)))(defun paramset-less-than (ps1 ps2 priority-vector)  (let* ((ws1 (parameter-set-ws ps1))         (ws2 (parameter-set-ws ps2))         (wr1 (parameter-set-wr ps1))         (wr2 (parameter-set-wr ps2))         (f1 (parameter-set-f ps1))         (f2 (parameter-set-f ps2))         (r1 (parameter-set-r ps1))         (r2 (parameter-set-r ps2))         (cs1 (parameter-set-chunk-size ps1))         (cs2 (parameter-set-chunk-size ps2))         (sos1 (parameter-set-starting-or-sounding ps1))         (sos2 (parameter-set-starting-or-sounding ps2))         (sol1 (parameter-set-sa-or-lof ps1))         (sol2 (parameter-set-sa-or-lof ps2))         (sar1 (parameter-set-sa-range ps1))         (sar2 (parameter-set-sa-range ps2))	 (nec1 (parameter-set-note-error-count ps1))	 (nec2 (parameter-set-note-error-count ps2))         (pec1 (parameter-set-pin-error-count ps1))	 (pec2 (parameter-set-pin-error-count ps2))         (psvec1 (mapcar #'(lambda (param-code)			     (case param-code			       (ws ws1)			       (wr wr1)			       (f f1)			       (r r1)			       (cs cs1)			       (sos sos1)			       (sol sol1)			       (sar sar1)			       (nec nec1)			       (pec pec1)))			 priority-vector))         (psvec2 (mapcar #'(lambda (param-code)			     (case param-code			       (ws ws2)			       (wr wr2)			       (f f2)			       (r r2)			       (cs cs2)			       (sos sos2)			       (sol sol2)			       (sar sar2)			       (nec nec2)			       (pec pec2)))			 priority-vector)))    (mixed-type-vector-< psvec1 psvec2)))(defun paramset-less-than-for-startorsound (ps1 ps2)  (paramset-less-than ps1 ps2 '(ws wr f r cs sol sar nec pec sos)))(defun parameter-set-equalp (paramset1                              paramset2                             &key                             (except-for nil))  (and (or (member 'ws except-for)           (equalp (parameter-set-ws paramset1)                   (parameter-set-ws paramset2)))       (or (member 'wr except-for)           (equalp (parameter-set-wr paramset1)                   (parameter-set-wr paramset2)))       (or (member 'f except-for)           (equalp (parameter-set-f paramset1)                   (parameter-set-f paramset2)))       (or (member 'r except-for)           (equalp (parameter-set-r paramset1)                   (parameter-set-r paramset2)))       (or (member 'chunk-size except-for)	   (member 'cs except-for)           (equalp (parameter-set-chunk-size paramset1)                   (parameter-set-chunk-size paramset2)))       (or (member 'starting-or-sounding except-for)	   (member 'sos except-for)           (equalp (parameter-set-starting-or-sounding paramset1)                   (parameter-set-starting-or-sounding paramset2)))       (or (member 'sa-or-lof except-for)	   (member 'sol except-for)           (equalp (parameter-set-sa-or-lof paramset1)                   (parameter-set-sa-or-lof paramset2)))       (or (member 'sa-range except-for)	   (member 'sar except-for)           (equalp (parameter-set-sa-range paramset1)                   (parameter-set-sa-range paramset2)))       (or (member 'note-error-count except-for)	   (member 'nec except-for)           (equalp (parameter-set-note-error-count paramset1)                   (parameter-set-note-error-count paramset2)))       (or (member 'pin-error-count except-for)	   (member 'pec except-for)           (equalp (parameter-set-pin-error-count paramset1)                   (parameter-set-pin-error-count paramset2))))  )(defun startorsound-analysis ()  (let* ((results (open-read-close "/Users/dave/Documents/Musedata/20040829-small-corpus/RESULTS/cc-sorted-new-results"))         (sorted-results (sort results #'paramset-less-than-for-startorsound))	 (starting-results (remove-if #'null (mapcar #'(lambda (ps)							 (if (eq 'starting (parameter-set-starting-or-sounding ps))							     ps))						     sorted-results)))	 (sounding-results (remove-if #'null (mapcar #'(lambda (ps)							 (if (eq 'sounding (parameter-set-starting-or-sounding ps))							     ps))						     sorted-results)))	 (equality-vector (mapcar #'(lambda (start sound)				      (parameter-set-equalp start sound :except-for '(starting-or-sounding note-error-count pin-error-count)))				  starting-results				  sounding-results))	 (i 0))    (if (every #'(lambda (x) x) equality-vector)	(let* ((chewchendata-startorsound-file "/Users/dave/Documents/MIDI-to-notation/03Pitch-spelling/DPhil/chewchenresults-for-startorsound.txt"))	  (with-open-file (output-stream			   chewchendata-startorsound-file			   :direction :output			   :if-exists :rename-and-delete)	    (format output-stream		    "~aws~awr~af~ar~acs~asol~asar~astart.nec~astart.na~asound.nec~asound.na" 		    #\tab #\tab #\tab #\tab #\tab #\tab		    #\tab #\tab #\tab #\tab #\tab)	    (mapcar #'(lambda (ps1 ps2)			(format output-stream				"~%~d~A~d~A~d~A~f~A~f~A~d~A~a~A~a~A~d~A~f~A~d~A~f"				(setf i (1+ i))				#\Tab				(parameter-set-ws ps1)				#\tab				(parameter-set-wr ps1)				#\tab				(parameter-set-f ps1)				#\Tab				(parameter-set-r ps1)				#\Tab				(parameter-set-chunk-size ps1)				#\Tab				(parameter-set-sa-or-lof ps1 )				#\tab				(parameter-set-sa-range ps1)				#\tab				(parameter-set-note-error-count ps1)				#\tab				(* 100 (- 1 (/ (parameter-set-note-error-count ps1) 195972)))				#\tab				(parameter-set-note-error-count ps2)				#\tab				(* 100 (- 1 (/ (parameter-set-note-error-count ps2) 195972)))))		    starting-results		    sounding-results))))))(defun startorsound-analysis-2 (diff-thresh)  (let* ((results (open-read-close "/Users/dave/Documents/Musedata/20040829-small-corpus/RESULTS/cc-sorted-new-results"))         (sorted-results (sort results #'paramset-less-than-for-startorsound))	 (starting-results (remove-if #'null (mapcar #'(lambda (ps)							 (if (eq 'starting (parameter-set-starting-or-sounding ps))							     ps))						     sorted-results)))	 (sounding-results (remove-if #'null (mapcar #'(lambda (ps)							 (if (eq 'sounding (parameter-set-starting-or-sounding ps))							     ps))						     sorted-results)))	 (affected-paramsets (remove-if #'null (mapcar #'(lambda (ps1 ps2)							   (if (<= (abs (- (* 100 (1- (/ (parameter-set-note-error-count ps1) 195972)))									   (* 100 (1- (/ (parameter-set-note-error-count ps2) 195972)))))								   diff-thresh)							       nil							       (list ps1 ps2)))						       starting-results						       sounding-results)))	 (number-of-affected-paramsets (list-length affected-paramsets))	 (percentage-of-paramsets-affected (* 100 (/ number-of-affected-paramsets (list-length sounding-results))))	 (percentage-of-cases-unaffected (* 100 (- 1 (/ number-of-affected-paramsets (list-length sounding-results))))))    (format t "~%Affected paramset pairs: ~aNumber of affected paramset pairs: ~dPercentage of paramset pairs affected: ~,2fPercentage of paramset pairs unaffected: ~,2f"	    affected-paramsets	    number-of-affected-paramsets	    percentage-of-paramsets-affected	    percentage-of-cases-unaffected)    affected-paramsets))(defun startorsound-analysis-3 (output-file)  (let* ((results (open-read-close "/Users/dave/Documents/Musedata/20040829-small-corpus/RESULTS/cc-sorted-new-results"))         (sorted-results (sort results #'paramset-less-than-for-startorsound))	 (starting-results (remove-if #'null (mapcar #'(lambda (ps)							 (if (eq 'starting (parameter-set-starting-or-sounding ps))							     ps))						     sorted-results)))	 (sounding-results (remove-if #'null (mapcar #'(lambda (ps)							 (if (eq 'sounding (parameter-set-starting-or-sounding ps))							     ps))						     sorted-results)))	 (results-sorted-by-difference (sort (mapcar #'(lambda (start-ps sound-ps)							 (if (parameter-set-equalp start-ps sound-ps 										   :except-for '(note-error-count												 pin-error-count												 starting-or-sounding))							     (list (abs (- (* 100 (- 1 (/ (parameter-set-note-error-count start-ps) 195972)))									   (* 100 (- 1 (/ (parameter-set-note-error-count sound-ps) 195972)))))								   (parameter-set-ws start-ps)								   (parameter-set-wr start-ps)								   (parameter-set-f start-ps)								   (parameter-set-r start-ps)								   (parameter-set-chunk-size start-ps)								   (parameter-set-sa-or-lof start-ps)								   (parameter-set-sa-range start-ps)								   (parameter-set-note-error-count start-ps)								   (parameter-set-note-error-count sound-ps)								   (* 100 (- 1 (/ (parameter-set-note-error-count start-ps) 195972)))								   (* 100 (- 1 (/ (parameter-set-note-error-count sound-ps) 195972))))							     (error "Parameter sets are not sufficiently equalp:start-ps = ~asound-ps = ~a"								    start-ps								    sound-ps)))						     starting-results						     sounding-results)					     #'>					     :key #'first)))    (with-open-file (output-stream		     output-file		     :direction :output		     :if-exists :rename-and-delete)      (format output-stream "~%Number of equivalence classes = ~d" (list-length sounding-results))      (format output-stream "~%~6@a~4@a~4@a~5@a~5@a~7@a~4@a~10@a~10@a~10@a~10@a~10@a"	      'diff 'ws 'wr 'f 'r 'cs 'sol 'sar 'nec-start 'nec-sound 'na-start 'na-sound)      (dolist (result results-sorted-by-difference)	(format output-stream "~%~6,2f~4d~4d~5,2f~5,2f~7d~4@a~10@a~10d~10d~10,2f~10,2f"		(first result)		(second result)		(third result)		(fourth result)		(fifth result)		(sixth result)		(seventh result)		(eighth result)		(ninth result)		(tenth result)		(elt result 10)		(elt result 11))))))(defun n-least-accurate-paramsets (n)  (let* ((results (open-read-close "/Users/dave/Documents/Musedata/20040829-small-corpus/RESULTS/cc-sorted-new-results"))	 (sorted-results (sort results #'> :key #'parameter-set-note-error-count)))    (subseq sorted-results 0 n)))(defun paramset-set-equalp (paramset-set1 paramset-set2)  (let ((ps1-ps2 (set-difference paramset-set1 paramset-set2 :test #'equalp))	(ps2-ps1 (set-difference paramset-set2 paramset-set1 :test #'equalp)))    (if (and (null ps1-ps2)	     (null ps2-ps1))      t      (progn (format t "~%ps1-ps2:")	     (pprint ps1-ps2)	     (format t "~%ps2-ps1")	     (pprint ps2-ps1)	     (format t "~%ps1-ps2 contains ~d paramsets~%ps2-ps1 contains ~d paramsets"		     (list-length ps1-ps2)		     (list-length ps2-ps1)		     )))))(defun n-most-affected-by-startorsound (n)  (let* ((results (open-read-close "/Users/dave/Documents/Musedata/20040829-small-corpus/RESULTS/cc-sorted-new-results"))	 (sorted-results (sort results #'paramset-less-than-for-startorsound))	 (starting-results (remove-if #'null (mapcar #'(lambda (ps)							 (if (eq 'starting (parameter-set-starting-or-sounding ps))							     ps))						     sorted-results)))	 (sounding-results (remove-if #'null (mapcar #'(lambda (ps)							 (if (eq 'sounding (parameter-set-starting-or-sounding ps))							     ps))						     sorted-results)))	 (results-sorted-by-difference (sort (mapcar #'(lambda (start-ps sound-ps)							 (if (parameter-set-equalp start-ps sound-ps 										   :except-for '(note-error-count												 pin-error-count												 starting-or-sounding))							     (list (abs (- (* 100 (- 1 (/ (parameter-set-note-error-count start-ps) 195972)))									   (* 100 (- 1 (/ (parameter-set-note-error-count sound-ps) 195972)))))								   start-ps								   sound-ps)							     (error "Parameter sets are not sufficiently equalp:start-ps = ~asound-ps = ~a"								    start-ps								    sound-ps)))						     starting-results						     sounding-results)					     #'>					     :key #'first)))    (subseq results-sorted-by-difference 0 n)))(defun startorsound-analysis-4 (diff-thresh)  "Gets list of results in/Users/dave/Documents/Musedata/20040829-small-corpus/RESULTS/cc-sorted-new-resultsfinds all those parameter value combinations for which the differencebetween the percentage note accuracies when starting-or-sounding =starting and starting-or-sounding = sounding is greater than or equalto diff-thresh. Compares the list of starting param val combos forwhich this is true with the 27 worst performing param val combos anddetermines if these two sets are the same."  (let* ((results (open-read-close "/Users/dave/Documents/Musedata/20040829-small-corpus/RESULTS/cc-sorted-new-results"))         (results-copy (sort (mapcar #'copy-parameter-set results) #'> :key #'parameter-set-note-error-count))	 (worst-results (subseq results-copy 0 27))	 (sorted-results (sort results #'paramset-less-than-for-startorsound))	 (starting-results (remove-if #'null (mapcar #'(lambda (ps)							 (if (eq 'starting (parameter-set-starting-or-sounding ps))							     ps))						     sorted-results)))	 (sounding-results (remove-if #'null (mapcar #'(lambda (ps)							 (if (eq 'sounding (parameter-set-starting-or-sounding ps))							     ps))						     sorted-results)))	 (affected-paramsets (remove-if #'null (mapcar #'(lambda (ps1 ps2)							   (if (<= (abs (- (* 100 (1- (/ (parameter-set-note-error-count ps1) 195972)))									   (* 100 (1- (/ (parameter-set-note-error-count ps2) 195972)))))								   diff-thresh)							       nil							       (list ps1 ps2)))						       starting-results						       sounding-results))))    (and (null (set-difference (mapcar #'first affected-paramsets) worst-results :test #'equalp))	 (null (set-difference worst-results (mapcar #'first affected-paramsets) :test #'equalp)))))(defun print-out-paramsets (set-of-paramsets &key (csv nil) (output-stream t))  (if csv      (format output-stream "~a,~a,~a,~a,~a,~a,~a,~a,~a,~a,~a,~a"	      'ws 'wr 'f 'r 'cs 'sos 'sol 'sar 'nec 'pec 'na 'glc)      (format output-stream "~%~5@a~5@a~5@a~10@a~10@a~10@a~5@a~10@a~10@a~10@a~10@a~10@a"	      'ws 'wr 'f 'r 'cs 'sos 'sol 'sar 'nec 'pec 'na 'glc))  (dolist (paramset set-of-paramsets)    (format output-stream	    (if csv		"~%~d,~d,~f,~f,~d,~a,~a,~a,~d,~d,~f,~a"		"~%~5d~5d~5,2f~10,4f~10d~10@a~5@a~10@a~10d~10d~10,2f~10@a")	    (parameter-set-ws paramset)	    (parameter-set-wr paramset)	    (parameter-set-f paramset)	    (parameter-set-r paramset)	    (parameter-set-chunk-size paramset)	    (parameter-set-starting-or-sounding paramset)	    (parameter-set-sa-or-lof paramset)	    (parameter-set-sa-range paramset)	    (parameter-set-note-error-count paramset)	    (parameter-set-pin-error-count paramset)	    (* 100 (- 1 (/ (parameter-set-note-error-count paramset) 195972)))	    (let ((ws (parameter-set-ws paramset))		  (wr (parameter-set-wr paramset))		  (f (parameter-set-f paramset)))	      (cond ((and (/= ws 0)			  (/= wr 0)			  (< 0 f 1))		     'glc)		    ((and (= f 1)			  (> wr 0)			  (> ws 0))		     'gl)		    ((and (= f 1)			  (= wr 0)			  (> ws 0))		     'g)		    ((or (= f 0)			 (and (< 0 f 1)			      (or (= 0 ws)				  (= 0 wr))))		     'c)		    (t		     (error "Unable to categorise parameter set into glc, gl, g or c: ~a" paramset)))))))(defun chew-chen-results-subset (&key (ws 'undefined)                                      (wr 'undefined)                                      (f 'undefined)                                      (r 'undefined)                                      (chunk-size 'undefined)                                      (starting-or-sounding 'undefined)                                      (sa-or-lof 'undefined)                                      (sa-range 'undefined)                                      (note-error-count 'undefined)                                      (pin-error-count 'undefined))"Finds a subset of the parameter-set records in /Users/dave/Documents/Musedata/20040829-small-corpus/RESULTS/cc-sorted-new-results."  (let* ((results (open-read-close "/Users/dave/Documents/Musedata/20040829-small-corpus/RESULTS/cc-sorted-new-results"))         (test-ps (make-parameter-set :ws ws                                      :wr wr                                      :f f                                      :r r                                      :chunk-size chunk-size                                      :starting-or-sounding starting-or-sounding                                      :sa-or-lof sa-or-lof                                      :sa-range sa-range                                      :note-error-count note-error-count                                      :pin-error-count pin-error-count))         (except-for-set (let* ((efs nil))                           (if (eq 'undefined (parameter-set-ws test-ps))                             (setf efs (cons 'ws efs)))                           (if (eq 'undefined (parameter-set-wr test-ps))                             (setf efs (cons 'wr efs)))                           (if (eq 'undefined (parameter-set-f test-ps))                             (setf efs (cons 'f efs)))                           (if (eq 'undefined (parameter-set-r test-ps))                             (setf efs (cons 'r efs)))                           (if (eq 'undefined (parameter-set-chunk-size test-ps))                             (setf efs (cons 'chunk-size efs)))                           (if (eq 'undefined (parameter-set-starting-or-sounding test-ps))                             (setf efs (cons 'starting-or-sounding efs)))                           (if (eq 'undefined (parameter-set-sa-or-lof test-ps))                             (setf efs (cons 'sa-or-lof efs)))                           (if (eq 'undefined (parameter-set-sa-range test-ps))                             (setf efs (cons 'sa-range efs)))                           (if (eq 'undefined (parameter-set-note-error-count test-ps))                             (setf efs (cons 'note-error-count efs)))                           (if (eq 'undefined (parameter-set-pin-error-count test-ps))                             (setf efs (cons 'pin-error-count efs))))))    (remove-if #'null (mapcar #'(lambda (ps)                                  (if (parameter-set-equalp test-ps ps :except-for except-for-set)                                    ps))                              results))));; (defun startorsound-analysis-5 ();;   (let* ((results (open-read-close "/Users/dave/Documents/Musedata/20040829-small-corpus/RESULTS/cc-sorted-new-results"));; 	 (results-copy (sort (mapcar #'copy-parameter-set results) #'> :key #'parameter-set-note-error-count));; 	 (worst-results (subseq results-copy 0 27));; 	 (generated-result-set (remove-if #'null (mapcar #'(lambda (ps);; 							     (let* ((ws (parameter-set-ws ps));; 								    (wr (parameter-set-wr ps));; 								    (f (parameter-set-f ps));; 								    (r (parameter-set-r ps));; 								    (cs (parameter-set-chunk-size ps));; 								    (sos (parameter-set-starting-or-sounding ps));; 								    (sol (parameter-set-sa-or-lof ps));; 								    (sar (parameter-set-sa-range ps));; 								    (nec (parameter-set-note-error-count ps));; 								    (pec (parameter-set-pin-error-count ps)));; 							       (and (= f 1);; 								    (eq sos 'starting);; 								    (or (and (= 4 ws);; 									     (= chunk-size 500));; 									()))));; 							 results))))))(defun generate-chew-chen-data-for-ws-analysis ()  "This function generates a fixed-width table for input to R foranalysing the effect of ws on note accuracy."  (let* ((results (open-read-close "/Users/dave/Documents/Musedata/20040829-small-corpus/RESULTS/cc-sorted-new-results"))	 (glc-equiv-class (remove-if #'null (mapcar #'(lambda (ps)							(let* ((ws (parameter-set-ws ps))							       (wr (parameter-set-wr ps))							       (f (parameter-set-f ps)))							  (if (and (/= ws 0)								   (/= wr 0)								   (< 0 f 1))							      (copy-parameter-set ps))))						    results)))	 (gl-equiv-class (remove-if #'null (mapcar #'(lambda (ps)						       (let* ((ws (parameter-set-ws ps))							      (wr (parameter-set-wr ps))							      (f (parameter-set-f ps)))							 (if (and (= f 1)								  (> wr 0)								  (> ws 0))							     (copy-parameter-set ps))))						   results)))	 (g-equiv-class (remove-if #'null (mapcar #'(lambda (ps)						      (let* ((ws (parameter-set-ws ps))							     (wr (parameter-set-wr ps))							     (f (parameter-set-f ps)))							(if (and (= f 1)								 (= wr 0)								 (> ws 0))							    (copy-parameter-set ps))))						  results)))	 (sorted-glc-class (sort glc-equiv-class #'paramset-less-than-for-ws))	 (sorted-gl-class (sort gl-equiv-class #'paramset-less-than-for-ws))	 (sorted-g-class (sort g-equiv-class #'paramset-less-than-for-ws))	 (glc-file-name "/Users/dave/Documents/MIDI-to-notation/03Pitch-spelling/DPhil/cc-glc-data-for-ws")	 (gl-file-name "/Users/dave/Documents/MIDI-to-notation/03Pitch-spelling/DPhil/cc-gl-data-for-ws")	 (g-file-name "/Users/dave/Documents/MIDI-to-notation/03Pitch-spelling/DPhil/cc-g-data-for-ws"))    (mapcar #'(lambda (file-name sorted-class)		(with-open-file (file-stream				 file-name				 :direction :output				 :if-exists :rename-and-delete)		  (format file-stream			  "~a,~a,~a,~a,~a,~a,~a,~a,~a,~a"					;"" 			  'wr 'f 'r 'cs 'sos 'sol 'sar 'na.for.ws.4 'na.for.ws.8 'na.for.ws.16)		  (do* ((i 0)			(ps nil)			(next-ps nil)			(next-but-one-ps nil)			(na-list nil nil)			;(j 0)			)		       ((= i (list-length sorted-class)))		    (setf ps (elt sorted-class i))		    (if (and (= 4 (parameter-set-ws ps))			     -(parameter-set-equalp ps (elt sorted-class (1+ i))						    :except-for '(ws note-error-count pin-error-count))			     (parameter-set-equalp ps (elt sorted-class (+ i 2))						   :except-for '(ws note-error-count pin-error-count)))			(setf next-ps (elt sorted-class (1+ i))			      next-but-one-ps (elt sorted-class (+ 2 i))			      i (+ i 3)			      na-list (mapcar #'(lambda (ps)						  (* 100.0 (- 1 (/ (parameter-set-note-error-count ps) 195972))))					      (list ps next-ps next-but-one-ps)))			(if (and (= 8 (parameter-set-ws ps))				 (parameter-set-equalp ps (elt sorted-class (1+ i))						       :except-for '(ws note-error-count pin-error-count)))			    (setf next-ps (elt sorted-class (1+ i))				  next-but-one-ps nil				  i (+ i 2)				  na-list (list 'NA 						(* 100.0 (- 1 (/ (parameter-set-note-error-count ps) 195972)))						(* 100.0 (- 1 (/ (parameter-set-note-error-count next-ps) 195972)))))			    (error "First ps in set is not ws = 4 or ws = 8.: ~a" ps)))		    (format file-stream			    "~%~d,~f,~f,~d,~a,~a,~a,~a,~f,~f"					;(setf j (1+ j))			    (parameter-set-wr ps)			    (parameter-set-f ps)			    (parameter-set-r ps)			    (parameter-set-chunk-size ps)			    (parameter-set-starting-or-sounding ps)			    (parameter-set-sa-or-lof ps)			    (parameter-set-sa-range ps)			    (first na-list)			    (second na-list)			    (third na-list))		    ;; For debugging only		    ;; (if (> i 324) (format t "~%GOT HERE, i = ~d" i))		    ;; end of debugging code		    )))	    (list glc-file-name gl-file-name g-file-name)	    (list sorted-glc-class sorted-gl-class sorted-g-class))))(defun generate-chew-chen-data-for-wr-analysis ()  "This function generates a CSV table for input to R foranalysing the effect of ws on note accuracy."  (let* ((results (open-read-close "/Users/dave/Documents/Musedata/20040829-small-corpus/RESULTS/cc-sorted-new-results"))	 (glc-equiv-class (remove-if #'null (mapcar #'(lambda (ps)							(let* ((ws (parameter-set-ws ps))							       (wr (parameter-set-wr ps))							       (f (parameter-set-f ps)))							  (if (and (/= ws 0)								   (/= wr 0)								   (< 0 f 1))							      (copy-parameter-set ps))))						    results)))	 (gl-equiv-class (remove-if #'null (mapcar #'(lambda (ps)						       (let* ((ws (parameter-set-ws ps))							      (wr (parameter-set-wr ps))							      (f (parameter-set-f ps)))							 (if (and (= f 1)								  (> wr 0)								  (> ws 0))							     (copy-parameter-set ps))))						   results)))	 	 (sorted-glc-class (sort glc-equiv-class #'paramset-less-than-for-wr))	 (sorted-gl-class (sort gl-equiv-class #'paramset-less-than-for-wr))	 (glc-file-name "/Users/dave/Documents/MIDI-to-notation/03Pitch-spelling/DPhil/cc-glc-data-for-wr")	 (gl-file-name "/Users/dave/Documents/MIDI-to-notation/03Pitch-spelling/DPhil/cc-gl-data-for-wr"))    (mapcar #'(lambda (file-name sorted-class)		(with-open-file (file-stream				 file-name				 :direction :output				 :if-exists :rename-and-delete)		  (format file-stream			  "~a,~a,~a,~a,~a,~a,~a,~a,~a,~a"					;"" 			  'ws 'f 'r 'cs 'sos 'sol 'sar 'na.for.wr.2 'na.for.wr.4 'na.for.wr.6)		  (do* ((i 0)			(ps nil)			(next-ps nil)			(next-but-one-ps nil)			(na-list nil nil)			;(j 0)			)		       ((= i (list-length sorted-class)))		    (setf ps (elt sorted-class i))		    (if (and (= 2 (parameter-set-wr ps))			     (> (parameter-set-ws ps) 4)			     (parameter-set-equalp ps (elt sorted-class (1+ i))						    :except-for '(wr note-error-count pin-error-count))			     (parameter-set-equalp ps (elt sorted-class (+ i 2))						   :except-for '(wr note-error-count pin-error-count)))			(setf next-ps (elt sorted-class (1+ i))			      next-but-one-ps (elt sorted-class (+ 2 i))			      i (+ i 3)			      na-list (mapcar #'(lambda (ps)						  (* 100.0 (- 1 (/ (parameter-set-note-error-count ps) 195972))))					      (list ps next-ps next-but-one-ps)))			(if (and (= 2 (parameter-set-wr ps))				 (= 4 (parameter-set-ws ps))				 (parameter-set-equalp ps (elt sorted-class (1+ i))						       :except-for '(wr note-error-count pin-error-count)))			    (setf next-ps (elt sorted-class (1+ i))				  next-but-one-ps nil				  i (+ i 2)				  na-list (list (* 100.0 (- 1 (/ (parameter-set-note-error-count ps) 195972)))						(* 100.0 (- 1 (/ (parameter-set-note-error-count next-ps) 195972)))						'NA))			    (error "ERROR generating data: ~a (i=~d)" ps i)))		    (format file-stream			    "~%~d,~f,~f,~d,~a,~a,~a,~f,~f,~a"					;(setf j (1+ j))			    (parameter-set-ws ps)			    (parameter-set-f ps)			    (parameter-set-r ps)			    (parameter-set-chunk-size ps)			    (parameter-set-starting-or-sounding ps)			    (parameter-set-sa-or-lof ps)			    (parameter-set-sa-range ps)			    (first na-list)			    (second na-list)			    (third na-list))		    ;; For debugging only		    ;; (if (> i 324) (format t "~%GOT HERE, i = ~d" i))		    ;; end of debugging code		    )))	    (list glc-file-name gl-file-name)	    (list sorted-glc-class sorted-gl-class))))(defun paramset-less-than-for-f (ps1 ps2)  (paramset-less-than ps1 ps2 '(ws wr r cs sos sol sar f)))(defun generate-chew-chen-data-for-f-analysis ()  "This function generates a CSV table for input to R foranalysing the effect of f on note accuracy."  (let* ((results (open-read-close "/Users/dave/Documents/Musedata/20040829-small-corpus/RESULTS/cc-sorted-new-results"))	 (sorted-results (sort results #'paramset-less-than-for-f))	 (f-is-.25-wr-not-0 (remove-if #'null (mapcar #'(lambda (ps)							  (if (= 0.25 (parameter-set-f ps))							      (copy-parameter-set ps)))						      sorted-results)))	 (f-is-.5-wr-not-0 (remove-if #'null (mapcar #'(lambda (ps)							 (if (= 0.5 (parameter-set-f ps))							     (copy-parameter-set ps)))						     sorted-results)))	 (f-is-.75-wr-not-0 (remove-if #'null (mapcar #'(lambda (ps)							  (if (= 0.75 (parameter-set-f ps))							      (copy-parameter-set ps)))						      sorted-results)))	 (f-is-1-wr-not-0 (remove-if #'null (mapcar #'(lambda (ps)							(if (and (= 1 (parameter-set-f ps))								 (/= 0 (parameter-set-wr ps)))							    (copy-parameter-set ps)))						    sorted-results)))	 ;; If f is 0 and wr is not 0, then this is the same as the	 ;; cumulative CE alone so it doesn't matter what values wr	 ;; and ws have in these circumstances. We therefore have to	 ;; find for each of the wr not 0 cases, a cumulative CE	 ;; paramset in which all the other parameters values are the	 ;; same.	 (f-is-0 (remove-if #'null (mapcar #'(lambda (ps)					       (if (= 0 (parameter-set-f ps)) 						   (copy-parameter-set ps)))					   sorted-results)))	 (f-is-0-wr-not-0 (mapcar #'(lambda (ps1)				      (copy-parameter-set 				       (find ps1 f-is-0					     :test #'(lambda (ps1 ps2)						       (parameter-set-equalp ps1 ps2									     :except-for '(f nec pec ws wr))))))				  f-is-.25-wr-not-0))	 (f-is-1-wr-is-0 (remove-if #'null (mapcar #'(lambda (ps)						       (if (and (= 1 (parameter-set-f ps))								(= 0 (parameter-set-wr ps)))							   (copy-parameter-set ps)))						   sorted-results)))	 ;; Need to find a match for each paramset in	 ;; f-is-1-wr-is-0. If wr is 0 and f != 1 then effect is same	 ;; as if f=0. We therefore need to find a paramset in f-is-0	 ;; which matches in all respects except for f, nec, pec, ws	 ;; and wr. It doesn't matter what ws and wr are when f = 0.	 (f-is-0-for-wr-is-0 (mapcar #'(lambda (ps1)					 (copy-parameter-set (find ps1 f-is-0								   :test #'(lambda (ps1 ps2)									     (parameter-set-equalp ps1 ps2 :except-for '(f nec pec ws wr))))))				     f-is-1-wr-is-0)))    (if (and (remove-duplicates (mapcar #'(lambda (ps1 ps2)					    (parameter-set-equalp ps1 ps2 :except-for '(f note-error-count pin-error-count)))					f-is-.25-wr-not-0					f-is-.5-wr-not-0)				:test #'equalp)	     (remove-duplicates (mapcar #'(lambda (ps1 ps2)					    (parameter-set-equalp ps1 ps2 :except-for '(f note-error-count pin-error-count)))					f-is-.5-wr-not-0					f-is-.75-wr-not-0)				:test #'equalp)	     (remove-duplicates (mapcar #'(lambda (ps1 ps2)					    (parameter-set-equalp ps1 ps2 :except-for '(f note-error-count pin-error-count)))					f-is-.75-wr-not-0					f-is-1-wr-not-0)				:test #'equalp)	     (remove-duplicates (mapcar #'(lambda (ps1 ps2)					    (parameter-set-equalp ps1 ps2 :except-for '(f note-error-count pin-error-count ws wr)))					f-is-0-wr-not-0					f-is-1-wr-not-0)				:test #'equalp)	     (remove-duplicates (mapcar #'(lambda (ps1 ps2)					    (parameter-set-equalp ps1 ps2 :except-for '(f note-error-count pin-error-count ws wr)))					f-is-0-for-wr-is-0					f-is-1-wr-is-0)				:test #'equalp))	(let* ((wr-is-0-file-name "/Users/dave/Documents/MIDI-to-notation/03Pitch-spelling/DPhil/cc-wr-is-0-data-for-f")	       (wr-not-0-file-name "/Users/dave/Documents/MIDI-to-notation/03Pitch-spelling/DPhil/cc-wr-not-0-data-for-f"))	  (with-open-file (file-stream			   wr-is-0-file-name			   :direction :output			   :if-exists :rename-and-delete)	    (format file-stream		    "~a,~a,~a,~a,~a,~a,~a,~a,~a"		    'ws 'wr 'r 'cs 'sos 'sol 'sar 'na0 'na1)	    (mapcar #'(lambda (psf0 psf1)			(format file-stream				"~%~d,~d,~f,~d,~a,~a,~a,~f,~f"				(parameter-set-ws psf1)				(parameter-set-wr psf1)				(parameter-set-r psf1)				(parameter-set-chunk-size psf1)				(parameter-set-starting-or-sounding psf1)				(parameter-set-sa-or-lof psf1)				(parameter-set-sa-range psf1)				(* 100 (- 1 (/ (parameter-set-note-error-count psf0) 195972)))				(* 100 (- 1 (/ (parameter-set-note-error-count psf1) 195972)))))		    f-is-0-for-wr-is-0		    f-is-1-wr-is-0))	  (with-open-file (file-stream			   wr-not-0-file-name			   :direction :output			   :if-exists :rename-and-delete)	    (format file-stream		    "~a,~a,~a,~a,~a,~a,~a,~a,~a,~a,~a,~a"		    'ws 'wr 'r 'cs 'sos 'sol 'sar 'na0 'na.25 'na.5 'na.75 'na1)	    (mapcar #'(lambda (psf0 psf.25 psf.5 psf.75 psf1)			(format file-stream				"~%~d,~d,~f,~d,~a,~a,~a,~f,~f,~f,~f,~f"				(parameter-set-ws psf1)				(parameter-set-wr psf1)				(parameter-set-r psf1)				(parameter-set-chunk-size psf1)				(parameter-set-starting-or-sounding psf1)				(parameter-set-sa-or-lof psf1)				(parameter-set-sa-range psf1)				(* 100 (- 1 (/ (parameter-set-note-error-count psf0) 195972)))				(* 100 (- 1 (/ (parameter-set-note-error-count psf.25) 195972)))				(* 100 (- 1 (/ (parameter-set-note-error-count psf.5) 195972)))				(* 100 (- 1 (/ (parameter-set-note-error-count psf.75) 195972)))				(* 100 (- 1 (/ (parameter-set-note-error-count psf1) 195972)))))		    f-is-0-wr-not-0		    f-is-.25-wr-not-0		    f-is-.5-wr-not-0		    f-is-.75-wr-not-0		    f-is-1-wr-not-0))))))(defun paramset-less-than-for-chunksize (ps1 ps2)  (paramset-less-than ps1 ps2 '(ws wr f r sos sol sar cs)))(defun generate-chew-chen-data-for-chunksize-analysis ()  "This function generates a CSV table that can be input to R foranalysing the effect of ChunkSize on percentage note accuracy."  (let* ((results (open-read-close "/Users/dave/Documents/Musedata/20040829-small-corpus/RESULTS/cc-sorted-new-results"))	 (sorted-results (sort results #'paramset-less-than-for-chunksize))	 (cs500 (remove-if #'null (mapcar #'(lambda (ps)					      (if (= 500 (parameter-set-chunk-size ps))						  (copy-parameter-set ps)))					  sorted-results)))	 (cs1000 (remove-if #'null (mapcar #'(lambda (ps)					       (if (= 1000 (parameter-set-chunk-size ps))						   (copy-parameter-set ps)))					   sorted-results)))	 (cs2000 (remove-if #'null (mapcar #'(lambda (ps)					       (if (= 2000 (parameter-set-chunk-size ps))						   (copy-parameter-set ps)))					   sorted-results))))    (if (every #'(lambda (ps1 ps2 ps3)		   (parameter-set-equalp ps1 ps2 :except-for '(cs nec pec))		   (parameter-set-equalp ps3 ps2 :except-for '(cs nec pec)))	       cs500	       cs1000	       cs2000)	(let* ((output-file "/Users/dave/Documents/MIDI-to-notation/03Pitch-spelling/DPhil/cc-cs-analysis-data"))	  (with-open-file (output-stream			   output-file			   :direction :output			   :if-exists :rename-and-delete)	    (format output-stream		    "~a,~a,~a,~a,~a,~a,~a,~a,~a,~a,~a,~a,~a"		    'ws 'wr 'f 'r 'sos 'sol 'sar 'na500 'na1000 'na2000 'na500to1000 'na1000to2000 'glc)	    (mapcar #'(lambda (ps500 ps1000 ps2000)			(with-slots (ws wr f r starting-or-sounding sa-or-lof sa-range (nec500 note-error-count))			    ps500			  (let* ((nec1000 (parameter-set-note-error-count ps1000))				 (nec2000 (parameter-set-note-error-count ps2000))				 (na500 (* 100 (- 1 (/ nec500 195972))))				 (na1000 (* 100 (- 1 (/ nec1000 195972))))				 (na2000 (* 100 (- 1 (/ nec2000 195972))))				 (na500to1000 (- na1000 na500))				 (na1000to2000 (- na2000 na1000)))			    (format output-stream				    "~%~d,~d,~f,~f,~a,~a,~a,~f,~f,~f,~f,~f,~a"				    ws wr f r starting-or-sounding sa-or-lof sa-range				    na500				    na1000				    na2000				    na500to1000				    na1000to2000				    ;; Need to compute whether this				    ;; equiv class is a subset of g,				    ;; c, gl or glc.				    (cond ((and (/= ws 0)						(/= wr 0)						(< 0 f 1))					   'glc)					  ((and (= f 1)						(> wr 0)						(> ws 0))					   'gl)					  ((and (= f 1)						(= wr 0)						(> ws 0))					   'g)					  ((or (= f 0)					       (and (< 0 f 1)						    (or (= 0 ws)							(= 0 wr))))					   'c)					  (t					   (error "Unable to categorise parameter set into glc, gl, g or c: ~a" ps500)))))))		    cs500 cs1000 cs2000))))))(defun paramset-less-than-for-sa-range (ps1 ps2)  (paramset-less-than ps1 ps2 '(ws wr f r cs sos sol sar)))(defun paramset-less-than-for-nec (ps1 ps2)  (paramset-less-than ps1 ps2 '(nec ws wr f r cs sos sol sar)))(defun analyse-sa-range ()  "Carries out analysis for sa-range."  (let* (results results-sorted-by-nec sorted-results minus15to19 minus22to26)    (setf results (open-read-close "/Users/dave/Documents/Musedata/20040829-small-corpus/RESULTS/cc-sorted-new-results"))    (setf results-sorted-by-nec (sort (mapcar #'copy-parameter-set results) #'paramset-less-than-for-nec))    (setf sorted-results (sort (mapcar #'copy-parameter-set results) #'paramset-less-than-for-sa-range))    (setf minus15to19 (remove-if #'null (mapcar #'(lambda (ps)						    (if (equalp '(-15 19)								(parameter-set-sa-range ps))							(copy-parameter-set ps)))						sorted-results)))    (setf minus22to26 (remove-if #'null (mapcar #'(lambda (ps)						    (if (equalp '(-22 26)								(parameter-set-sa-range ps))							(copy-parameter-set ps)))						sorted-results)))    (if (every #'(lambda (x) x) (mapcar #'(lambda (ps1 ps2)					    (parameter-set-equalp ps1 ps2 :except-for '(sar nec pec)))					minus15to19					minus22to26))	(let* (affected-paramset-pairs 	       minus15to19-file-name	       minus22to26-file-name	       affected-paramsets-improved	       affected-paramsets-sorted-by-nec	       affected-paramsets-worsened	       list-of-diffs-for-improved-paramset-pairs	       list-of-diffs-for-worsened-paramset-pairs)	  (setf affected-paramset-pairs (remove-if #'null (mapcar #'(lambda (ps1 ps2)								      (if (/= (parameter-set-note-error-count ps1)									      (parameter-set-note-error-count ps2))									  (list ps1 ps2)))								  minus15to19								  minus22to26)))	  (setf minus15to19-file-name "/Users/dave/Documents/MIDI-to-notation/03Pitch-spelling/DPhil/cc-minus15to19")	  (setf minus22to26-file-name "/Users/dave/Documents/MIDI-to-notation/03Pitch-spelling/DPhil/cc-minus22to26")	  (setf affected-paramsets-sorted-by-nec (sort (mapcar #'copy-parameter-set (apply #'append affected-paramset-pairs))						       #'paramset-less-than-for-nec))	  (setf affected-paramsets-improved (remove-if #'null (mapcar #'(lambda (pair)									  (if (> (parameter-set-note-error-count (first pair))										 (parameter-set-note-error-count (second pair)))									      pair))								      affected-paramset-pairs)))	  (setf affected-paramsets-worsened (remove-if #'null (mapcar #'(lambda (pair)									  (if (< (parameter-set-note-error-count (first pair))										 (parameter-set-note-error-count (second pair)))									      pair))								      affected-paramset-pairs)))	  (setf list-of-diffs-for-improved-paramset-pairs (mapcar #'(lambda (pair)								      (- (parameter-set-na (second pair))									 (parameter-set-na (first pair))))								  affected-paramsets-improved))	  (setf list-of-diffs-for-worsened-paramset-pairs (mapcar #'(lambda (pair)								      (- (parameter-set-na (second pair))									 (parameter-set-na (first pair))))								  affected-paramsets-worsened))	  (setf constructed-set-of-affected-paramsets (union (set-difference (chew-chen-results-subset :f 1 :sa-range '(-15 19))									     (chew-chen-results-subset :ws 4 												       :wr 0 												       :f 1 												       :chunk-size 2000												       :starting-or-sounding 'sounding												       :sa-range '(-15 19))									     :test #'equalp)							     (chew-chen-results-subset :ws 4										       :wr 2										       :f .75										       :chunk-size 500										       :starting-or-sounding 'starting										       :sa-range '(-15 19))							     :test #'equalp))	  (paramset-set-equalp constructed-set-of-affected-paramsets			      (mapcar #'first affected-paramset-pairs))	  (setf constructed-set-of-affected-paramsets-improved (append (remove-if  #'(lambda (ps)										       (or (and (= 4 (parameter-set-ws ps))												(/= 2000 (parameter-set-chunk-size ps)))											   (and (= 8 (parameter-set-ws ps))												(/= 1000 (parameter-set-chunk-size ps)))											   (and (= 16 (parameter-set-ws ps))												(= 1000 (parameter-set-chunk-size ps))												(/= 2 (parameter-set-wr ps)))											   (and (= 4 (parameter-set-ws ps))												(= 2000 (parameter-set-chunk-size ps))												(= 0 (parameter-set-wr ps))												(eq 'sounding (parameter-set-starting-or-sounding ps)))))										   (chew-chen-results-subset :f 1 :sa-range '(-15 19)))								       (chew-chen-results-subset :ws 8 												 :wr 2 												 :f 1 												 :chunk-size 2000												 :starting-or-sounding 'starting												 :sa-range '(-15 19))								       (chew-chen-results-subset :ws 16 												 :wr 4												 :f 1 												 :chunk-size 1000												 :starting-or-sounding 'starting												 :sa-range '(-15 19))								       ))	  (paramset-set-equalp constructed-set-of-affected-paramsets-improved			       (mapcar #'first affected-paramsets-improved))	  (with-open-file (output-stream			   minus15to19-file-name			   :direction :output			   :if-exists :rename-and-delete)	    (print-out-paramsets minus15to19 :csv t :output-stream output-stream))	  (with-open-file (output-stream			   minus22to26-file-name			   :direction :output			   :if-exists :rename-and-delete)	    (print-out-paramsets minus22to26 :csv t :output-stream output-stream))))))(defun parameter-set-na (parameter-set)  (* 100.0 (- 1 (/ (parameter-set-note-error-count parameter-set) 195972))))