;; Functions for printing results and running algorithms.(defun run-alg-and-print-results (ALGORITHM                                  OPNDV-SORTER                                  OPNDV-TO-INPUT-CONVERTER                                  OUTPUT-TO-OPNDV-CONVERTER                                  INPUT-FILE-SUFFIX                                  OUTPUT-FILE-SUFFIX                                  INPUT-DIRECTORY                                  OUTPUT-DIRECTORY                                  results-directory)  (run-algorithm ALGORITHM                  OPNDV-SORTER                 OPNDV-TO-INPUT-CONVERTER                 OUTPUT-TO-OPNDV-CONVERTER                 INPUT-FILE-SUFFIX                 OUTPUT-FILE-SUFFIX                 INPUT-DIRECTORY                 OUTPUT-DIRECTORY)  (mapcar #'(lambda (composer)              (print-results input-file-suffix                             output-file-suffix                             input-directory                             output-directory                             results-directory			     composer))          '("" "bach" "beet" "corell" "handel" "haydn" "mozart" "telema" "vivald")))(defun run-algorithm (algorithm                      opndv-sorter                      opndv-to-input-converter                      output-to-opndv-converter                      input-file-suffix                      output-file-suffix                      input-directory                      output-directory)  (format t "~%ALGORITHM: ~aOPNDV SORTER: ~AOPNDV-TO-INPUT CONVERTER: ~AOUTPUT-TO-OPNDV CONVERTER: ~AINPUT FILE SUFFIX: ~AOUTPUT FILE SUFFIX: ~AINPUT DIRECTORY: ~AOUTPUT DIRECTORY: ~A"          algorithm           opndv-sorter          opndv-to-input-converter          output-to-opndv-converter          input-file-suffix          output-file-suffix          input-directory          output-directory          )  (let* ((input-opndv-file-name-list (directory (concatenate 'string							     input-directory							     "*."							     input-file-suffix))))    (time (mapcar #'(lambda (input-opndv-file-name)                      (format t "~%~a..." input-opndv-file-name) (force-output)                                            (let* ((input-opndv-dataset (with-open-file (input-opndv-file-stream                                                                   input-opndv-file-name                                                                   :direction :input)                                                    (read input-opndv-file-stream)))                             (sorted-input-opndv-dataset (funcall opndv-sorter input-opndv-dataset))                             (algorithm-input (funcall opndv-to-input-converter sorted-input-opndv-dataset))                             (algorithm-output (time (funcall algorithm algorithm-input)))                             (output-opndv-dataset (funcall output-to-opndv-converter                                                            algorithm-input                                                            algorithm-output                                                            sorted-input-opndv-dataset))                             (output-opndv-file-name (concatenate 'string								  output-directory								  (pathname-name input-opndv-file-name)								  "."								  output-file-suffix)))                        (with-open-file (output-opndv-file-stream                                         output-opndv-file-name                                         :direction :output                                         :if-exists :rename-and-delete)                          (pprint output-opndv-dataset output-opndv-file-stream))))                  input-opndv-file-name-list))))(defun print-results (test-corpus-file-suffix                      computed-file-suffix		      test-corpus-directory                      computed-file-directory                      results-directory		      &optional                      (file-prefix ""))  (with-open-file (output-stream                   (concatenate 'string				results-directory				test-corpus-file-suffix				"-"				computed-file-suffix				(if (string= file-prefix "") "" "-")				file-prefix				".newres")		                      :direction :output                   :if-exists :rename-and-delete)    (let* ((test-corpus-file-name-list (directory (concatenate 'string							       test-corpus-directory							       file-prefix							       "*."							       test-corpus-file-suffix)))           (number-of-files (list-length test-corpus-file-name-list))           (numbers-of-errors-for-each-file (mapcar #'(lambda (test-corpus-file-name)                                                        (format t "~a..." (pathname-name test-corpus-file-name))                                                        (let* ((test-corpus-dataset (with-open-file (test-corpus-file-stream                                                                                                     test-corpus-file-name                                                                                                     :direction :input)                                                                                      (read test-corpus-file-stream)))                                                               (computed-file-name (concatenate 'string												computed-file-directory												(pathname-name test-corpus-file-name)												"."												computed-file-suffix))                                                               (computed-dataset (with-open-file (computed-file-stream                                                                                                  computed-file-name                                                                                                  :direction :input)                                                                                   (read computed-file-stream)))                                                               (sorted-test-corpus-dataset (sort-by-onset test-corpus-dataset))                                                               (sorted-computed-dataset (sort-by-onset computed-dataset))                                                               (test-corpus-pn-list (mapcar #'second sorted-test-corpus-dataset))                                                               (number-of-notes (list-length test-corpus-pn-list))                                                               (computed-pn-list (mapcar #'second sorted-computed-dataset))                                                               (test-corpus-pin-list (mapcar #'(lambda (pn1 pn2)                                                                                                 (pn2pin pn1 pn2))                                                                                             (butlast test-corpus-pn-list)                                                                                             (cdr test-corpus-pn-list)))                                                               (number-of-pins (list-length test-corpus-pin-list))                                                               (computed-pin-list (mapcar #'(lambda (pn1 pn2)                                                                                              (pn2pin pn1 pn2))                                                                                          (butlast computed-pn-list)                                                                                          (cdr computed-pn-list)))                                                               (note-error-list (mapcar #'pitch-name-equal-p                                                                                         test-corpus-pn-list                                                                                        computed-pn-list))                                                               (pin-error-list (mapcar #'pin=                                                                                        test-corpus-pin-list                                                                                       computed-pin-list))                                                               (number-of-note-errors (count nil note-error-list))                                                               (number-of-pin-errors (count nil pin-error-list))                                                               (output-list-of-note-errors (remove-if #'null                                                                                                      (mapcar #'(lambda (same test-corpus-datapoint computed-datapoint)                                                                                                                  (if (not same)                                                                                                                    (list test-corpus-datapoint                                                                                                                          computed-datapoint)))                                                                                                              note-error-list                                                                                                              sorted-test-corpus-dataset                                                                                                              sorted-computed-dataset)))                                                               (output-list-of-pin-errors (remove-if #'null                                                                                                     (mapcar #'(lambda (same                                                                                                                         this-test-corpus-datapoint                                                                                                                        next-test-corpus-datapoint                                                                                                                        this-computed-datapoint                                                                                                                        next-computed-datapoint                                                                                                                        test-corpus-pin                                                                                                                        computed-pin)                                                                                                                 (if (not same)                                                                                                                   (list this-test-corpus-datapoint                                                                                                                         next-test-corpus-datapoint                                                                                                                         test-corpus-pin                                                                                                                         this-computed-datapoint                                                                                                                         next-computed-datapoint                                                                                                                         computed-pin)))                                                                                                             pin-error-list                                                                                                             (butlast sorted-test-corpus-dataset)                                                                                                             (cdr sorted-test-corpus-dataset)                                                                                                             (butlast sorted-computed-dataset)                                                                                                             (cdr sorted-computed-dataset)                                                                                                             test-corpus-pin-list                                                                                                             computed-pin-list)))                                                               (percentage-notes-correct (* 100.0 (- 1 (/ number-of-note-errors number-of-notes))))                                                               (percentage-pins-correct (* 100.0 (- 1 (/ number-of-pin-errors number-of-pins)))))                                                          (format output-stream "TEST CORPUS FILE: ~ACOMPUTED FILE: ~ANUMBER OF NOTES: ~DNUMBER OF PINS: ~DNUMBER OF NOTE ERRORS: ~DNUMBER OF PIN ERRORS: ~D% NOTES SPELT CORRECTLY: ~,2F%% PINS SPELT CORRECTLY: ~,2F%LIST OF NOTE ERRORS:"                                                                  test-corpus-file-name                                                                  computed-file-name                                                                  number-of-notes                                                                  number-of-pins                                                                  number-of-note-errors                                                                  number-of-pin-errors                                                                  percentage-notes-correct                                                                  percentage-pins-correct)                                                          (pprint output-list-of-note-errors output-stream)                                                          (format output-stream "~%~%LIST OF PIN ERRORS:")                                                          (pprint output-list-of-pin-errors output-stream)                                                          (format t "DONE~%")                                                          (list number-of-notes number-of-note-errors number-of-pins number-of-pin-errors)))                                                    test-corpus-file-name-list))           (total-number-of-notes (apply #'+ (mapcar #'first numbers-of-errors-for-each-file)))           (total-number-of-note-errors (apply #'+ (mapcar #'second numbers-of-errors-for-each-file)))           (total-number-of-pins (apply #'+ (mapcar #'third numbers-of-errors-for-each-file)))           (total-number-of-pin-errors (apply #'+ (mapcar #'fourth numbers-of-errors-for-each-file)))           (total-percentage-notes-correct (* 100.0 (- 1 (/ total-number-of-note-errors total-number-of-notes))))           (total-percentage-pins-correct (* 100.0 (- 1 (/ total-number-of-pin-errors total-number-of-pins)))))      (format output-stream "FILE PREFIX: ~ATEST CORPUS FILE SUFFIX: ~ACOMPUTED FILE SUFFIX: ~ATEST CORPUS DIRECTORY: ~ACOMPUTED FILE DIRECTORY: ~ANUMBER OF FILES: ~DTOTAL NUMBER OF NOTES: ~DTOTAL NUMBER OF NOTE ERRORS: ~DTOTAL NUMBER OF PINS: ~DTOTAL NUMBER OF PIN ERRORS: ~DTOTAL % NOTES SPELT CORRECTLY: ~,2F%TOTAL % PINS SPELT CORRECTLY: ~,2F%"              file-prefix              test-corpus-file-suffix              computed-file-suffix              test-corpus-directory              computed-file-directory              number-of-files              total-number-of-notes              total-number-of-note-errors              total-number-of-pins              total-number-of-pin-errors              total-percentage-notes-correct              total-percentage-pins-correct))))