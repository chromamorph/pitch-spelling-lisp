(load "hd:2007-04-23:open-read-close.lisp")(load "hd:2007-04-23:statistics.lisp")(load "hd:2007-04-23:pitch.lisp")(load "hd:2007-04-23:sort-opnd.lisp")(defun mvt-na-diff-list (output-path1			 output-path2			 input-path1			 input-path2)  (let* ((sorted-diffs (sort (mapcar #'- 				     (movement-na-list output-path2 input-path2)				     (movement-na-list output-path1 input-path1))			     #'<)))    (format t "~%diffs=c(~,3f" (first sorted-diffs))    (mapcar #'(lambda (diff)		(format t ",~,3f" diff))	    (cdr sorted-diffs))    (format t ")~%"))  )(defun movement-na-list (output-path			 input-path)  (let* ((list-of-input-files (directory input-path))	 (list-of-output-files (directory output-path))	 (number-of-notes-in-each-movement (mapcar #'(lambda (input-file-name)						       (list-length (open-read-close input-file-name)))						   list-of-input-files))	 (movement-nec-list (let* ((list-of-necs (mapcar #'(lambda (input-file output-file)							     (count nil (mapcar #'pn=										(mapcar #'second (sort-by-onset (open-read-close input-file)))										(mapcar #'second (sort-by-onset (open-read-close output-file))))))							 list-of-input-files							 list-of-output-files)))			      (if (equalp (mapcar #'pathname-name list-of-output-files)					  (mapcar #'pathname-name list-of-input-files))				  list-of-necs				  (error "~%ERROR: Output file list not same as input file list."))))	 (movement-na-list (mapcar #'(lambda (mvt-nec mvt-nnotes)				       (* 100.0 (- 1 (/ mvt-nec mvt-nnotes))))				   movement-nec-list				   number-of-notes-in-each-movement)))    movement-na-list))(defun results-for-one-algorithm (output-path 				  &optional 				  (input-path "/Users/dave/Documents/Musedata/20040829-small-corpus/opnd-m/*.opnd-m")				  (modified-haydn-file "/Users/dave/Documents/Musedata/20040829-small-corpus/haydndoversyms-10004m/haydndoversyms-10004m-en.opnd-m"))  (let* ((list-of-input-files (directory input-path))	 (list-of-movement-composers (mapcar #'(lambda (file-name)						 (subseq (pathname-name file-name) 0 4))					     list-of-input-files))	 (number-of-notes-in-each-movement (mapcar #'(lambda (input-file-name)						       (list-length (open-read-close input-file-name)))						   list-of-input-files))	 (composer-list '("bach" "beet" "core" "hand" "hayd" "moza" "tele" "viva"))	 (number-of-notes-for-each-composer (let* ((nnforcomp (make-list 8 :initial-element 0))						   (composer-position nil))					      (dotimes (i 216 nnforcomp)						(setf composer-position (position (elt list-of-movement-composers i)										  composer-list										  :test #'string=))						(setf (elt nnforcomp composer-position)						      (+ (elt nnforcomp composer-position)							 (elt number-of-notes-in-each-movement i))))))	 	 	 (list-of-output-files (directory output-path))	 (movement-nec-list (let* ((list-of-necs (mapcar #'(lambda (input-file output-file)							     (count nil (mapcar #'pn=										(mapcar #'second (sort-by-onset (open-read-close input-file)))										(mapcar #'second (sort-by-onset (open-read-close output-file))))))							 list-of-input-files							 list-of-output-files)))			      (if (equalp (mapcar #'pathname-name list-of-output-files)					  (mapcar #'pathname-name list-of-input-files))				  list-of-necs				  (error "~%ERROR: Output file list not same as input file list."))))	 (composer-nec-list (let* ((composer-nec-list (make-list 8 :initial-element 0))				   (composer-position nil))			      (dotimes (i 216 composer-nec-list)				(setf composer-position (position (elt list-of-movement-composers i)								  composer-list								  :test #'string=))				(setf (elt composer-nec-list composer-position)				      (+ (elt composer-nec-list composer-position)					 (elt movement-nec-list i))))))	 (overall-nec-1 (apply #'+ composer-nec-list))	 (overall-nec-2 (apply #'+ movement-nec-list)))    (if (= overall-nec-1 overall-nec-2)	(let* ((total-number-of-notes (apply #'+ number-of-notes-for-each-composer))	       (composer-na-list (mapcar #'(lambda (composer-nec number-of-notes-for-this-composer)					     (* 100.0 (- 1 (/ composer-nec number-of-notes-for-this-composer))))					 composer-nec-list					 number-of-notes-for-each-composer))	       (overall-na (* 100.0 (- 1 (/ overall-nec-1 total-number-of-notes))))	       (sd (standard-deviation composer-na-list))	       (modified-input-haydn-opndv-dataset (sort-by-onset (open-read-close modified-haydn-file)))	       (output-haydn-opndv-file-name (find "haydndoversyms-10004m" list-of-output-files :key #'pathname-name :test #'string=))	       (output-haydn-opndv-dataset (sort-by-onset (open-read-close output-haydn-opndv-file-name)))	       (original-haydn100-nec (elt movement-nec-list (position "haydndoversyms-10004m" list-of-input-files :key #'pathname-name :test #'string=)))	       (modified-haydn100-nec (apply #'min					     (list (count nil							  (mapcar #'pn=								  (mapcar #'second output-haydn-opndv-dataset)								  (mapcar #'second modified-input-haydn-opndv-dataset)))						   (count nil							  (mapcar #'pn=								  (mapcar #'(lambda (pn)									      (pn-tran pn "rd2"))									  (mapcar #'second output-haydn-opndv-dataset))								  (mapcar #'second modified-input-haydn-opndv-dataset)))						   (count nil							  (mapcar #'pn=								  (mapcar #'(lambda (pn)									      (pn-tran pn "fd2"))									  (mapcar #'second output-haydn-opndv-dataset))								  (mapcar #'second modified-input-haydn-opndv-dataset))))))	       (original-haydn-nec (fifth composer-nec-list))	       (modified-haydn-nec (- original-haydn-nec (- original-haydn100-nec modified-haydn100-nec)))	       (haydn-number-of-notes (fifth number-of-notes-for-each-composer))	       (modified-haydn-na (* 100.0 (- 1 (/ modified-haydn-nec haydn-number-of-notes))))	       (modified-overall-nec (- overall-nec-1 (- original-haydn100-nec modified-haydn100-nec)))	       (modified-overall-na (* 100.0 (- 1 (/ modified-overall-nec total-number-of-notes))))	       (modified-sd (standard-deviation (append (subseq composer-na-list 0 4)							(list modified-haydn-na)							(subseq composer-na-list 5)))))	  (format t "~%Note error counts for ~s~%" output-path)	  (mapcar #'(lambda (composer) (format t "~10@a" composer)) (subseq composer-list 0 4))	  (format t "~20@a" (fifth composer-list))	  (mapcar #'(lambda (composer)		      (format t "~10@a" composer) 		      )		  (subseq composer-list 5))	  (format t "~20@a~%" "Comp")	  (if (<= original-haydn100-nec		  modified-haydn100-nec)	      (progn (mapcar #'(lambda (composer-nec)				 (format t "~10d" composer-nec))			     (subseq composer-nec-list 0 4))		     (format t "~20d" (fifth composer-nec-list))		     (mapcar #'(lambda (composer-nec)				 (format t "~10d" composer-nec))			     (subseq composer-nec-list 5)) )	      (progn (mapcar #'(lambda (composer-nec)				 (format t "~10d" composer-nec))			     (subseq composer-nec-list 0 4))		     (format t "~10d (~7d)" original-haydn-nec modified-haydn-nec)		     (mapcar #'(lambda (composer-nec)				 (format t "~10d" composer-nec))			     (subseq composer-nec-list 5))))	  	  (if (> original-haydn100-nec		 modified-haydn100-nec)	      (format t "~10d (~7d)" overall-nec-1 modified-overall-nec)	      (format t "~20d" overall-nec-1)	      )	  (format t "~%Note accuracies for ~s~%" output-path)	  (mapcar #'(lambda (composer) (format t "~10@a" composer)) (subseq composer-list 0 4))	  (format t "~20@a" (fifth composer-list))	  (mapcar #'(lambda (composer) (format t "~10@a" composer)) (subseq composer-list 5))	  (format t "~20@a~20@a~%" "Comp" "SD")	  (if (<= original-haydn100-nec		  modified-haydn100-nec)	      (progn (mapcar #'(lambda (composer-na)				 (format t "~10,2f" composer-na))			     (subseq composer-na-list 0 4))		     (format t "~20,2f" (fifth composer-na-list))		     (mapcar #'(lambda (composer-na)				 (format t "~10,2f" composer-na))			     (subseq composer-na-list 5))		     )	      (progn (mapcar #'(lambda (composer-na)				 (format t "~10,2f" composer-na))			     (subseq composer-na-list 0 4))		     (format t "~10,2f (~7,2f)" (fifth composer-na-list) modified-haydn-na)		     (mapcar #'(lambda (composer-na)				 (format t "~10,2f" composer-na))			     (subseq composer-na-list 5))))	  (if (<= original-haydn100-nec		  modified-haydn100-nec)	      (format t "~20,2f~20,2f" overall-na sd)	      (format t "~10,2f (~7,2f)~10,2f (~7,2f)" overall-na modified-overall-na sd modified-sd))	  	  (format t "~%~%")	  (if (<= original-haydn100-nec		  modified-haydn100-nec)	      (progn (mapcar #'(lambda (nec)				 (format t "&~10d" nec))			     composer-nec-list)		     (format t "&~10d" overall-nec-1))	      (progn (mapcar #'(lambda (nec)				 (format t "&~10d" nec))			     (subseq composer-nec-list 0 4))		     (format t "&~10d (~d)" original-haydn-nec modified-haydn-nec)		     (mapcar #'(lambda (nec)				 (format t "&~10d" nec))			     (subseq composer-nec-list 5))		     (format t "&~10d (~d)" overall-nec-1 modified-overall-nec)))	  (if (<= original-haydn100-nec		  modified-haydn100-nec)	      (progn (mapcar #'(lambda (na)				 (format t "&~10,2f" na))			     composer-na-list)		     (format t "&~10,2f&~10,2f\\\\" overall-na sd))	      (progn (mapcar #'(lambda (na)				 (format t "&~10,2f" na))			     (subseq composer-na-list 0 4))		     (format t "&~10,2f (~,2f)" (fifth composer-na-list) modified-haydn-na)		     (mapcar #'(lambda (na)				 (format t "&~10,2f" na))			     (subseq composer-na-list 5))		     (format t "&~10,2f (~,2f) &~10,2f (~,2f)\\\\" overall-na modified-overall-na sd modified-sd)))	  )	(error "~%ERROR: list-of-overall-necs-1 not equal to list-of-overall-necs-2"))))