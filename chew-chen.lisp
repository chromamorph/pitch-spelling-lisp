;; Port from ps-dphil-chewchen.lisp(load "hd:2007-04-23:sort-opnd.lisp")(load "hd:2007-04-23:open-read-close.lisp")(load "hd:2007-04-23:pitch.lisp")(load "hd:2007-04-23:print-results.lisp")(defstruct sa-node  index  pitch-class  vector)(defstruct ccnote  onset  duration  midi  index  sa-vector  pn  parent-ccnote)(defstruct chunk  ccnote-list  duration  sum-pd)(defstruct parameter-set  ws  wr  f  r  chunk-size  starting-or-sounding  sa-or-lof  sa-range  note-error-count  pin-error-count)(defun cc-opt-01 (ccnote-list)  (chewchen-with-parameter-set (MAKE-PARAMETER-SET  :WS 8 :WR 2 :F 0.5 :R 2.7386127875258306 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING 'SOUNDING :SA-OR-LOF 'SA :SA-RANGE '(-22 26) :NOTE-ERROR-COUNT 1665 :PIN-ERROR-COUNT 2779)                               ccnote-list))(defun cc-opt-02 (ccnote-list)  (chewchen-with-parameter-set (MAKE-PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 2.7386127875258306 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING 'SOUNDING :SA-OR-LOF 'SA :SA-RANGE '(-15 19) :NOTE-ERROR-COUNT 1665 :PIN-ERROR-COUNT 2779)                               ccnote-list))(defun cc-opt-03 (ccnote-list)  (chewchen-with-parameter-set (MAKE-PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 0.3651483716701107 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING 'SOUNDING :SA-OR-LOF 'LOF :SA-RANGE '(-22 26) :NOTE-ERROR-COUNT 1665 :PIN-ERROR-COUNT 2779)                               ccnote-list))(defun cc-opt-04 (ccnote-list)  (chewchen-with-parameter-set (MAKE-PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 0.3651483716701107 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING 'SOUNDING :SA-OR-LOF 'LOF :SA-RANGE '(-15 19) :NOTE-ERROR-COUNT 1665 :PIN-ERROR-COUNT 2779)                               ccnote-list))(defun cc-opt-05 (ccnote-list)  (chewchen-with-parameter-set (MAKE-PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 0.3651483716701107 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING 'SOUNDING :SA-OR-LOF 'SA :SA-RANGE '(-22 26) :NOTE-ERROR-COUNT 1665 :PIN-ERROR-COUNT 2779)                               ccnote-list))(defun cc-opt-06 (ccnote-list)  (chewchen-with-parameter-set (MAKE-PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 0.3651483716701107 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING 'SOUNDING :SA-OR-LOF 'SA :SA-RANGE '(-15 19) :NOTE-ERROR-COUNT 1665 :PIN-ERROR-COUNT 2779)                               ccnote-list))(defun cc-opt-07 (ccnote-list)  (chewchen-with-parameter-set (MAKE-PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 2.7386127875258306 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING 'STARTING :SA-OR-LOF 'SA :SA-RANGE '(-22 26) :NOTE-ERROR-COUNT 1666 :PIN-ERROR-COUNT 2737)                               ccnote-list))(defun cc-opt-08 (ccnote-list)  (chewchen-with-parameter-set (MAKE-PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 2.7386127875258306 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING 'STARTING :SA-OR-LOF 'SA :SA-RANGE '(-15 19) :NOTE-ERROR-COUNT 1666 :PIN-ERROR-COUNT 2737)                               ccnote-list))(defun cc-opt-09 (ccnote-list)  (chewchen-with-parameter-set (MAKE-PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 0.3651483716701107 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING 'STARTING :SA-OR-LOF 'LOF :SA-RANGE '(-22 26) :NOTE-ERROR-COUNT 1666 :PIN-ERROR-COUNT 2737)                               ccnote-list))(defun cc-opt-10 (ccnote-list)  (chewchen-with-parameter-set (MAKE-PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 0.3651483716701107 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING 'STARTING :SA-OR-LOF 'LOF :SA-RANGE '(-15 19) :NOTE-ERROR-COUNT 1666 :PIN-ERROR-COUNT 2737)                               ccnote-list))(defun cc-opt-11 (ccnote-list)  (chewchen-with-parameter-set (MAKE-PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 0.3651483716701107 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING 'STARTING :SA-OR-LOF 'SA :SA-RANGE '(-22 26) :NOTE-ERROR-COUNT 1666 :PIN-ERROR-COUNT 2737)                               ccnote-list))(defun cc-opt-12 (ccnote-list)  (chewchen-with-parameter-set (MAKE-PARAMETER-SET :WS 8 :WR 2 :F 0.5 :R 0.3651483716701107 :CHUNK-SIZE 500 :STARTING-OR-SOUNDING 'STARTING :SA-OR-LOF 'SA :SA-RANGE '(-15 19) :NOTE-ERROR-COUNT 1666 :PIN-ERROR-COUNT 2737)                               ccnote-list))(defun chewchen-with-parameter-set (parameter-set ccnote-list)  (chewchen :ws (parameter-set-ws parameter-set)            :wr (parameter-set-wr parameter-set)            :f (parameter-set-f parameter-set)            :r (parameter-set-r parameter-set)            :chunk-size (parameter-set-chunk-size parameter-set)            :starting-or-sounding (parameter-set-starting-or-sounding parameter-set)            :sa-or-lof (parameter-set-sa-or-lof parameter-set)            :min-sa-index (first (parameter-set-sa-range parameter-set))            :max-sa-index (second (parameter-set-sa-range parameter-set))            :ccnote-list ccnote-list))(defun chewchen (&key (ws 4) (wr 3) (f .7) (r (sqrt (/ 2 15))) (h 1)                      (chunk-size 1000) (min-sa-index -15) (max-sa-index 19)                      (ccnote-list (opndv2ccnotelist)) (starting-or-sounding 'starting)                      (sa-or-lof 'sa))  (let* (spiral-array chunk-list pitch-class ce list-of-chunk-ccnote-lists chunk-duration-list                      ce-self-ref ce-cum min-diff diff-list possible-sa-nodes best-position best-sa-node number-of-chunks                      ccnote-list-size output-list)    (setf ccnote-list-size (list-length ccnote-list))    (setf spiral-array (construct-spiral-array min-sa-index max-sa-index r h))    (setf list-of-chunk-ccnote-lists (construct-list-of-chunk-ccnote-lists ccnote-list chunk-size                                                                           starting-or-sounding))    (setf chunk-duration-list (mapcar #'(lambda (ccnote-list)                                          (apply #'+ (mapcar #'ccnote-duration ccnote-list)))                                      list-of-chunk-ccnote-lists))    (setf chunk-list (mapcar #'(lambda (ccnote-list duration)                                 (make-chunk :ccnote-list ccnote-list                                             :duration duration))                             list-of-chunk-ccnote-lists                             chunk-duration-list))    (setf number-of-chunks (list-length chunk-list))    (dotimes (j number-of-chunks)      ;(format t "~%Chunk ~d" j)      (dotimes (phase 2)        ;(format t "~% Phase ~d" phase)        (if (> j 0)          (if (= phase 0)            (setf ce (compute-ce (subseq chunk-list (max (- j ws) 0) j)                                 sa-or-lof))            (setf ce-self-ref (compute-ce (subseq chunk-list (max (1+ (- j wr)) 0) (1+ j))                                          sa-or-lof)                  ce-cum (compute-ce (subseq chunk-list 0 j)                                     sa-or-lof)                  ce (if (or ce-self-ref                             ce-cum)                       (if (eq sa-or-lof 'sa)                         (vector-sum (list (if ce-self-ref                                             (scalar-vector-multiply f ce-self-ref)                                             (list 0 0 0))                                           (if ce-cum                                             (scalar-vector-multiply (- 1 f) ce-cum)                                             (list 0 0 0))))                         (+ (* f (if ce-self-ref ce-self-ref 0))                            (* (- 1 f) (if ce-cum ce-cum 0))))))))        (if (or (= j 0)                (and (= phase 0) (/= ws 0))                (and (= phase 1) (not (and (= f 1) (= wr 0)))))          (progn (dolist (ccnote (chunk-ccnote-list (elt chunk-list j)))                   ;(format t "~%CE = ~a" ce)                   (setf pitch-class (mod (ccnote-midi ccnote) 12))                   (setf possible-sa-nodes (remove-if #'null (mapcar #'(lambda (sa-node)                                                                         (if (= pitch-class (sa-node-pitch-class sa-node))                                                                           sa-node))                                                                     spiral-array)))                   (setf diff-list (if (or (and (= j 0) (= phase 0))                                                                                      ;following is to ensure does not crash when ce is null on first phase                                           ;because of no notes in the previous ws chunks.                                           ;Need to have pitch names assigned in order to do self-referential                                           ;window in second phase.                                           (and (= phase 0) (null ce))                                           )                                     (mapcar #'(lambda (index)                                                 (abs (- index 2)))                                             (mapcar #'sa-node-index possible-sa-nodes))                                     (if (eq sa-or-lof 'sa)                                       (mapcar #'(lambda (vector)                                                   (euclidean-distance vector ce))                                               (mapcar #'sa-node-vector possible-sa-nodes))                                       (mapcar #'(lambda (index)                                                   (abs (- index ce)))                                               (mapcar #'sa-node-index possible-sa-nodes)))))                   (setf min-diff (apply #'min diff-list))                   (setf best-position (position min-diff diff-list))                   (setf best-sa-node (elt possible-sa-nodes best-position))                   (setf (ccnote-index ccnote) (sa-node-index best-sa-node))                   (setf (ccnote-sa-vector ccnote) (copy-list (sa-node-vector best-sa-node))))                 (setf (chunk-sum-pd (elt chunk-list j)) (compute-chunk-sum-pd (elt chunk-list j) sa-or-lof))                 ;(format t "~%chunk-sum-pd = ~a" (chunk-sum-pd (elt chunk-list j)))                 (if (and (= 0 j) (= phase 0))                   (setf ce (compute-ce (list (elt chunk-list j))                                        sa-or-lof)))))))    (setf output-list          (apply #'append (mapcar #'chunk-ccnote-list chunk-list)))    (if (eq starting-or-sounding 'sounding)      (setf output-list (compute-sounding-output-list output-list ccnote-list)))    (dotimes (i ccnote-list-size)      (setf (ccnote-pn (elt output-list i))            (midiindex2pn (ccnote-midi (elt output-list i)) (ccnote-index (elt output-list i)))))    output-list))(defun ccnotelist2opndv-2 (input-ccnotelist                           output-ccnotelist                           sorted-input-opndv-dataset)  input-ccnotelist  (ccnotelist2opndv output-ccnotelist                    sorted-input-opndv-dataset                    t))(defun ccnotelist2opndv (ccnote-list                         input-filename                         sorted-opndv-dataset)  (let* ((original-opndv-dataset (if sorted-opndv-dataset                                   input-filename                                   (sort-by-onset (open-read-close input-filename))))         (original-onset-midi-duration-list (mapcar #'(lambda (opndv-datapoint)                                                        (list (first opndv-datapoint)                                                              (pn2midi (second opndv-datapoint))                                                              (third opndv-datapoint)))                                                    original-opndv-dataset))         (test-onset-midi-duration-list (mapcar #'(lambda (ccnote)                                                   (list (ccnote-onset ccnote)                                                         (ccnote-midi ccnote)                                                         (ccnote-duration ccnote)))                                                ccnote-list)))    (if (equalp original-onset-midi-duration-list                test-onset-midi-duration-list)      (let* ((output-pitch-names-p1 (mapcar #'ccnote-pn ccnote-list))             (output-pitch-names-rd2 (mapcar #'(lambda (pitch-name)                                             (pn-tran pitch-name "rd2"))                                         output-pitch-names-p1))             (output-pitch-names-fd2 (mapcar #'(lambda (pitch-name)                                                 (pn-tran pitch-name "fd2"))                                             output-pitch-names-p1))             (input-pitch-names (mapcar #'second original-opndv-dataset))             (error-number-list (list                                  ;number of errors for p1                                 (count nil (mapcar #'pitch-name-equal-p input-pitch-names output-pitch-names-p1))                                 ;number of errors for rd2                                 (count nil (mapcar #'pitch-name-equal-p input-pitch-names output-pitch-names-rd2))                                 ;number of errors for fd2                                 (count nil (mapcar #'pitch-name-equal-p input-pitch-names output-pitch-names-fd2))                                 ))             (pitch-names (elt                            (list output-pitch-names-p1                                 output-pitch-names-rd2                                 output-pitch-names-fd2)                           (position (apply #'min error-number-list)                                     error-number-list))))        (mapcar #'(lambda (opndv-datapoint pitch-name)                    (append (list (first opndv-datapoint))                            (list pitch-name)                            (cddr opndv-datapoint)))                original-opndv-dataset                pitch-names))      (progn (format t "~%ERROR: chewchen output not compatible with input opndv.")             (abort)))))(defun opndv2ccnotelist (&optional (opnd-m-file (choose-file-dialog  :button-string "OPND-M")))  (mapcar #'(lambda (opndv-datapoint)              (make-ccnote :onset (first opndv-datapoint)                           :duration (third opndv-datapoint)                           :midi (pn2midi (second opndv-datapoint))))          (sort-by-onset (open-read-close opnd-m-file))))(defun opndv2ccnotelist-2 (sorted-input-opndv-dataset)  (mapcar #'(lambda (opndv-datapoint)              (make-ccnote :onset (first opndv-datapoint)                           :duration (third opndv-datapoint)                           :midi (pn2midi (second opndv-datapoint))))          sorted-input-opndv-dataset))(defun compute-ce (list-of-chunks sa-or-lof)  (if (and list-of-chunks           (/= 0 (apply #'+ (mapcar #'chunk-duration list-of-chunks))))    (if (eq sa-or-lof 'sa)      (scalar-vector-multiply (/ 1 (apply #'+ (mapcar #'chunk-duration list-of-chunks)))                            (vector-sum (mapcar #'chunk-sum-pd list-of-chunks)))      (* (/ 1 (apply #'+ (mapcar #'chunk-duration list-of-chunks)))         (apply #'+ (mapcar #'chunk-sum-pd list-of-chunks))))))(defun compute-chunk-sum-pd (chunk sa-or-lof)  (if (eq sa-or-lof 'sa)    (let* ((vs (vector-sum (mapcar #'(lambda (ccnote)                                       (scalar-vector-multiply (ccnote-duration ccnote)                                                               (ccnote-sa-vector ccnote)))                                   (chunk-ccnote-list chunk)))))      (if vs vs (list 0 0 0)))    (apply #'+ (mapcar #'(lambda (ccnote)                           (* (ccnote-duration ccnote)                              (ccnote-index ccnote)))                       (chunk-ccnote-list chunk)))))(defun construct-list-of-chunk-ccnote-lists (ccnote-list                                             chunk-size                                             starting-or-sounding)  (let* (new-ccnote-list ccnote-list-size chunk-list chunk-number this-chunk)    (setf new-ccnote-list (mapcar #'copy-ccnote ccnote-list))    (if (eq starting-or-sounding 'sounding)            ;If starting-or-sounding is 'sounding:      ;Need to split up all the ccnotes in ccnote-list into within-chunk segments      ;each of these segments needs to be tagged with the original ccnote from which it came      ;so that they can be recombined at the end.      ;One possible problem is that different segments of the same note could be assigned different pitch names...            (let* (max-offset number-of-chunks chunk-boundaries)        (setf max-offset (apply #'max (mapcar #'ccnote-offset ccnote-list)))        (setf number-of-chunks (ceiling (/ max-offset chunk-size)))        (setf chunk-boundaries              (let (cb)                (dotimes (i number-of-chunks (reverse cb))                  (setf cb (cons (* (1+ i) chunk-size)                                 cb)))))        (setf new-ccnote-list              (sort (let* ((ccnote nil)                           (output-list nil)                           (chunk-boundaries-for-this-ccnote nil)                           (new-ccnote-boundaries-for-this-note nil)                           (new-ccnotes-for-this-ccnote nil))                      (dotimes (i (list-length ccnote-list)                                   output-list)                        (setf ccnote (elt ccnote-list i))                        (setf chunk-boundaries-for-this-ccnote                              (remove-if #'null (mapcar #'(lambda (boundary)                                                            (if (< (ccnote-onset ccnote)                                                                   boundary                                                                   (ccnote-offset ccnote))                                                              boundary))                                                        chunk-boundaries)))                        (setf new-ccnote-boundaries-for-this-note                              (append (list (ccnote-onset ccnote))                                      chunk-boundaries-for-this-ccnote                                      (list (ccnote-offset ccnote))))                        (setf new-ccnotes-for-this-ccnote                              (let (l)                                (dotimes (j (1- (list-length new-ccnote-boundaries-for-this-note)) (reverse l))                                  (setf l                                        (cons (make-ccnote :onset (elt new-ccnote-boundaries-for-this-note j)                                                           :duration (- (elt new-ccnote-boundaries-for-this-note (1+ j))                                                                        (elt new-ccnote-boundaries-for-this-note j))                                                           :midi (ccnote-midi ccnote)                                                           :parent-ccnote i)                                              l)))))                        (setf output-list                              (append output-list new-ccnotes-for-this-ccnote))))                    #'(lambda (ccn1 ccn2)                        (or (< (ccnote-onset ccn1)                               (ccnote-onset ccn2))                            (and (= (ccnote-onset ccn1)                                    (ccnote-onset ccn2))                                 (< (ccnote-midi ccn1)                                    (ccnote-midi ccn2)))                            (and (= (ccnote-onset ccn1)                                    (ccnote-onset ccn2))                                 (= (ccnote-midi ccn1)                                    (ccnote-midi ccn2))                                 (< (ccnote-duration ccn1)                                    (ccnote-duration ccn2)))))))))        (setf ccnote-list-size (list-length new-ccnote-list))    (setf chunk-list nil)    (setf chunk-number 1)    (setf this-chunk nil)    (dotimes (i ccnote-list-size)      (if (< (ccnote-onset (elt new-ccnote-list i))             (* chunk-number chunk-size))        (setf this-chunk              (append this-chunk                      (list (copy-ccnote (elt new-ccnote-list i)))))        (progn (setf chunk-list (append chunk-list (list this-chunk)))               (setf chunk-number (1+ chunk-number))               (do ()                   ((< (ccnote-onset (elt new-ccnote-list i))                       (* chunk-number chunk-size))                    (setf this-chunk                          (list (elt new-ccnote-list i))))                 (setf chunk-list                       (append chunk-list (list nil)))                 (setf chunk-number (1+ chunk-number))))))        (if this-chunk      (setf chunk-list            (append chunk-list (list this-chunk))))    chunk-list))(defun scalar-vector-multiply (s v)  (mapcar #'(lambda (e)              (* s e))          v))(defun vector-sum (list-of-vectors)  (if list-of-vectors    (apply #'mapcar #'+ list-of-vectors)))(defun ccnote-offset (ccnote)  (+ (ccnote-onset ccnote)     (ccnote-duration ccnote)))(defun euclidean-distance (v1 v2)  (sqrt (apply #'+ (mapcar #'(lambda (x)                               (* x x))                           (mapcar #'- v1 v2)))))(defun compute-sounding-output-list (output-list ccnote-list)  (let* (sorted-output-list         list-of-index-lists         list-of-index-sets         list-of-indices         ;list-of-multiple-pitch-name-assignments         )    (setf sorted-output-list (sort output-list #'(lambda (ccn1 ccn2)                                                   (or (< (ccnote-parent-ccnote ccn1) (ccnote-parent-ccnote ccn2))                                                       (and (= (ccnote-parent-ccnote ccn1) (ccnote-parent-ccnote ccn2))                                                            (< (ccnote-onset ccn1) (ccnote-onset ccn2)))))))    (setf list-of-index-lists (let* ((loil nil)                                     (current-parent-ccnote nil))                                (dotimes (i (list-length sorted-output-list) (reverse (mapcar #'reverse loil)))                                  (if (and current-parent-ccnote                                           (= current-parent-ccnote (ccnote-parent-ccnote (elt sorted-output-list i))))                                    (setf (first loil)                                          (cons (ccnote-index (elt sorted-output-list i))                                                (first loil)))                                    (setf loil                                          (cons (list (ccnote-index (elt sorted-output-list i)))                                                loil)                                          current-parent-ccnote                                          (ccnote-parent-ccnote (elt sorted-output-list i))))                                  )))    (setf list-of-index-sets (mapcar #'remove-duplicates list-of-index-lists))    #|(if (not (every #'(lambda (index-set)                        (= (list-length index-set) 1))                    list-of-index-sets))      (progn (setf list-of-multiple-pitch-name-assignments                   (remove-if #'null (mapcar #'(lambda (is)                                                 (if (= 1 (list-length is))                                                   nil                                                   is))                                             list-of-index-sets)))             (format t "~%~d notes have multiple pitch names assigned because of crossing chunk boundaries: ~a"                     (list-length list-of-multiple-pitch-name-assignments)                     list-of-multiple-pitch-name-assignments)))|#    (setf list-of-indices (mapcar #'first list-of-index-sets))    (setf output-list ccnote-list)    (mapcar #'(lambda (ccnote index)                (setf (ccnote-index ccnote)                      index))            output-list            list-of-indices)    output-list))(defun construct-spiral-array (&optional                                (min-sa-index -15)                               (max-sa-index 19)                               (r (sqrt (/ 2 15)))                               (h 1))  (do* ((sa nil)        (k min-sa-index (1+ k))        (x nil)        (y nil))       ((> k max-sa-index)        sa)    (setf sa          (append sa                  (list (make-sa-node :index  k                                      :pitch-class (mod (* 7 k) 12)                                      :vector (list (if (< (abs (setf x (* r (sin (/ (* k pi) 2))))) .000000001)                                                      0 x)                                                    (if (< (abs (setf y (* r (cos (/ (* k pi) 2))))) .000000001)                                                      0 y)                                                    (* k h))))))))#|(run-algorithm 'cc-opt-01 'sort-by-onset 'opndv2ccnotelist-2 'ccnotelist2opndv-2 "opnd-m" "ccop01" "/Users/dave/Documents/Musedata/20040829-small-corpus/opnd-m\ from\ nts/" "/Users/dave/Documents/Musedata/20040829-small-corpus/ccop01-2005-10-12/" )gives exactly the same output as first output.(mapcar #'(lambda (algorithm		   output-file-suffix)	    (run-algorithm algorithm  			   'sort-by-onset			    'opndv2ccnotelist-2			    'ccnotelist2opndv-2			    "opnd-m"			    (concatenate 'string output-file-suffix "n")			    "/Users/dave/Documents/Musedata/20040829-small-corpus/opnd-m-noisy/"			    (concatenate 'string 					 "/Users/dave/Documents/Musedata/20040829-small-corpus/"					 output-file-suffix					 "-noisy/")))	'(cc-opt-01 cc-opt-02 cc-opt-03 cc-opt-04 cc-opt-05 cc-opt-06 cc-opt-07 cc-opt-08 cc-opt-09 cc-opt-10 cc-opt-11 cc-opt-12)	'("ccop01"            "ccop02"            "ccop03"            "ccop04"            "ccop05"            "ccop06"            "ccop07"            "ccop08"            "ccop09"            "ccop10"            "ccop11"            "ccop12"))To find out why SA gives different results from LOF for two pairs of parameter-value combinations(defun saorlof-debug-sa-1 (ccnote-list)  (chewchen-with-parameter-set (MAKE-PARAMETER-SET :WS 4                                                    :WR 4                                                   :CHUNK-SIZE 500                                                   :STARTING-OR-SOUNDING 'STARTING                                                   :SA-RANGE '(-15 19)                                                   :F 0.5                                                   :SA-OR-LOF 'SA                                                   :R 2.7386127875258306)                               ccnote-list))(run-alg-and-print-results 'saorlof-debug-sa-1                            'sort-by-onset                           'opndv2ccnotelist                           'ccnotelist2opndv                           "opnd-m"                           "cc-sa-1"                           "hd:2007-04-23:opnd-m-from-nts:"                           "hd:2007-04-23:cc-sa-1:"                           "hd:2007-04-23:results:")(setf algorithm 'saorlof-debug-sa-1       opndv-sorter 'sort-by-onset      opndv-to-input-converter 'opndv2ccnotelist-2      output-to-opndv-converter 'ccnotelist2opndv      input-file-suffix "opnd-m"      output-file-suffix "cc-sa-1"      input-directory "hd:2007-04-23:opnd-m-from-nts:"      output-directory "hd:2007-04-23:cc-sa-1:"      results-directory "hd:2007-04-23:results:")(setf input-opndv-file-name (first input-opndv-file-name-list))|#